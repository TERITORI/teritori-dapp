diff --git a/bin/provider/jsonrpc/jsonrpc.d.ts b/bin/provider/jsonrpc/jsonrpc.d.ts
index 3b50e8ec390e5e344ef81d928aea8976c4020cb6..759408444a434f801c540c2f95923ab7aff46c35 100644
--- a/bin/provider/jsonrpc/jsonrpc.d.ts
+++ b/bin/provider/jsonrpc/jsonrpc.d.ts
@@ -25,5 +25,5 @@ export declare class JSONRPCProvider implements Provider {
     sendTransaction<K extends keyof BroadcastTransactionMap>(tx: string, endpoint: K): Promise<BroadcastTransactionMap[K]['result']>;
     private broadcastTxSync;
     private broadcastTxCommit;
-    waitForTransaction(hash: string, fromHeight?: number, timeout?: number): Promise<Tx>;
+    waitForTransaction(hash: string, fromHeight?: number, timeout?: number): Promise<{tx: Tx, height: number, index: number}>;
 }
diff --git a/bin/provider/provider.d.ts b/bin/provider/provider.d.ts
index 4fcb051ea4dd924bfbdfcf3ca697982a3504d88f..4908d25744a3b06194263e2bdd54c7bee058a6df 100644
--- a/bin/provider/provider.d.ts
+++ b/bin/provider/provider.d.ts
@@ -84,5 +84,5 @@ export interface Provider {
      * @param {number} [fromHeight=latest] The block height used to begin the search
      * @param {number} [timeout=15000] Optional wait timeout in MS
      */
-    waitForTransaction(hash: string, fromHeight?: number, timeout?: number): Promise<Tx>;
+    waitForTransaction(hash: string, fromHeight?: number, timeout?: number): Promise<{tx: Tx, height: number, index: number}>;
 }
diff --git a/bin/provider/utility/provider.utility.d.ts b/bin/provider/utility/provider.utility.d.ts
index d476e4ef17146c3001ac538699dc6dd5ee1256e0..16a444812443399344d250d6e66a49eed23eff94 100644
--- a/bin/provider/utility/provider.utility.d.ts
+++ b/bin/provider/utility/provider.utility.d.ts
@@ -25,4 +25,4 @@ export declare const extractAccountNumberFromResponse: (abciData: string | null)
  * @param {number} [fromHeight=latest] the starting height for the search. If omitted, it is the latest block in the chain
  * @param {number} [timeout=15000] the timeout in MS for the search
  */
-export declare const waitForTransaction: (provider: Provider, hash: string, fromHeight?: number, timeout?: number) => Promise<Tx>;
+export declare const waitForTransaction: (provider: Provider, hash: string, fromHeight?: number, timeout?: number) => Promise<{tx: Tx, height: number, index: number}>;
diff --git a/bin/provider/utility/provider.utility.js b/bin/provider/utility/provider.utility.js
index 82a13a73ec49ed3970dc0567bac5b4bfc4fa8c41..b860d1d4d4d45dd24073a3a3aba665be5bc35690 100644
--- a/bin/provider/utility/provider.utility.js
+++ b/bin/provider/utility/provider.utility.js
@@ -167,7 +167,7 @@ var waitForTransaction = function (provider, hash, fromHeight, timeout) { return
                                                     // Clear the interval
                                                     clearInterval(fetchInterval);
                                                     // Decode the transaction from amino
-                                                    resolve(proto_1.Tx.decode(txRaw));
+                                                    resolve({tx: proto_1.Tx.decode(txRaw), height: parseInt(block.block.header.height, 10), index: _i});
                                                 }
                                             }
                                             _b.label = 4;
diff --git a/bin/provider/websocket/ws.d.ts b/bin/provider/websocket/ws.d.ts
index 1a41dcc96ba11d576d8a56c84ccd826764299a12..6e7c65aac957ab7f95ffcee66ffd70b5fd15507a 100644
--- a/bin/provider/websocket/ws.d.ts
+++ b/bin/provider/websocket/ws.d.ts
@@ -53,5 +53,5 @@ export declare class WSProvider implements Provider {
     sendTransaction<K extends keyof BroadcastTransactionMap>(tx: string, endpoint: K): Promise<BroadcastTransactionMap[K]['result']>;
     private broadcastTxSync;
     private broadcastTxCommit;
-    waitForTransaction(hash: string, fromHeight?: number, timeout?: number): Promise<Tx>;
+    waitForTransaction(hash: string, fromHeight?: number, timeout?: number): Promise<{tx: Tx, height: number, index: number}>;
 }
