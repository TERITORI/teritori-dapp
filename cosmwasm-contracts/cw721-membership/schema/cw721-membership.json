{
  "contract_name": "cw721-membership",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "admin_addr",
      "description",
      "image_uri",
      "mint_royalties_per10k_default",
      "name",
      "symbol"
    ],
    "properties": {
      "admin_addr": {
        "type": "string"
      },
      "description": {
        "type": "string"
      },
      "image_uri": {
        "type": "string"
      },
      "mint_royalties_per10k_default": {
        "type": "integer",
        "format": "uint16",
        "minimum": 0.0
      },
      "name": {
        "type": "string"
      },
      "symbol": {
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "anyOf": [
      {
        "$ref": "#/definitions/ExecMsg"
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "ExecMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "create_channel"
            ],
            "properties": {
              "create_channel": {
                "type": "object",
                "required": [
                  "memberships_config",
                  "trade_royalties_per10k"
                ],
                "properties": {
                  "memberships_config": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/MembershipConfig"
                    }
                  },
                  "trade_royalties_addr": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "trade_royalties_per10k": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_channel"
            ],
            "properties": {
              "update_channel": {
                "type": "object",
                "required": [
                  "id"
                ],
                "properties": {
                  "id": {
                    "$ref": "#/definitions/Uint64"
                  },
                  "memberships_config": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "$ref": "#/definitions/MembershipConfig"
                    }
                  },
                  "owner": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "trade_royalties_addr": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "trade_royalties_per10k": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint16",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "subscribe"
            ],
            "properties": {
              "subscribe": {
                "type": "object",
                "required": [
                  "channel_addr",
                  "membership_kind",
                  "recipient_addr"
                ],
                "properties": {
                  "channel_addr": {
                    "type": "string"
                  },
                  "membership_kind": {
                    "type": "integer",
                    "format": "uint8",
                    "minimum": 0.0
                  },
                  "recipient_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_config"
            ],
            "properties": {
              "update_config": {
                "type": "object",
                "properties": {
                  "admin_addr": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "description": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "image_uri": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "mint_royalties": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint16",
                    "minimum": 0.0
                  },
                  "name": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "symbol": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "update_channel_mint_platform_fee"
            ],
            "properties": {
              "update_channel_mint_platform_fee": {
                "type": "object",
                "required": [
                  "channel_addr",
                  "mint_royalties"
                ],
                "properties": {
                  "channel_addr": {
                    "type": "string"
                  },
                  "mint_royalties": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "withdraw_mint_platform_fee"
            ],
            "properties": {
              "withdraw_mint_platform_fee": {
                "type": "object",
                "properties": {
                  "destination_addr": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "withdraw_mint_funds"
            ],
            "properties": {
              "withdraw_mint_funds": {
                "type": "object",
                "required": [
                  "channel_addr"
                ],
                "properties": {
                  "channel_addr": {
                    "type": "string"
                  },
                  "destination_addr": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "transfer_nft"
            ],
            "properties": {
              "transfer_nft": {
                "type": "object",
                "required": [
                  "recipient",
                  "token_id"
                ],
                "properties": {
                  "recipient": {
                    "type": "string"
                  },
                  "token_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "send_nft"
            ],
            "properties": {
              "send_nft": {
                "type": "object",
                "required": [
                  "contract",
                  "msg",
                  "token_id"
                ],
                "properties": {
                  "contract": {
                    "type": "string"
                  },
                  "msg": {
                    "$ref": "#/definitions/Binary"
                  },
                  "token_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "burn"
            ],
            "properties": {
              "burn": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "token_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MembershipConfig": {
        "type": "object",
        "required": [
          "description",
          "display_name",
          "duration_seconds",
          "nft_image_uri",
          "nft_name_prefix",
          "price"
        ],
        "properties": {
          "description": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "duration_seconds": {
            "$ref": "#/definitions/Uint64"
          },
          "nft_image_uri": {
            "type": "string"
          },
          "nft_name_prefix": {
            "type": "string"
          },
          "price": {
            "$ref": "#/definitions/Coin"
          }
        },
        "additionalProperties": false
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "anyOf": [
      {
        "$ref": "#/definitions/QueryMsg"
      }
    ],
    "definitions": {
      "Cw2981QueryMsg": {
        "oneOf": [
          {
            "description": "Should be called on sale to see if royalties are owed by the marketplace selling the NFT, if CheckRoyalties returns true See https://eips.ethereum.org/EIPS/eip-2981",
            "type": "object",
            "required": [
              "royalty_info"
            ],
            "properties": {
              "royalty_info": {
                "type": "object",
                "required": [
                  "sale_price",
                  "token_id"
                ],
                "properties": {
                  "sale_price": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "token_id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Called against contract to determine if this NFT implements royalties. Should return a boolean as part of CheckRoyaltiesResponse - default can simply be true if royalties are implemented at token level (i.e. always check on sale)",
            "type": "object",
            "required": [
              "check_royalties"
            ],
            "properties": {
              "check_royalties": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "QueryMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "config"
            ],
            "properties": {
              "config": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "channel"
            ],
            "properties": {
              "channel": {
                "type": "object",
                "required": [
                  "channel_addr"
                ],
                "properties": {
                  "channel_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "admin_funds"
            ],
            "properties": {
              "admin_funds": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "channel_funds"
            ],
            "properties": {
              "channel_funds": {
                "type": "object",
                "required": [
                  "channel_addr"
                ],
                "properties": {
                  "channel_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "subscription"
            ],
            "properties": {
              "subscription": {
                "type": "object",
                "required": [
                  "channel_addr",
                  "sub_addr"
                ],
                "properties": {
                  "channel_addr": {
                    "type": "string"
                  },
                  "sub_addr": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "extension"
            ],
            "properties": {
              "extension": {
                "type": "object",
                "required": [
                  "msg"
                ],
                "properties": {
                  "msg": {
                    "$ref": "#/definitions/Cw2981QueryMsg"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "owner_of"
            ],
            "properties": {
              "owner_of": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "include_expired": {
                    "description": "unset or false will filter out expired approvals, you must set to true to see them",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "token_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "num_tokens"
            ],
            "properties": {
              "num_tokens": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "contract_info"
            ],
            "properties": {
              "contract_info": {
                "type": "object"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "nft_info"
            ],
            "properties": {
              "nft_info": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "token_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "all_nft_info"
            ],
            "properties": {
              "all_nft_info": {
                "type": "object",
                "required": [
                  "token_id"
                ],
                "properties": {
                  "include_expired": {
                    "description": "unset or false will filter out expired approvals, you must set to true to see them",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "token_id": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "tokens"
            ],
            "properties": {
              "tokens": {
                "type": "object",
                "required": [
                  "owner"
                ],
                "properties": {
                  "limit": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "owner": {
                    "type": "string"
                  },
                  "start_after": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "all_tokens"
            ],
            "properties": {
              "all_tokens": {
                "type": "object",
                "properties": {
                  "limit": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "start_after": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "admin_funds": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AdminFundsResponse",
      "type": "object",
      "required": [
        "funds"
      ],
      "properties": {
        "funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_nft_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllNftInfoResponse_for_Metadata",
      "type": "object",
      "required": [
        "access",
        "info"
      ],
      "properties": {
        "access": {
          "description": "Who can transfer the token",
          "allOf": [
            {
              "$ref": "#/definitions/OwnerOfResponse"
            }
          ]
        },
        "info": {
          "description": "Data on the token itself,",
          "allOf": [
            {
              "$ref": "#/definitions/NftInfoResponse_for_Metadata"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Metadata": {
          "type": "object",
          "properties": {
            "animation_url": {
              "type": [
                "string",
                "null"
              ]
            },
            "attributes": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Trait"
              }
            },
            "background_color": {
              "type": [
                "string",
                "null"
              ]
            },
            "description": {
              "type": [
                "string",
                "null"
              ]
            },
            "external_url": {
              "type": [
                "string",
                "null"
              ]
            },
            "image": {
              "type": [
                "string",
                "null"
              ]
            },
            "image_data": {
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "type": [
                "string",
                "null"
              ]
            },
            "youtube_url": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "NftInfoResponse_for_Metadata": {
          "type": "object",
          "required": [
            "extension"
          ],
          "properties": {
            "extension": {
              "description": "You can add any custom metadata here when you extend cw721-base",
              "allOf": [
                {
                  "$ref": "#/definitions/Metadata"
                }
              ]
            },
            "token_uri": {
              "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "OwnerOfResponse": {
          "type": "object",
          "required": [
            "approvals",
            "owner"
          ],
          "properties": {
            "approvals": {
              "description": "If set this address is approved to transfer/send the token as well",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Approval"
              }
            },
            "owner": {
              "description": "Owner of the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Trait": {
          "type": "object",
          "required": [
            "trait_type",
            "value"
          ],
          "properties": {
            "display_type": {
              "type": [
                "string",
                "null"
              ]
            },
            "trait_type": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "all_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokensResponse",
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_after` in future queries to achieve pagination.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "channel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChannelResponse",
      "type": "object",
      "required": [
        "id",
        "memberships_config",
        "mint_royalties_per10k",
        "owner_addr",
        "trade_royalties_addr",
        "trade_royalties_per10k"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/Uint64"
        },
        "memberships_config": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MembershipConfig"
          }
        },
        "mint_royalties_per10k": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "owner_addr": {
          "$ref": "#/definitions/Addr"
        },
        "trade_royalties_addr": {
          "$ref": "#/definitions/Addr"
        },
        "trade_royalties_per10k": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "MembershipConfig": {
          "type": "object",
          "required": [
            "description",
            "display_name",
            "duration_seconds",
            "nft_image_uri",
            "nft_name_prefix",
            "price"
          ],
          "properties": {
            "description": {
              "type": "string"
            },
            "display_name": {
              "type": "string"
            },
            "duration_seconds": {
              "$ref": "#/definitions/Uint64"
            },
            "nft_image_uri": {
              "type": "string"
            },
            "nft_name_prefix": {
              "type": "string"
            },
            "price": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "channel_funds": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ChannelFundsResponse",
      "type": "object",
      "required": [
        "funds"
      ],
      "properties": {
        "funds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Config",
      "type": "object",
      "required": [
        "admin_addr",
        "description",
        "image_uri",
        "mint_royalties_per10k_default",
        "name",
        "symbol"
      ],
      "properties": {
        "admin_addr": {
          "$ref": "#/definitions/Addr"
        },
        "description": {
          "type": "string"
        },
        "image_uri": {
          "type": "string"
        },
        "mint_royalties_per10k_default": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        }
      }
    },
    "contract_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractInfoResponse",
      "type": "object",
      "required": [
        "name",
        "symbol"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "extension": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Cw2981Response",
      "anyOf": [
        {
          "$ref": "#/definitions/CheckRoyaltiesResponse"
        },
        {
          "$ref": "#/definitions/RoyaltiesInfoResponse"
        }
      ],
      "definitions": {
        "CheckRoyaltiesResponse": {
          "description": "Shows if the contract implements royalties if royalty_payments is true, marketplaces should pay them",
          "type": "object",
          "required": [
            "royalty_payments"
          ],
          "properties": {
            "royalty_payments": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "RoyaltiesInfoResponse": {
          "type": "object",
          "required": [
            "address",
            "royalty_amount"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "royalty_amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "nft_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NftInfoResponse_for_Metadata",
      "type": "object",
      "required": [
        "extension"
      ],
      "properties": {
        "extension": {
          "description": "You can add any custom metadata here when you extend cw721-base",
          "allOf": [
            {
              "$ref": "#/definitions/Metadata"
            }
          ]
        },
        "token_uri": {
          "description": "Universal resource identifier for this NFT Should point to a JSON file that conforms to the ERC721 Metadata JSON Schema",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Metadata": {
          "type": "object",
          "properties": {
            "animation_url": {
              "type": [
                "string",
                "null"
              ]
            },
            "attributes": {
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Trait"
              }
            },
            "background_color": {
              "type": [
                "string",
                "null"
              ]
            },
            "description": {
              "type": [
                "string",
                "null"
              ]
            },
            "external_url": {
              "type": [
                "string",
                "null"
              ]
            },
            "image": {
              "type": [
                "string",
                "null"
              ]
            },
            "image_data": {
              "type": [
                "string",
                "null"
              ]
            },
            "name": {
              "type": [
                "string",
                "null"
              ]
            },
            "youtube_url": {
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        },
        "Trait": {
          "type": "object",
          "required": [
            "trait_type",
            "value"
          ],
          "properties": {
            "display_type": {
              "type": [
                "string",
                "null"
              ]
            },
            "trait_type": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "num_tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "NumTokensResponse",
      "type": "object",
      "required": [
        "count"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "owner_of": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OwnerOfResponse",
      "type": "object",
      "required": [
        "approvals",
        "owner"
      ],
      "properties": {
        "approvals": {
          "description": "If set this address is approved to transfer/send the token as well",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Approval"
          }
        },
        "owner": {
          "description": "Owner of the token",
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Approval": {
          "type": "object",
          "required": [
            "expires",
            "spender"
          ],
          "properties": {
            "expires": {
              "description": "When the Approval expires (maybe Expiration::never)",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "spender": {
              "description": "Account that can transfer/send the token",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "subscription": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SubscriptionResponse",
      "type": "object",
      "required": [
        "level"
      ],
      "properties": {
        "level": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "subscription": {
          "anyOf": [
            {
              "$ref": "#/definitions/Subscription"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Subscription": {
          "type": "object",
          "required": [
            "expiration",
            "level_expiration"
          ],
          "properties": {
            "expiration": {
              "$ref": "#/definitions/Timestamp"
            },
            "level_expiration": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "tokens": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokensResponse",
      "type": "object",
      "required": [
        "tokens"
      ],
      "properties": {
        "tokens": {
          "description": "Contains all token_ids in lexicographical ordering If there are more than `limit`, use `start_after` in future queries to achieve pagination.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    }
  }
}
