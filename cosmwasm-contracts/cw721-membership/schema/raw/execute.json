{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "$ref": "#/definitions/ExecMsg"
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "ExecMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "create_channel"
          ],
          "properties": {
            "create_channel": {
              "type": "object",
              "required": [
                "memberships_config",
                "trade_royalties_per10k"
              ],
              "properties": {
                "memberships_config": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/MembershipConfig"
                  }
                },
                "trade_royalties_addr": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "trade_royalties_per10k": {
                  "type": "integer",
                  "format": "uint16",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_channel"
          ],
          "properties": {
            "update_channel": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "$ref": "#/definitions/Uint64"
                },
                "memberships_config": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/MembershipConfig"
                  }
                },
                "trade_royalties_addr": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "trade_royalties_per10k": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint16",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "subscribe"
          ],
          "properties": {
            "subscribe": {
              "type": "object",
              "required": [
                "channel_id",
                "membership_kind",
                "recipient_addr"
              ],
              "properties": {
                "channel_id": {
                  "$ref": "#/definitions/Uint64"
                },
                "membership_kind": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "recipient_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_config"
          ],
          "properties": {
            "update_config": {
              "type": "object",
              "properties": {
                "admin_addr": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "description": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "image_uri": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "mint_royalties": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint16",
                  "minimum": 0.0
                },
                "name": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "symbol": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "update_channel_mint_platform_fee"
          ],
          "properties": {
            "update_channel_mint_platform_fee": {
              "type": "object",
              "required": [
                "channel_id"
              ],
              "properties": {
                "channel_id": {
                  "$ref": "#/definitions/Uint64"
                },
                "mint_royalties": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint16",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "withdraw_mint_platform_fee"
          ],
          "properties": {
            "withdraw_mint_platform_fee": {
              "type": "object",
              "properties": {
                "destination_addr": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "withdraw_mint_funds"
          ],
          "properties": {
            "withdraw_mint_funds": {
              "type": "object",
              "required": [
                "channel_id"
              ],
              "properties": {
                "channel_id": {
                  "$ref": "#/definitions/Uint64"
                },
                "destination_addr": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "transfer_nft"
          ],
          "properties": {
            "transfer_nft": {
              "type": "object",
              "required": [
                "recipient",
                "token_id"
              ],
              "properties": {
                "recipient": {
                  "type": "string"
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "send_nft"
          ],
          "properties": {
            "send_nft": {
              "type": "object",
              "required": [
                "contract",
                "msg",
                "token_id"
              ],
              "properties": {
                "contract": {
                  "type": "string"
                },
                "msg": {
                  "$ref": "#/definitions/Binary"
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "burn"
          ],
          "properties": {
            "burn": {
              "type": "object",
              "required": [
                "token_id"
              ],
              "properties": {
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "MembershipConfig": {
      "type": "object",
      "required": [
        "description",
        "display_name",
        "duration_seconds",
        "nft_image_uri",
        "nft_name_prefix",
        "price"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "duration_seconds": {
          "$ref": "#/definitions/Uint64"
        },
        "nft_image_uri": {
          "type": "string"
        },
        "nft_name_prefix": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
