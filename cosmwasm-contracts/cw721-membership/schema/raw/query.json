{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "anyOf": [
    {
      "$ref": "#/definitions/QueryMsg"
    }
  ],
  "definitions": {
    "Cw2981QueryMsg": {
      "oneOf": [
        {
          "description": "Should be called on sale to see if royalties are owed by the marketplace selling the NFT, if CheckRoyalties returns true See https://eips.ethereum.org/EIPS/eip-2981",
          "type": "object",
          "required": [
            "royalty_info"
          ],
          "properties": {
            "royalty_info": {
              "type": "object",
              "required": [
                "sale_price",
                "token_id"
              ],
              "properties": {
                "sale_price": {
                  "$ref": "#/definitions/Uint128"
                },
                "token_id": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Called against contract to determine if this NFT implements royalties. Should return a boolean as part of CheckRoyaltiesResponse - default can simply be true if royalties are implemented at token level (i.e. always check on sale)",
          "type": "object",
          "required": [
            "check_royalties"
          ],
          "properties": {
            "check_royalties": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "QueryMsg": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "config"
          ],
          "properties": {
            "config": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "channel"
          ],
          "properties": {
            "channel": {
              "type": "object",
              "required": [
                "channel_id"
              ],
              "properties": {
                "channel_id": {
                  "$ref": "#/definitions/Uint64"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "channels_by_owner"
          ],
          "properties": {
            "channels_by_owner": {
              "type": "object",
              "required": [
                "owner_address"
              ],
              "properties": {
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "owner_address": {
                  "type": "string"
                },
                "start_after": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint64"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "admin_funds"
          ],
          "properties": {
            "admin_funds": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "channel_funds"
          ],
          "properties": {
            "channel_funds": {
              "type": "object",
              "required": [
                "channel_id"
              ],
              "properties": {
                "channel_id": {
                  "$ref": "#/definitions/Uint64"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "subscription"
          ],
          "properties": {
            "subscription": {
              "type": "object",
              "required": [
                "channel_id",
                "sub_addr"
              ],
              "properties": {
                "channel_id": {
                  "$ref": "#/definitions/Uint64"
                },
                "sub_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "extension"
          ],
          "properties": {
            "extension": {
              "type": "object",
              "required": [
                "msg"
              ],
              "properties": {
                "msg": {
                  "$ref": "#/definitions/Cw2981QueryMsg"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "owner_of"
          ],
          "properties": {
            "owner_of": {
              "type": "object",
              "required": [
                "token_id"
              ],
              "properties": {
                "include_expired": {
                  "description": "unset or false will filter out expired approvals, you must set to true to see them",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "num_tokens"
          ],
          "properties": {
            "num_tokens": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "contract_info"
          ],
          "properties": {
            "contract_info": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "nft_info"
          ],
          "properties": {
            "nft_info": {
              "type": "object",
              "required": [
                "token_id"
              ],
              "properties": {
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "all_nft_info"
          ],
          "properties": {
            "all_nft_info": {
              "type": "object",
              "required": [
                "token_id"
              ],
              "properties": {
                "include_expired": {
                  "description": "unset or false will filter out expired approvals, you must set to true to see them",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "token_id": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "tokens"
          ],
          "properties": {
            "tokens": {
              "type": "object",
              "required": [
                "owner"
              ],
              "properties": {
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "owner": {
                  "type": "string"
                },
                "start_after": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "all_tokens"
          ],
          "properties": {
            "all_tokens": {
              "type": "object",
              "properties": {
                "limit": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "start_after": {
                  "type": [
                    "string",
                    "null"
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
