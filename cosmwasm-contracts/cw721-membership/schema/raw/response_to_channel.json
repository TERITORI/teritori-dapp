{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ChannelResponse",
  "type": "object",
  "required": [
    "memberships_config",
    "mint_royalties"
  ],
  "properties": {
    "memberships_config": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/MembershipConfig"
      }
    },
    "mint_royalties": {
      "type": "integer",
      "format": "uint16",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "MembershipConfig": {
      "type": "object",
      "required": [
        "description",
        "display_name",
        "duration_seconds",
        "nft_image_uri",
        "nft_name_prefix",
        "price",
        "trade_royalties"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "display_name": {
          "type": "string"
        },
        "duration_seconds": {
          "$ref": "#/definitions/Uint64"
        },
        "nft_image_uri": {
          "type": "string"
        },
        "nft_name_prefix": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/Coin"
        },
        "trade_royalties": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
