schema {
  query: Query
  subscription: Subscription
}
scalar BigDecimal
scalar BigInt
scalar Bytes
type Action {
  actor: Bytes!
  id: ID!
  nft: Nft!
  buy: Buy
  receiver: Bytes
  txID: String!
  list: List
  action: String
  minter: Bytes
  createdAt: BigInt!
}
type Buy {
  id: ID!
  nft: Nft!
  price: BigInt
  denom: Bytes
  seller: Bytes!
  minter: Bytes
  createdAt: BigInt!
}
type List {
  id: ID!
  nft: Nft!
  price: BigInt
  denom: Bytes
  createdAt: BigInt!
}
type Nft {
  id: ID!
  contract: NftContract!
  tokenID: BigInt!
  owner: Bytes
  creatorName: String
  creatorAddress: Bytes
  seller: Bytes
  tokenURI: String!
  inSale: Boolean
  price: BigInt
  denom: Bytes
  createdAt: BigInt!
  removedAt: BigInt
}
type NftContract {
  id: ID!
  name: String!
  symbol: String
  supported: Boolean
  minter: Bytes
  contractURI: String!
  nfts(skip: Int = 0, first: Int = 100, orderBy: Nft_orderBy, orderDirection: OrderDirection, where: Nft_filter): [Nft!]!
}
type Query {
  nft(id: ID!, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Nft
  nfts(skip: Int = 0, first: Int = 100, orderBy: Nft_orderBy, orderDirection: OrderDirection, where: Nft_filter, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Nft!]!
  nftContract(id: ID!, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NftContract
  nftContracts(skip: Int = 0, first: Int = 100, orderBy: NftContract_orderBy, orderDirection: OrderDirection, where: NftContract_filter, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NftContract!]!
  list(id: ID!, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): List
  lists(skip: Int = 0, first: Int = 100, orderBy: List_orderBy, orderDirection: OrderDirection, where: List_filter, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [List!]!
  buy(id: ID!, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Buy
  buys(skip: Int = 0, first: Int = 100, orderBy: Buy_orderBy, orderDirection: OrderDirection, where: Buy_filter, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Buy!]!
  action(id: ID!, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Action
  actions(skip: Int = 0, first: Int = 100, orderBy: Action_orderBy, orderDirection: OrderDirection, where: Action_filter, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Action!]!
  "Access to subgraph metadata"
  _meta(block: Block_height): _Meta_
}
type Subscription {
  nft(id: ID!, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Nft
  nfts(skip: Int = 0, first: Int = 100, orderBy: Nft_orderBy, orderDirection: OrderDirection, where: Nft_filter, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Nft!]!
  nftContract(id: ID!, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NftContract
  nftContracts(skip: Int = 0, first: Int = 100, orderBy: NftContract_orderBy, orderDirection: OrderDirection, where: NftContract_filter, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NftContract!]!
  list(id: ID!, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): List
  lists(skip: Int = 0, first: Int = 100, orderBy: List_orderBy, orderDirection: OrderDirection, where: List_filter, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [List!]!
  buy(id: ID!, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Buy
  buys(skip: Int = 0, first: Int = 100, orderBy: Buy_orderBy, orderDirection: OrderDirection, where: Buy_filter, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Buy!]!
  action(id: ID!, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Action
  actions(skip: Int = 0, first: Int = 100, orderBy: Action_orderBy, orderDirection: OrderDirection, where: Action_filter, 
    "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
    block: Block_height,
    "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Action!]!
  "Access to subgraph metadata"
  _meta(block: Block_height): _Meta_
}
type _Block_ {
  "The hash of the block"
  hash: Bytes
  "The block number"
  number: Int!
  "Integer representation of the timestamp stored in blocks for the chain"
  timestamp: Int
}
"The type for the top-level _meta field"
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  """
  block: _Block_!
  "The deployment ID"
  deployment: String!
  "If `true`, the subgraph encountered indexing errors at some past block"
  hasIndexingErrors: Boolean!
}
enum Action_orderBy {
  actor
  id
  nft
  nft__id
  nft__tokenID
  nft__owner
  nft__creatorName
  nft__creatorAddress
  nft__seller
  nft__tokenURI
  nft__inSale
  nft__price
  nft__denom
  nft__createdAt
  nft__removedAt
  buy
  buy__id
  buy__price
  buy__denom
  buy__seller
  buy__minter
  buy__createdAt
  receiver
  txID
  list
  list__id
  list__price
  list__denom
  list__createdAt
  action
  minter
  createdAt
}
enum Buy_orderBy {
  id
  nft
  nft__id
  nft__tokenID
  nft__owner
  nft__creatorName
  nft__creatorAddress
  nft__seller
  nft__tokenURI
  nft__inSale
  nft__price
  nft__denom
  nft__createdAt
  nft__removedAt
  price
  denom
  seller
  minter
  createdAt
}
enum List_orderBy {
  id
  nft
  nft__id
  nft__tokenID
  nft__owner
  nft__creatorName
  nft__creatorAddress
  nft__seller
  nft__tokenURI
  nft__inSale
  nft__price
  nft__denom
  nft__createdAt
  nft__removedAt
  price
  denom
  createdAt
}
enum NftContract_orderBy {
  id
  name
  symbol
  supported
  minter
  contractURI
  nfts
}
enum Nft_orderBy {
  id
  contract
  contract__id
  contract__name
  contract__symbol
  contract__supported
  contract__minter
  contract__contractURI
  tokenID
  owner
  creatorName
  creatorAddress
  seller
  tokenURI
  inSale
  price
  denom
  createdAt
  removedAt
}
"Defines the order direction, either ascending or descending"
enum OrderDirection {
  asc
  desc
}
enum _SubgraphErrorPolicy_ {
  "Data will be returned even if the subgraph has indexing errors"
  allow
  "If the subgraph has indexing errors, data will be omitted. The default."
  deny
}
input Action_filter {
  actor: Bytes
  actor_not: Bytes
  actor_gt: Bytes
  actor_lt: Bytes
  actor_gte: Bytes
  actor_lte: Bytes
  actor_in: [Bytes!]
  actor_not_in: [Bytes!]
  actor_contains: Bytes
  actor_not_contains: Bytes
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: Nft_filter
  buy: String
  buy_not: String
  buy_gt: String
  buy_lt: String
  buy_gte: String
  buy_lte: String
  buy_in: [String!]
  buy_not_in: [String!]
  buy_contains: String
  buy_contains_nocase: String
  buy_not_contains: String
  buy_not_contains_nocase: String
  buy_starts_with: String
  buy_starts_with_nocase: String
  buy_not_starts_with: String
  buy_not_starts_with_nocase: String
  buy_ends_with: String
  buy_ends_with_nocase: String
  buy_not_ends_with: String
  buy_not_ends_with_nocase: String
  buy_: Buy_filter
  receiver: Bytes
  receiver_not: Bytes
  receiver_gt: Bytes
  receiver_lt: Bytes
  receiver_gte: Bytes
  receiver_lte: Bytes
  receiver_in: [Bytes!]
  receiver_not_in: [Bytes!]
  receiver_contains: Bytes
  receiver_not_contains: Bytes
  txID: String
  txID_not: String
  txID_gt: String
  txID_lt: String
  txID_gte: String
  txID_lte: String
  txID_in: [String!]
  txID_not_in: [String!]
  txID_contains: String
  txID_contains_nocase: String
  txID_not_contains: String
  txID_not_contains_nocase: String
  txID_starts_with: String
  txID_starts_with_nocase: String
  txID_not_starts_with: String
  txID_not_starts_with_nocase: String
  txID_ends_with: String
  txID_ends_with_nocase: String
  txID_not_ends_with: String
  txID_not_ends_with_nocase: String
  list: String
  list_not: String
  list_gt: String
  list_lt: String
  list_gte: String
  list_lte: String
  list_in: [String!]
  list_not_in: [String!]
  list_contains: String
  list_contains_nocase: String
  list_not_contains: String
  list_not_contains_nocase: String
  list_starts_with: String
  list_starts_with_nocase: String
  list_not_starts_with: String
  list_not_starts_with_nocase: String
  list_ends_with: String
  list_ends_with_nocase: String
  list_not_ends_with: String
  list_not_ends_with_nocase: String
  list_: List_filter
  action: String
  action_not: String
  action_gt: String
  action_lt: String
  action_gte: String
  action_lte: String
  action_in: [String!]
  action_not_in: [String!]
  action_contains: String
  action_contains_nocase: String
  action_not_contains: String
  action_not_contains_nocase: String
  action_starts_with: String
  action_starts_with_nocase: String
  action_not_starts_with: String
  action_not_starts_with_nocase: String
  action_ends_with: String
  action_ends_with_nocase: String
  action_not_ends_with: String
  action_not_ends_with_nocase: String
  minter: Bytes
  minter_not: Bytes
  minter_gt: Bytes
  minter_lt: Bytes
  minter_gte: Bytes
  minter_lte: Bytes
  minter_in: [Bytes!]
  minter_not_in: [Bytes!]
  minter_contains: Bytes
  minter_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [Action_filter]
  or: [Action_filter]
}
input BlockChangedFilter {
  number_gte: Int!
}
input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}
input Buy_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: Nft_filter
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  denom: Bytes
  denom_not: Bytes
  denom_gt: Bytes
  denom_lt: Bytes
  denom_gte: Bytes
  denom_lte: Bytes
  denom_in: [Bytes!]
  denom_not_in: [Bytes!]
  denom_contains: Bytes
  denom_not_contains: Bytes
  seller: Bytes
  seller_not: Bytes
  seller_gt: Bytes
  seller_lt: Bytes
  seller_gte: Bytes
  seller_lte: Bytes
  seller_in: [Bytes!]
  seller_not_in: [Bytes!]
  seller_contains: Bytes
  seller_not_contains: Bytes
  minter: Bytes
  minter_not: Bytes
  minter_gt: Bytes
  minter_lt: Bytes
  minter_gte: Bytes
  minter_lte: Bytes
  minter_in: [Bytes!]
  minter_not_in: [Bytes!]
  minter_contains: Bytes
  minter_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [Buy_filter]
  or: [Buy_filter]
}
input List_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  nft: String
  nft_not: String
  nft_gt: String
  nft_lt: String
  nft_gte: String
  nft_lte: String
  nft_in: [String!]
  nft_not_in: [String!]
  nft_contains: String
  nft_contains_nocase: String
  nft_not_contains: String
  nft_not_contains_nocase: String
  nft_starts_with: String
  nft_starts_with_nocase: String
  nft_not_starts_with: String
  nft_not_starts_with_nocase: String
  nft_ends_with: String
  nft_ends_with_nocase: String
  nft_not_ends_with: String
  nft_not_ends_with_nocase: String
  nft_: Nft_filter
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  denom: Bytes
  denom_not: Bytes
  denom_gt: Bytes
  denom_lt: Bytes
  denom_gte: Bytes
  denom_lte: Bytes
  denom_in: [Bytes!]
  denom_not_in: [Bytes!]
  denom_contains: Bytes
  denom_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [List_filter]
  or: [List_filter]
}
input NftContract_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  supported: Boolean
  supported_not: Boolean
  supported_in: [Boolean!]
  supported_not_in: [Boolean!]
  minter: Bytes
  minter_not: Bytes
  minter_gt: Bytes
  minter_lt: Bytes
  minter_gte: Bytes
  minter_lte: Bytes
  minter_in: [Bytes!]
  minter_not_in: [Bytes!]
  minter_contains: Bytes
  minter_not_contains: Bytes
  contractURI: String
  contractURI_not: String
  contractURI_gt: String
  contractURI_lt: String
  contractURI_gte: String
  contractURI_lte: String
  contractURI_in: [String!]
  contractURI_not_in: [String!]
  contractURI_contains: String
  contractURI_contains_nocase: String
  contractURI_not_contains: String
  contractURI_not_contains_nocase: String
  contractURI_starts_with: String
  contractURI_starts_with_nocase: String
  contractURI_not_starts_with: String
  contractURI_not_starts_with_nocase: String
  contractURI_ends_with: String
  contractURI_ends_with_nocase: String
  contractURI_not_ends_with: String
  contractURI_not_ends_with_nocase: String
  nfts_: Nft_filter
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [NftContract_filter]
  or: [NftContract_filter]
}
input Nft_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  contract: String
  contract_not: String
  contract_gt: String
  contract_lt: String
  contract_gte: String
  contract_lte: String
  contract_in: [String!]
  contract_not_in: [String!]
  contract_contains: String
  contract_contains_nocase: String
  contract_not_contains: String
  contract_not_contains_nocase: String
  contract_starts_with: String
  contract_starts_with_nocase: String
  contract_not_starts_with: String
  contract_not_starts_with_nocase: String
  contract_ends_with: String
  contract_ends_with_nocase: String
  contract_not_ends_with: String
  contract_not_ends_with_nocase: String
  contract_: NftContract_filter
  tokenID: BigInt
  tokenID_not: BigInt
  tokenID_gt: BigInt
  tokenID_lt: BigInt
  tokenID_gte: BigInt
  tokenID_lte: BigInt
  tokenID_in: [BigInt!]
  tokenID_not_in: [BigInt!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  creatorName: String
  creatorName_not: String
  creatorName_gt: String
  creatorName_lt: String
  creatorName_gte: String
  creatorName_lte: String
  creatorName_in: [String!]
  creatorName_not_in: [String!]
  creatorName_contains: String
  creatorName_contains_nocase: String
  creatorName_not_contains: String
  creatorName_not_contains_nocase: String
  creatorName_starts_with: String
  creatorName_starts_with_nocase: String
  creatorName_not_starts_with: String
  creatorName_not_starts_with_nocase: String
  creatorName_ends_with: String
  creatorName_ends_with_nocase: String
  creatorName_not_ends_with: String
  creatorName_not_ends_with_nocase: String
  creatorAddress: Bytes
  creatorAddress_not: Bytes
  creatorAddress_gt: Bytes
  creatorAddress_lt: Bytes
  creatorAddress_gte: Bytes
  creatorAddress_lte: Bytes
  creatorAddress_in: [Bytes!]
  creatorAddress_not_in: [Bytes!]
  creatorAddress_contains: Bytes
  creatorAddress_not_contains: Bytes
  seller: Bytes
  seller_not: Bytes
  seller_gt: Bytes
  seller_lt: Bytes
  seller_gte: Bytes
  seller_lte: Bytes
  seller_in: [Bytes!]
  seller_not_in: [Bytes!]
  seller_contains: Bytes
  seller_not_contains: Bytes
  tokenURI: String
  tokenURI_not: String
  tokenURI_gt: String
  tokenURI_lt: String
  tokenURI_gte: String
  tokenURI_lte: String
  tokenURI_in: [String!]
  tokenURI_not_in: [String!]
  tokenURI_contains: String
  tokenURI_contains_nocase: String
  tokenURI_not_contains: String
  tokenURI_not_contains_nocase: String
  tokenURI_starts_with: String
  tokenURI_starts_with_nocase: String
  tokenURI_not_starts_with: String
  tokenURI_not_starts_with_nocase: String
  tokenURI_ends_with: String
  tokenURI_ends_with_nocase: String
  tokenURI_not_ends_with: String
  tokenURI_not_ends_with_nocase: String
  inSale: Boolean
  inSale_not: Boolean
  inSale_in: [Boolean!]
  inSale_not_in: [Boolean!]
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  denom: Bytes
  denom_not: Bytes
  denom_gt: Bytes
  denom_lt: Bytes
  denom_gte: Bytes
  denom_lte: Bytes
  denom_in: [Bytes!]
  denom_not_in: [Bytes!]
  denom_contains: Bytes
  denom_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  removedAt: BigInt
  removedAt_not: BigInt
  removedAt_gt: BigInt
  removedAt_lt: BigInt
  removedAt_gte: BigInt
  removedAt_lte: BigInt
  removedAt_in: [BigInt!]
  removedAt_not_in: [BigInt!]
  "Filter for the block changed event."
  _change_block: BlockChangedFilter
  and: [Nft_filter]
  or: [Nft_filter]
}
"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT
"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT
"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

