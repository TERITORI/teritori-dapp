// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: dao/v1/dao.proto

package daopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DAOServiceClient is the client API for DAOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DAOServiceClient interface {
	DAOs(ctx context.Context, in *DAOsRequest, opts ...grpc.CallOption) (*DAOsResponse, error)
}

type dAOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDAOServiceClient(cc grpc.ClientConnInterface) DAOServiceClient {
	return &dAOServiceClient{cc}
}

func (c *dAOServiceClient) DAOs(ctx context.Context, in *DAOsRequest, opts ...grpc.CallOption) (*DAOsResponse, error) {
	out := new(DAOsResponse)
	err := c.cc.Invoke(ctx, "/dao.v1.DAOService/DAOs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DAOServiceServer is the server API for DAOService service.
// All implementations must embed UnimplementedDAOServiceServer
// for forward compatibility
type DAOServiceServer interface {
	DAOs(context.Context, *DAOsRequest) (*DAOsResponse, error)
	mustEmbedUnimplementedDAOServiceServer()
}

// UnimplementedDAOServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDAOServiceServer struct {
}

func (UnimplementedDAOServiceServer) DAOs(context.Context, *DAOsRequest) (*DAOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DAOs not implemented")
}
func (UnimplementedDAOServiceServer) mustEmbedUnimplementedDAOServiceServer() {}

// UnsafeDAOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DAOServiceServer will
// result in compilation errors.
type UnsafeDAOServiceServer interface {
	mustEmbedUnimplementedDAOServiceServer()
}

func RegisterDAOServiceServer(s grpc.ServiceRegistrar, srv DAOServiceServer) {
	s.RegisterService(&DAOService_ServiceDesc, srv)
}

func _DAOService_DAOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DAOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAOServiceServer).DAOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.v1.DAOService/DAOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAOServiceServer).DAOs(ctx, req.(*DAOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DAOService_ServiceDesc is the grpc.ServiceDesc for DAOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DAOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dao.v1.DAOService",
	HandlerType: (*DAOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DAOs",
			Handler:    _DAOService_DAOs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dao/v1/dao.proto",
}
