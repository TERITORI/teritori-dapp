// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package daopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DaoServiceClient is the client API for DaoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaoServiceClient interface {
	DaoList(ctx context.Context, in *DaoListRequest, opts ...grpc.CallOption) (*DaoListResponse, error)
}

type daoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDaoServiceClient(cc grpc.ClientConnInterface) DaoServiceClient {
	return &daoServiceClient{cc}
}

func (c *daoServiceClient) DaoList(ctx context.Context, in *DaoListRequest, opts ...grpc.CallOption) (*DaoListResponse, error) {
	out := new(DaoListResponse)
	err := c.cc.Invoke(ctx, "/dao.v1.DaoService/DaoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaoServiceServer is the server API for DaoService service.
// All implementations must embed UnimplementedDaoServiceServer
// for forward compatibility
type DaoServiceServer interface {
	DaoList(context.Context, *DaoListRequest) (*DaoListResponse, error)
	mustEmbedUnimplementedDaoServiceServer()
}

// UnimplementedDaoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDaoServiceServer struct {
}

func (UnimplementedDaoServiceServer) DaoList(context.Context, *DaoListRequest) (*DaoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DaoList not implemented")
}
func (UnimplementedDaoServiceServer) mustEmbedUnimplementedDaoServiceServer() {}

// UnsafeDaoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaoServiceServer will
// result in compilation errors.
type UnsafeDaoServiceServer interface {
	mustEmbedUnimplementedDaoServiceServer()
}

func RegisterDaoServiceServer(s grpc.ServiceRegistrar, srv DaoServiceServer) {
	s.RegisterService(&DaoService_ServiceDesc, srv)
}

func _DaoService_DaoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaoServiceServer).DaoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dao.v1.DaoService/DaoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaoServiceServer).DaoList(ctx, req.(*DaoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DaoService_ServiceDesc is the grpc.ServiceDesc for DaoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DaoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dao.v1.DaoService",
	HandlerType: (*DaoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DaoList",
			Handler:    _DaoService_DaoList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dao/v1/dao.proto",
}