// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: prices/v1/prices.proto

package pricespb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PricesServiceClient is the client API for PricesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PricesServiceClient interface {
	Prices(ctx context.Context, in *PricesRequest, opts ...grpc.CallOption) (*PricesResponse, error)
}

type pricesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPricesServiceClient(cc grpc.ClientConnInterface) PricesServiceClient {
	return &pricesServiceClient{cc}
}

func (c *pricesServiceClient) Prices(ctx context.Context, in *PricesRequest, opts ...grpc.CallOption) (*PricesResponse, error) {
	out := new(PricesResponse)
	err := c.cc.Invoke(ctx, "/prices.v1.PricesService/Prices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PricesServiceServer is the server API for PricesService service.
// All implementations must embed UnimplementedPricesServiceServer
// for forward compatibility
type PricesServiceServer interface {
	Prices(context.Context, *PricesRequest) (*PricesResponse, error)
	mustEmbedUnimplementedPricesServiceServer()
}

// UnimplementedPricesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPricesServiceServer struct {
}

func (UnimplementedPricesServiceServer) Prices(context.Context, *PricesRequest) (*PricesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prices not implemented")
}
func (UnimplementedPricesServiceServer) mustEmbedUnimplementedPricesServiceServer() {}

// UnsafePricesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PricesServiceServer will
// result in compilation errors.
type UnsafePricesServiceServer interface {
	mustEmbedUnimplementedPricesServiceServer()
}

func RegisterPricesServiceServer(s grpc.ServiceRegistrar, srv PricesServiceServer) {
	s.RegisterService(&PricesService_ServiceDesc, srv)
}

func _PricesService_Prices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PricesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PricesServiceServer).Prices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prices.v1.PricesService/Prices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PricesServiceServer).Prices(ctx, req.(*PricesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PricesService_ServiceDesc is the grpc.ServiceDesc for PricesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PricesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prices.v1.PricesService",
	HandlerType: (*PricesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prices",
			Handler:    _PricesService_Prices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prices/v1/prices.proto",
}
