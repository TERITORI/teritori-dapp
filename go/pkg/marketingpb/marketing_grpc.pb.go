// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: marketing/v1/marketing.proto

package marketingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketingServiceClient is the client API for MarketingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketingServiceClient interface {
	News(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (*NewsResponse, error)
	LiveCollections(ctx context.Context, in *LiveCollectionsRequest, opts ...grpc.CallOption) (*LiveCollectionsResponse, error)
	UpcomingCollections(ctx context.Context, in *UpcomingCollectionsRequest, opts ...grpc.CallOption) (*UpcomingCollectionsResponse, error)
	HighlightedCollections(ctx context.Context, in *HighlightedCollectionsRequest, opts ...grpc.CallOption) (*HighlightedCollectionsResponse, error)
}

type marketingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketingServiceClient(cc grpc.ClientConnInterface) MarketingServiceClient {
	return &marketingServiceClient{cc}
}

func (c *marketingServiceClient) News(ctx context.Context, in *NewsRequest, opts ...grpc.CallOption) (*NewsResponse, error) {
	out := new(NewsResponse)
	err := c.cc.Invoke(ctx, "/marketing.v1.MarketingService/News", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingServiceClient) LiveCollections(ctx context.Context, in *LiveCollectionsRequest, opts ...grpc.CallOption) (*LiveCollectionsResponse, error) {
	out := new(LiveCollectionsResponse)
	err := c.cc.Invoke(ctx, "/marketing.v1.MarketingService/LiveCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingServiceClient) UpcomingCollections(ctx context.Context, in *UpcomingCollectionsRequest, opts ...grpc.CallOption) (*UpcomingCollectionsResponse, error) {
	out := new(UpcomingCollectionsResponse)
	err := c.cc.Invoke(ctx, "/marketing.v1.MarketingService/UpcomingCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingServiceClient) HighlightedCollections(ctx context.Context, in *HighlightedCollectionsRequest, opts ...grpc.CallOption) (*HighlightedCollectionsResponse, error) {
	out := new(HighlightedCollectionsResponse)
	err := c.cc.Invoke(ctx, "/marketing.v1.MarketingService/HighlightedCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketingServiceServer is the server API for MarketingService service.
// All implementations must embed UnimplementedMarketingServiceServer
// for forward compatibility
type MarketingServiceServer interface {
	News(context.Context, *NewsRequest) (*NewsResponse, error)
	LiveCollections(context.Context, *LiveCollectionsRequest) (*LiveCollectionsResponse, error)
	UpcomingCollections(context.Context, *UpcomingCollectionsRequest) (*UpcomingCollectionsResponse, error)
	HighlightedCollections(context.Context, *HighlightedCollectionsRequest) (*HighlightedCollectionsResponse, error)
	mustEmbedUnimplementedMarketingServiceServer()
}

// UnimplementedMarketingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketingServiceServer struct {
}

func (UnimplementedMarketingServiceServer) News(context.Context, *NewsRequest) (*NewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method News not implemented")
}
func (UnimplementedMarketingServiceServer) LiveCollections(context.Context, *LiveCollectionsRequest) (*LiveCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveCollections not implemented")
}
func (UnimplementedMarketingServiceServer) UpcomingCollections(context.Context, *UpcomingCollectionsRequest) (*UpcomingCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpcomingCollections not implemented")
}
func (UnimplementedMarketingServiceServer) HighlightedCollections(context.Context, *HighlightedCollectionsRequest) (*HighlightedCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HighlightedCollections not implemented")
}
func (UnimplementedMarketingServiceServer) mustEmbedUnimplementedMarketingServiceServer() {}

// UnsafeMarketingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketingServiceServer will
// result in compilation errors.
type UnsafeMarketingServiceServer interface {
	mustEmbedUnimplementedMarketingServiceServer()
}

func RegisterMarketingServiceServer(s grpc.ServiceRegistrar, srv MarketingServiceServer) {
	s.RegisterService(&MarketingService_ServiceDesc, srv)
}

func _MarketingService_News_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServiceServer).News(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.v1.MarketingService/News",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServiceServer).News(ctx, req.(*NewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingService_LiveCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServiceServer).LiveCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.v1.MarketingService/LiveCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServiceServer).LiveCollections(ctx, req.(*LiveCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingService_UpcomingCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpcomingCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServiceServer).UpcomingCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.v1.MarketingService/UpcomingCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServiceServer).UpcomingCollections(ctx, req.(*UpcomingCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketingService_HighlightedCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HighlightedCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServiceServer).HighlightedCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/marketing.v1.MarketingService/HighlightedCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServiceServer).HighlightedCollections(ctx, req.(*HighlightedCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketingService_ServiceDesc is the grpc.ServiceDesc for MarketingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketing.v1.MarketingService",
	HandlerType: (*MarketingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "News",
			Handler:    _MarketingService_News_Handler,
		},
		{
			MethodName: "LiveCollections",
			Handler:    _MarketingService_LiveCollections_Handler,
		},
		{
			MethodName: "UpcomingCollections",
			Handler:    _MarketingService_UpcomingCollections_Handler,
		},
		{
			MethodName: "HighlightedCollections",
			Handler:    _MarketingService_HighlightedCollections_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketing/v1/marketing.proto",
}
