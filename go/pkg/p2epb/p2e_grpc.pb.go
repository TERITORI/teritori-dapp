// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: p2e/v1/p2e.proto

package p2epb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// P2EServiceClient is the client API for P2EService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type P2EServiceClient interface {
	Leaderboard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (P2EService_LeaderboardClient, error)
	CurrentSeason(ctx context.Context, in *CurrentSeasonRequest, opts ...grpc.CallOption) (*CurrentSeasonResponse, error)
	UserRank(ctx context.Context, in *UserRankRequest, opts ...grpc.CallOption) (*UserRankResponse, error)
	AllSeasons(ctx context.Context, in *AllSeasonsRequest, opts ...grpc.CallOption) (*AllSeasonsResponse, error)
}

type p2EServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewP2EServiceClient(cc grpc.ClientConnInterface) P2EServiceClient {
	return &p2EServiceClient{cc}
}

func (c *p2EServiceClient) Leaderboard(ctx context.Context, in *LeaderboardRequest, opts ...grpc.CallOption) (P2EService_LeaderboardClient, error) {
	stream, err := c.cc.NewStream(ctx, &P2EService_ServiceDesc.Streams[0], "/p2e.v1.P2eService/Leaderboard", opts...)
	if err != nil {
		return nil, err
	}
	x := &p2EServiceLeaderboardClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type P2EService_LeaderboardClient interface {
	Recv() (*LeaderboardResponse, error)
	grpc.ClientStream
}

type p2EServiceLeaderboardClient struct {
	grpc.ClientStream
}

func (x *p2EServiceLeaderboardClient) Recv() (*LeaderboardResponse, error) {
	m := new(LeaderboardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *p2EServiceClient) CurrentSeason(ctx context.Context, in *CurrentSeasonRequest, opts ...grpc.CallOption) (*CurrentSeasonResponse, error) {
	out := new(CurrentSeasonResponse)
	err := c.cc.Invoke(ctx, "/p2e.v1.P2eService/CurrentSeason", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2EServiceClient) UserRank(ctx context.Context, in *UserRankRequest, opts ...grpc.CallOption) (*UserRankResponse, error) {
	out := new(UserRankResponse)
	err := c.cc.Invoke(ctx, "/p2e.v1.P2eService/UserRank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2EServiceClient) AllSeasons(ctx context.Context, in *AllSeasonsRequest, opts ...grpc.CallOption) (*AllSeasonsResponse, error) {
	out := new(AllSeasonsResponse)
	err := c.cc.Invoke(ctx, "/p2e.v1.P2eService/AllSeasons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2EServiceServer is the server API for P2EService service.
// All implementations must embed UnimplementedP2EServiceServer
// for forward compatibility
type P2EServiceServer interface {
	Leaderboard(*LeaderboardRequest, P2EService_LeaderboardServer) error
	CurrentSeason(context.Context, *CurrentSeasonRequest) (*CurrentSeasonResponse, error)
	UserRank(context.Context, *UserRankRequest) (*UserRankResponse, error)
	AllSeasons(context.Context, *AllSeasonsRequest) (*AllSeasonsResponse, error)
	mustEmbedUnimplementedP2EServiceServer()
}

// UnimplementedP2EServiceServer must be embedded to have forward compatible implementations.
type UnimplementedP2EServiceServer struct {
}

func (UnimplementedP2EServiceServer) Leaderboard(*LeaderboardRequest, P2EService_LeaderboardServer) error {
	return status.Errorf(codes.Unimplemented, "method Leaderboard not implemented")
}
func (UnimplementedP2EServiceServer) CurrentSeason(context.Context, *CurrentSeasonRequest) (*CurrentSeasonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentSeason not implemented")
}
func (UnimplementedP2EServiceServer) UserRank(context.Context, *UserRankRequest) (*UserRankResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRank not implemented")
}
func (UnimplementedP2EServiceServer) AllSeasons(context.Context, *AllSeasonsRequest) (*AllSeasonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllSeasons not implemented")
}
func (UnimplementedP2EServiceServer) mustEmbedUnimplementedP2EServiceServer() {}

// UnsafeP2EServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2EServiceServer will
// result in compilation errors.
type UnsafeP2EServiceServer interface {
	mustEmbedUnimplementedP2EServiceServer()
}

func RegisterP2EServiceServer(s grpc.ServiceRegistrar, srv P2EServiceServer) {
	s.RegisterService(&P2EService_ServiceDesc, srv)
}

func _P2EService_Leaderboard_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LeaderboardRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P2EServiceServer).Leaderboard(m, &p2EServiceLeaderboardServer{stream})
}

type P2EService_LeaderboardServer interface {
	Send(*LeaderboardResponse) error
	grpc.ServerStream
}

type p2EServiceLeaderboardServer struct {
	grpc.ServerStream
}

func (x *p2EServiceLeaderboardServer) Send(m *LeaderboardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _P2EService_CurrentSeason_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentSeasonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2EServiceServer).CurrentSeason(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2e.v1.P2eService/CurrentSeason",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2EServiceServer).CurrentSeason(ctx, req.(*CurrentSeasonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2EService_UserRank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRankRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2EServiceServer).UserRank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2e.v1.P2eService/UserRank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2EServiceServer).UserRank(ctx, req.(*UserRankRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2EService_AllSeasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllSeasonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2EServiceServer).AllSeasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/p2e.v1.P2eService/AllSeasons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2EServiceServer).AllSeasons(ctx, req.(*AllSeasonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// P2EService_ServiceDesc is the grpc.ServiceDesc for P2EService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2EService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "p2e.v1.P2eService",
	HandlerType: (*P2EServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentSeason",
			Handler:    _P2EService_CurrentSeason_Handler,
		},
		{
			MethodName: "UserRank",
			Handler:    _P2EService_UserRank_Handler,
		},
		{
			MethodName: "AllSeasons",
			Handler:    _P2EService_AllSeasons_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Leaderboard",
			Handler:       _P2EService_Leaderboard_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "p2e/v1/p2e.proto",
}
