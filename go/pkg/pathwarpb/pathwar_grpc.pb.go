// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pathwar/v1/pathwar.proto

package pathwarpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PathwarServiceClient is the client API for PathwarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PathwarServiceClient interface {
	// rpc RegisterUser(RegisterUserRequest) returns (stream RegisterUserResponse);
	// rpc Leaderboard(LeaderboardRequest) returns (stream LeaderboardResponse);
	// rpc Resources(ResourcesRequest) returns (stream ResourcesResponse);
	// rpc Tournaments(TournamentsRequest) returns (stream TournamentsResponse);
	// rpc Challenge(ChallengeRequest) returns (stream ChallengeResponse);
	// rpc ChallengeListing(ChallengeListingRequest) returns (stream ChallengeListingResponse);
	ChallengeValidate(ctx context.Context, in *ChallengeValidateRequest, opts ...grpc.CallOption) (*ChallengeValidateResponse, error)
}

type pathwarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPathwarServiceClient(cc grpc.ClientConnInterface) PathwarServiceClient {
	return &pathwarServiceClient{cc}
}

func (c *pathwarServiceClient) ChallengeValidate(ctx context.Context, in *ChallengeValidateRequest, opts ...grpc.CallOption) (*ChallengeValidateResponse, error) {
	out := new(ChallengeValidateResponse)
	err := c.cc.Invoke(ctx, "/pathwar.v1.PathwarService/ChallengeValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PathwarServiceServer is the server API for PathwarService service.
// All implementations must embed UnimplementedPathwarServiceServer
// for forward compatibility
type PathwarServiceServer interface {
	// rpc RegisterUser(RegisterUserRequest) returns (stream RegisterUserResponse);
	// rpc Leaderboard(LeaderboardRequest) returns (stream LeaderboardResponse);
	// rpc Resources(ResourcesRequest) returns (stream ResourcesResponse);
	// rpc Tournaments(TournamentsRequest) returns (stream TournamentsResponse);
	// rpc Challenge(ChallengeRequest) returns (stream ChallengeResponse);
	// rpc ChallengeListing(ChallengeListingRequest) returns (stream ChallengeListingResponse);
	ChallengeValidate(context.Context, *ChallengeValidateRequest) (*ChallengeValidateResponse, error)
	mustEmbedUnimplementedPathwarServiceServer()
}

// UnimplementedPathwarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPathwarServiceServer struct {
}

func (UnimplementedPathwarServiceServer) ChallengeValidate(context.Context, *ChallengeValidateRequest) (*ChallengeValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeValidate not implemented")
}
func (UnimplementedPathwarServiceServer) mustEmbedUnimplementedPathwarServiceServer() {}

// UnsafePathwarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PathwarServiceServer will
// result in compilation errors.
type UnsafePathwarServiceServer interface {
	mustEmbedUnimplementedPathwarServiceServer()
}

func RegisterPathwarServiceServer(s grpc.ServiceRegistrar, srv PathwarServiceServer) {
	s.RegisterService(&PathwarService_ServiceDesc, srv)
}

func _PathwarService_ChallengeValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathwarServiceServer).ChallengeValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pathwar.v1.PathwarService/ChallengeValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathwarServiceServer).ChallengeValidate(ctx, req.(*ChallengeValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PathwarService_ServiceDesc is the grpc.ServiceDesc for PathwarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PathwarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pathwar.v1.PathwarService",
	HandlerType: (*PathwarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChallengeValidate",
			Handler:    _PathwarService_ChallengeValidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pathwar/v1/pathwar.proto",
}
