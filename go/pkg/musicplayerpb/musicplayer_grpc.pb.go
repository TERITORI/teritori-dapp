// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package musicplayerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MusicplayerServiceClient is the client API for MusicplayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicplayerServiceClient interface {
	GetAlbumList(ctx context.Context, in *GetAlbumListRequest, opts ...grpc.CallOption) (*GetAlbumListResponse, error)
	GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumResponse, error)
}

type musicplayerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicplayerServiceClient(cc grpc.ClientConnInterface) MusicplayerServiceClient {
	return &musicplayerServiceClient{cc}
}

func (c *musicplayerServiceClient) GetAlbumList(ctx context.Context, in *GetAlbumListRequest, opts ...grpc.CallOption) (*GetAlbumListResponse, error) {
	out := new(GetAlbumListResponse)
	err := c.cc.Invoke(ctx, "/musicplayer.v1.MusicplayerService/GetAlbumList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicplayerServiceClient) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumResponse, error) {
	out := new(GetAlbumResponse)
	err := c.cc.Invoke(ctx, "/musicplayer.v1.MusicplayerService/GetAlbum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicplayerServiceServer is the server API for MusicplayerService service.
// All implementations must embed UnimplementedMusicplayerServiceServer
// for forward compatibility
type MusicplayerServiceServer interface {
	GetAlbumList(context.Context, *GetAlbumListRequest) (*GetAlbumListResponse, error)
	GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumResponse, error)
	mustEmbedUnimplementedMusicplayerServiceServer()
}

// UnimplementedMusicplayerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMusicplayerServiceServer struct {
}

func (UnimplementedMusicplayerServiceServer) GetAlbumList(context.Context, *GetAlbumListRequest) (*GetAlbumListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbumList not implemented")
}
func (UnimplementedMusicplayerServiceServer) GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedMusicplayerServiceServer) mustEmbedUnimplementedMusicplayerServiceServer() {}

// UnsafeMusicplayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicplayerServiceServer will
// result in compilation errors.
type UnsafeMusicplayerServiceServer interface {
	mustEmbedUnimplementedMusicplayerServiceServer()
}

func RegisterMusicplayerServiceServer(s grpc.ServiceRegistrar, srv MusicplayerServiceServer) {
	s.RegisterService(&MusicplayerService_ServiceDesc, srv)
}

func _MusicplayerService_GetAlbumList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicplayerServiceServer).GetAlbumList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musicplayer.v1.MusicplayerService/GetAlbumList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicplayerServiceServer).GetAlbumList(ctx, req.(*GetAlbumListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicplayerService_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicplayerServiceServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/musicplayer.v1.MusicplayerService/GetAlbum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicplayerServiceServer).GetAlbum(ctx, req.(*GetAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicplayerService_ServiceDesc is the grpc.ServiceDesc for MusicplayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicplayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "musicplayer.v1.MusicplayerService",
	HandlerType: (*MusicplayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlbumList",
			Handler:    _MusicplayerService_GetAlbumList_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _MusicplayerService_GetAlbum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/musicplayer/v1/musicplayer.proto",
}