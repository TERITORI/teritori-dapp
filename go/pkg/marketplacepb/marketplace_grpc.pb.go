// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: marketplace/v1/marketplace.proto

package marketplacepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketplaceServiceClient is the client API for MarketplaceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketplaceServiceClient interface {
	UpcomingLaunches(ctx context.Context, in *UpcomingLaunchesRequest, opts ...grpc.CallOption) (MarketplaceService_UpcomingLaunchesClient, error)
	Collections(ctx context.Context, in *CollectionsRequest, opts ...grpc.CallOption) (MarketplaceService_CollectionsClient, error)
}

type marketplaceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketplaceServiceClient(cc grpc.ClientConnInterface) MarketplaceServiceClient {
	return &marketplaceServiceClient{cc}
}

func (c *marketplaceServiceClient) UpcomingLaunches(ctx context.Context, in *UpcomingLaunchesRequest, opts ...grpc.CallOption) (MarketplaceService_UpcomingLaunchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MarketplaceService_ServiceDesc.Streams[0], "/marketplace.v1.MarketplaceService/UpcomingLaunches", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketplaceServiceUpcomingLaunchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketplaceService_UpcomingLaunchesClient interface {
	Recv() (*UpcomingLaunchesResponse, error)
	grpc.ClientStream
}

type marketplaceServiceUpcomingLaunchesClient struct {
	grpc.ClientStream
}

func (x *marketplaceServiceUpcomingLaunchesClient) Recv() (*UpcomingLaunchesResponse, error) {
	m := new(UpcomingLaunchesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketplaceServiceClient) Collections(ctx context.Context, in *CollectionsRequest, opts ...grpc.CallOption) (MarketplaceService_CollectionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MarketplaceService_ServiceDesc.Streams[1], "/marketplace.v1.MarketplaceService/Collections", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketplaceServiceCollectionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketplaceService_CollectionsClient interface {
	Recv() (*CollectionsResponse, error)
	grpc.ClientStream
}

type marketplaceServiceCollectionsClient struct {
	grpc.ClientStream
}

func (x *marketplaceServiceCollectionsClient) Recv() (*CollectionsResponse, error) {
	m := new(CollectionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MarketplaceServiceServer is the server API for MarketplaceService service.
// All implementations must embed UnimplementedMarketplaceServiceServer
// for forward compatibility
type MarketplaceServiceServer interface {
	UpcomingLaunches(*UpcomingLaunchesRequest, MarketplaceService_UpcomingLaunchesServer) error
	Collections(*CollectionsRequest, MarketplaceService_CollectionsServer) error
	mustEmbedUnimplementedMarketplaceServiceServer()
}

// UnimplementedMarketplaceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketplaceServiceServer struct {
}

func (UnimplementedMarketplaceServiceServer) UpcomingLaunches(*UpcomingLaunchesRequest, MarketplaceService_UpcomingLaunchesServer) error {
	return status.Errorf(codes.Unimplemented, "method UpcomingLaunches not implemented")
}
func (UnimplementedMarketplaceServiceServer) Collections(*CollectionsRequest, MarketplaceService_CollectionsServer) error {
	return status.Errorf(codes.Unimplemented, "method Collections not implemented")
}
func (UnimplementedMarketplaceServiceServer) mustEmbedUnimplementedMarketplaceServiceServer() {}

// UnsafeMarketplaceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketplaceServiceServer will
// result in compilation errors.
type UnsafeMarketplaceServiceServer interface {
	mustEmbedUnimplementedMarketplaceServiceServer()
}

func RegisterMarketplaceServiceServer(s grpc.ServiceRegistrar, srv MarketplaceServiceServer) {
	s.RegisterService(&MarketplaceService_ServiceDesc, srv)
}

func _MarketplaceService_UpcomingLaunches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpcomingLaunchesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketplaceServiceServer).UpcomingLaunches(m, &marketplaceServiceUpcomingLaunchesServer{stream})
}

type MarketplaceService_UpcomingLaunchesServer interface {
	Send(*UpcomingLaunchesResponse) error
	grpc.ServerStream
}

type marketplaceServiceUpcomingLaunchesServer struct {
	grpc.ServerStream
}

func (x *marketplaceServiceUpcomingLaunchesServer) Send(m *UpcomingLaunchesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MarketplaceService_Collections_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CollectionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketplaceServiceServer).Collections(m, &marketplaceServiceCollectionsServer{stream})
}

type MarketplaceService_CollectionsServer interface {
	Send(*CollectionsResponse) error
	grpc.ServerStream
}

type marketplaceServiceCollectionsServer struct {
	grpc.ServerStream
}

func (x *marketplaceServiceCollectionsServer) Send(m *CollectionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MarketplaceService_ServiceDesc is the grpc.ServiceDesc for MarketplaceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketplaceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "marketplace.v1.MarketplaceService",
	HandlerType: (*MarketplaceServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpcomingLaunches",
			Handler:       _MarketplaceService_UpcomingLaunches_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Collections",
			Handler:       _MarketplaceService_Collections_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "marketplace/v1/marketplace.proto",
}
