/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, ConfigResponse, Config, Cw721HookMsg, ExecuteMsg, Uint128, RewardInfo, InstantiateMsg, QueryMsg, ReportAmountResponse, TotalClaimableResponse, UserClaimableResponse } from "./TeritoriDistributor.types";
export interface TeritoriDistributorReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  totalClaimable: () => Promise<TotalClaimableResponse>;
  userClaimable: ({
    addr
  }: {
    addr: string;
  }) => Promise<UserClaimableResponse>;
  reportAmount: ({
    addr,
    reportId
  }: {
    addr: string;
    reportId: number;
  }) => Promise<ReportAmountResponse>;
}
export class TeritoriDistributorQueryClient implements TeritoriDistributorReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.totalClaimable = this.totalClaimable.bind(this);
    this.userClaimable = this.userClaimable.bind(this);
    this.reportAmount = this.reportAmount.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  totalClaimable = async (): Promise<TotalClaimableResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_claimable: {}
    });
  };
  userClaimable = async ({
    addr
  }: {
    addr: string;
  }): Promise<UserClaimableResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_claimable: {
        addr
      }
    });
  };
  reportAmount = async ({
    addr,
    reportId
  }: {
    addr: string;
    reportId: number;
  }): Promise<ReportAmountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      report_amount: {
        addr,
        report_id: reportId
      }
    });
  };
}
export interface TeritoriDistributorInterface extends TeritoriDistributorReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    owner
  }: {
    owner: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  addDailyReport: ({
    reportId,
    rewards
  }: {
    reportId: number;
    rewards: RewardInfo[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  claim: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class TeritoriDistributorClient extends TeritoriDistributorQueryClient implements TeritoriDistributorInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.addDailyReport = this.addDailyReport.bind(this);
    this.claim = this.claim.bind(this);
  }

  updateConfig = async ({
    owner
  }: {
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        owner
      }
    }, fee, memo, funds);
  };
  addDailyReport = async ({
    reportId,
    rewards
  }: {
    reportId: number;
    rewards: RewardInfo[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_daily_report: {
        report_id: reportId,
        rewards
      }
    }, fee, memo, funds);
  };
  claim = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {}
    }, fee, memo, funds);
  };
}