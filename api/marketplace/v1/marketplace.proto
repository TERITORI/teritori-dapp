syntax = "proto3";

package marketplace.v1;
option go_package = "./marketplacepb";

service MarketplaceService {
  rpc Collections(CollectionsRequest) returns (stream CollectionsResponse);
  rpc CollectionStats(CollectionStatsRequest) returns ( CollectionStatsResponse);
  rpc NFTs(NFTsRequest) returns (stream NFTsResponse);
  rpc NFTCollectionAttributes(NFTCollectionAttributesRequest) returns (stream NFTCollectionAttributesResponse);
  rpc Quests(QuestsRequest) returns (stream QuestsResponse);
  rpc Activity(ActivityRequest) returns (stream ActivityResponse);
  rpc NFTPriceHistory(NFTPriceHistoryRequest) returns (NFTPriceHistoryResponse);
  rpc Banners(BannersRequest) returns (BannersResponse);
  rpc News(NewsRequest) returns (NewsResponse);
  rpc DApps(DAppsRequest) returns (DAppsResponse);
  rpc DAppsGroups(DAppsGroupsRequest) returns (DAppsGroupsResponse);
  rpc SearchNames(SearchNamesRequest) returns (SearchNamesResponse);
  rpc SearchCollections(SearchCollectionsRequest) returns (SearchCollectionsResponse);
}

enum Sort {
  SORT_UNSPECIFIED = 0;
  SORT_PRICE = 1;
  SORT_VOLUME = 2;
  SORT_MARKET_CAP = 3;
  SORT_CREATED_AT = 4;
  SORT_VOLUME_USD = 5;
}

enum SortDirection {
  SORT_DIRECTION_UNSPECIFIED = 0;
  SORT_DIRECTION_ASCENDING = 1;
  SORT_DIRECTION_DESCENDING = 2;
}

enum MintState {
  MINT_STATE_UNSPECIFIED = 0;
  MINT_STATE_RUNNING = 1;
  MINT_STATE_ENDED = 2;
}

message Attribute {
  string trait_type = 1;
  string value = 2;
}

message PriceRange {
  string min = 1;
  string max = 2;
}

message NFT {
  string id = 1;
  string network_id = 14;
  string image_uri = 3;
  string name = 4;
  string mint_address = 5;
  string price = 6;
  string denom = 7;
  bool is_listed = 8;
  string text_insert = 9;
  string collection_name = 10;
  string owner_id = 13;
  string nft_contract_address = 15;
  string locked_on = 16;
  repeated Attribute attributes = 17;
}
message Amount {
  string denom = 1;
  string quantity = 3;
}

message Collection {
  string id = 1;
  string image_uri = 2;
  string collection_name = 3;
  string creator_name = 4;
  bool verified = 5;
  string mint_address = 6;
  string network_id = 11;
  string volume = 8;
  string volume_denom = 9;
  string creator_id = 10;
  bool secondary_during_mint = 12;
  string website_url = 13;
  string twitter_url = 14;
  uint64 floor_price = 15;
  int64 max_supply = 16;
  string mint_price = 17;
  float total_volume = 18;
  int64 num_trades = 19;
  int32 num_owners = 20;
  string denom = 21;
  float volume_compare = 22;
}

message CollectionStats {
  repeated Amount floor_price = 1;
  string total_volume = 2;
  int32 owners = 3;
  int32 listed = 4;
  int64 total_supply = 5;
  int32 owned = 6;
  float avg_price_period = 7;
}

message AttributeRarityFloor {
  string trait_type = 1;
  string value = 2;
  int32 counta = 3;
  float floor = 4;
  string collection_id = 5;
  float rare_ratio = 6;
  int32 collection_size = 7;
}

message NFTCollectionAttributesResponse {
  AttributeRarityFloor attributes = 1;
}

message Activity {
  string id = 1;
  string transaction_kind = 2;
  string target_name = 3;
  string target_image_uri = 4;
  string contract_name = 5;
  string time = 6;
  string amount = 7;
  string denom = 8;
  string transaction_id = 9;
  string buyer_id = 10;
  string seller_id = 11;
  double usd_price = 12;
}

message Quest {
  string id = 1;
  string title = 2;
  bool completed = 3;
}

message PriceDatum {
  string price = 3;
  string time = 2;
}

message CollectionsRequest {
  int32 limit = 2;
  int32 offset = 3;

  Sort sort = 4;
  SortDirection sort_direction = 5;

  bool upcoming = 6;
  string network_id = 7;
  MintState mint_state = 8;
}

message CollectionStatsRequest {
  string collection_id = 1;
  string owner_id = 2;
}

message NFTCollectionAttributesRequest {
  string collection_id = 1;
  repeated Attribute where_attributes = 2;
}

message CollectionStatsResponse {
  CollectionStats stats = 1;
}

message CollectionsResponse {
  Collection collection = 1;
}

message NFTsRequest {
  int32 limit = 1;
  int32 offset = 2;

  string collection_id = 3;
  string owner_id = 4;

  Sort sort = 5;
  SortDirection sort_direction = 6;
  repeated Attribute attributes = 7;
  bool is_listed = 8;
  PriceRange price_range = 9;
}

message NFTsResponse {
  NFT nft = 1;
}

message QuestsRequest {
  int32 limit = 1;
  int32 offset = 2;

  string user_id = 3;
}

message QuestsResponse {
  Quest quest = 1;
}

message ActivityRequest {
  string collection_id = 1;
  string nft_id = 2;
  int32 limit = 3;
  int32 offset = 4;
}


message ActivityResponse {
  Activity activity = 1;
  int64 total = 2;
}

message NFTPriceHistoryRequest {
  string id = 1;
}

message NFTPriceHistoryResponse {
  repeated PriceDatum data = 1;
}

message Action {
  string label = 1;
  string url = 2;
}

message News {
  string title = 1;
  string subtitle = 2;
  string text = 3;
  string image = 4;
  repeated Action actions = 5;
}

message DAppGroup {
  string id = 1;
  string group_name = 2;
  string icon = 3;
  repeated string options = 4;
}

message DApp {
  string id = 1;
  string title = 2;
  string description = 3;
  string icon = 4;
  string route = 5;
  string group_key = 6;
  string linking_id = 7;
  bool selected_by_default = 8;
  bool always_on = 9;
}

message Banner {
  string image = 1;
  string url = 2;
}

message BannersRequest {
  bool testnet = 1;
}

message BannersResponse {
  repeated Banner banners = 1;
}

message NewsRequest {
  bool testnet = 1;
}

message NewsResponse {
  repeated News news = 1;
}

message DAppsRequest {
}

message DAppsResponse {
  repeated DApp group = 1;
}

message DAppsGroupsRequest {
}

message DAppsGroupsResponse {
  repeated DAppGroup group = 1;
}

message SearchNamesRequest {
  string network_id = 1;
  string input = 2;
  int32 limit = 3;
}

message SearchNamesResponse {
  repeated string names = 1;
}

message SearchCollectionsRequest {
  string input = 1;
  int32 limit = 2;
}

message SearchCollectionsResponse {
  repeated Collection collections = 1;
}
