/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ExecMsg, QueryMsg, QueryMsg1, Bound, Order, Addr, ArrayOfAddr, NullableAddr } from "./CwAddressList.types";
export interface CwAddressListReadOnlyInterface {
  contractAddress: string;
  admin: () => Promise<NullableAddr>;
  addresses: ({
    limit,
    max,
    min,
    order
  }: {
    limit?: number;
    max?: Bound;
    min?: Bound;
    order?: Order;
  }) => Promise<ArrayOfAddr>;
}
export class CwAddressListQueryClient implements CwAddressListReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.admin = this.admin.bind(this);
    this.addresses = this.addresses.bind(this);
  }

  admin = async (): Promise<NullableAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin: {}
    });
  };
  addresses = async ({
    limit,
    max,
    min,
    order
  }: {
    limit?: number;
    max?: Bound;
    min?: Bound;
    order?: Order;
  }): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      addresses: {
        limit,
        max,
        min,
        order
      }
    });
  };
}
export interface CwAddressListInterface extends CwAddressListReadOnlyInterface {
  contractAddress: string;
  sender: string;
  add: ({
    addr
  }: {
    addr: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  remove: ({
    addr
  }: {
    addr: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  changeAdmin: ({
    addr
  }: {
    addr?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CwAddressListClient extends CwAddressListQueryClient implements CwAddressListInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.add = this.add.bind(this);
    this.remove = this.remove.bind(this);
    this.changeAdmin = this.changeAdmin.bind(this);
  }

  add = async ({
    addr
  }: {
    addr: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add: {
        addr
      }
    }, fee, memo, _funds);
  };
  remove = async ({
    addr
  }: {
    addr: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove: {
        addr
      }
    }, fee, memo, _funds);
  };
  changeAdmin = async ({
    addr
  }: {
    addr?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_admin: {
        addr
      }
    }, fee, memo, _funds);
  };
}