/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ExecMsg, Binary, QueryMsg, QueryMsg1, Addr, ArrayOfAddr, Uint32, ArrayOfTupleOfAddrAndString, Expiration, Timestamp, Uint64, OwnershipForAddr } from "./NftsBurner.types";
export interface NftsBurnerReadOnlyInterface {
  contractAddress: string;
  ownership: () => Promise<OwnershipForAddr>;
  burnedByUser: ({
    userAddr
  }: {
    userAddr: string;
  }) => Promise<Uint32>;
  burnedTotal: () => Promise<Uint32>;
  burnedByCollection: ({
    collectionAddr
  }: {
    collectionAddr: string;
  }) => Promise<Uint32>;
  authorizedCollections: ({
    limit,
    offset
  }: {
    limit: number;
    offset: number;
  }) => Promise<ArrayOfAddr>;
  burnedNfts: ({
    collectionAddr,
    limit,
    offset
  }: {
    collectionAddr?: string;
    limit: number;
    offset: number;
  }) => Promise<ArrayOfTupleOfAddrAndString>;
}
export class NftsBurnerQueryClient implements NftsBurnerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.ownership = this.ownership.bind(this);
    this.burnedByUser = this.burnedByUser.bind(this);
    this.burnedTotal = this.burnedTotal.bind(this);
    this.burnedByCollection = this.burnedByCollection.bind(this);
    this.authorizedCollections = this.authorizedCollections.bind(this);
    this.burnedNfts = this.burnedNfts.bind(this);
  }

  ownership = async (): Promise<OwnershipForAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {}
    });
  };
  burnedByUser = async ({
    userAddr
  }: {
    userAddr: string;
  }): Promise<Uint32> => {
    return this.client.queryContractSmart(this.contractAddress, {
      burned_by_user: {
        user_addr: userAddr
      }
    });
  };
  burnedTotal = async (): Promise<Uint32> => {
    return this.client.queryContractSmart(this.contractAddress, {
      burned_total: {}
    });
  };
  burnedByCollection = async ({
    collectionAddr
  }: {
    collectionAddr: string;
  }): Promise<Uint32> => {
    return this.client.queryContractSmart(this.contractAddress, {
      burned_by_collection: {
        collection_addr: collectionAddr
      }
    });
  };
  authorizedCollections = async ({
    limit,
    offset
  }: {
    limit: number;
    offset: number;
  }): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      authorized_collections: {
        limit,
        offset
      }
    });
  };
  burnedNfts = async ({
    collectionAddr,
    limit,
    offset
  }: {
    collectionAddr?: string;
    limit: number;
    offset: number;
  }): Promise<ArrayOfTupleOfAddrAndString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      burned_nfts: {
        collection_addr: collectionAddr,
        limit,
        offset
      }
    });
  };
}
export interface NftsBurnerInterface extends NftsBurnerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receiveNft: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  authorizeCollections: ({
    collectionAddrs
  }: {
    collectionAddrs: string[];
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: ({
    newOwner
  }: {
    newOwner?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class NftsBurnerClient extends NftsBurnerQueryClient implements NftsBurnerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receiveNft = this.receiveNft.bind(this);
    this.authorizeCollections = this.authorizeCollections.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }

  receiveNft = async ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_nft: {
        msg,
        sender,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  authorizeCollections = async ({
    collectionAddrs
  }: {
    collectionAddrs: string[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      authorize_collections: {
        collection_addrs: collectionAddrs
      }
    }, fee, memo, _funds);
  };
  updateOwnership = async ({
    newOwner
  }: {
    newOwner?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: {
        new_owner: newOwner
      }
    }, fee, memo, _funds);
  };
}