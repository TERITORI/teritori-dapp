/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Addr, Uint128, InstantiateMsg, MintInfo, MintPeriod, Coin, WhitelistInfo, ExecuteMsg, Binary, Expiration, Timestamp, Uint64, Metadata, Trait, WhitelistProof, QueryMsg, AllNftInfoResponseForMetadata, OwnerOfResponse, Approval, NftInfoResponseForMetadata, OperatorsResponse, TokensResponse, ApprovalResponse, ApprovalsResponse, CheckRoyaltiesResponse, ContractInfoResponse, ContractVersion, CosmosMsgForEmpty, BankMsg, StakingMsg, DistributionMsg, WasmMsg, ReplyOn, ResponseForEmpty, Attribute, Event, SubMsgForEmpty, Empty, String, ArrayOfMintPeriod, Uint32, MinterResponse, NumTokensResponse, OperatorResponse, OwnershipForAddr, RoyaltiesInfoResponse } from "./NftTr721.types";
export interface NftTr721ReadOnlyInterface {
  contractAddress: string;
  totalMinted: () => Promise<Uint64>;
  mintedCountByPeriod: ({
    periodId
  }: {
    periodId: number;
  }) => Promise<Uint32>;
  mintedCountByUser: ({
    periodId,
    user
  }: {
    periodId: number;
    user: string;
  }) => Promise<Uint32>;
  totalMintedCountByUser: ({
    user
  }: {
    user: string;
  }) => Promise<Uint32>;
  mintInfo: () => Promise<MintInfo>;
  mintPeriods: () => Promise<ArrayOfMintPeriod>;
  minter: () => Promise<MinterResponse>;
  contractInfo: () => Promise<ContractInfoResponse>;
  nftInfo: ({
    tokenId
  }: {
    tokenId: string;
  }) => Promise<NftInfoResponseForMetadata>;
  ownerOf: ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }) => Promise<OwnerOfResponse>;
  allNftInfo: ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }) => Promise<AllNftInfoResponseForMetadata>;
  operator: ({
    includeExpired,
    operator,
    owner
  }: {
    includeExpired?: boolean;
    operator: string;
    owner: string;
  }) => Promise<OperatorResponse>;
  allOperators: ({
    includeExpired,
    limit,
    owner,
    startAfter
  }: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  }) => Promise<OperatorsResponse>;
  numTokens: () => Promise<NumTokensResponse>;
  tokens: ({
    limit,
    owner,
    startAfter
  }: {
    limit?: number;
    owner: string;
    startAfter?: string;
  }) => Promise<TokensResponse>;
  allTokens: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<TokensResponse>;
  approval: ({
    includeExpired,
    spender,
    tokenId
  }: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  }) => Promise<ApprovalResponse>;
  approvals: ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }) => Promise<ApprovalsResponse>;
  ownership: () => Promise<OwnershipForAddr>;
  extension: () => Promise<ResponseForEmpty>;
  contractVersion: () => Promise<ContractVersion>;
  merkleRoot: () => Promise<String>;
  royaltyInfo: ({
    salePrice,
    tokenId
  }: {
    salePrice: Uint128;
    tokenId: string;
  }) => Promise<RoyaltiesInfoResponse>;
  checkRoyalties: () => Promise<CheckRoyaltiesResponse>;
}
export class NftTr721QueryClient implements NftTr721ReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.totalMinted = this.totalMinted.bind(this);
    this.mintedCountByPeriod = this.mintedCountByPeriod.bind(this);
    this.mintedCountByUser = this.mintedCountByUser.bind(this);
    this.totalMintedCountByUser = this.totalMintedCountByUser.bind(this);
    this.mintInfo = this.mintInfo.bind(this);
    this.mintPeriods = this.mintPeriods.bind(this);
    this.minter = this.minter.bind(this);
    this.contractInfo = this.contractInfo.bind(this);
    this.nftInfo = this.nftInfo.bind(this);
    this.ownerOf = this.ownerOf.bind(this);
    this.allNftInfo = this.allNftInfo.bind(this);
    this.operator = this.operator.bind(this);
    this.allOperators = this.allOperators.bind(this);
    this.numTokens = this.numTokens.bind(this);
    this.tokens = this.tokens.bind(this);
    this.allTokens = this.allTokens.bind(this);
    this.approval = this.approval.bind(this);
    this.approvals = this.approvals.bind(this);
    this.ownership = this.ownership.bind(this);
    this.extension = this.extension.bind(this);
    this.contractVersion = this.contractVersion.bind(this);
    this.merkleRoot = this.merkleRoot.bind(this);
    this.royaltyInfo = this.royaltyInfo.bind(this);
    this.checkRoyalties = this.checkRoyalties.bind(this);
  }

  totalMinted = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_minted: {}
    });
  };
  mintedCountByPeriod = async ({
    periodId
  }: {
    periodId: number;
  }): Promise<Uint32> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minted_count_by_period: {
        period_id: periodId
      }
    });
  };
  mintedCountByUser = async ({
    periodId,
    user
  }: {
    periodId: number;
    user: string;
  }): Promise<Uint32> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minted_count_by_user: {
        period_id: periodId,
        user
      }
    });
  };
  totalMintedCountByUser = async ({
    user
  }: {
    user: string;
  }): Promise<Uint32> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_minted_count_by_user: {
        user
      }
    });
  };
  mintInfo = async (): Promise<MintInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      mint_info: {}
    });
  };
  mintPeriods = async (): Promise<ArrayOfMintPeriod> => {
    return this.client.queryContractSmart(this.contractAddress, {
      mint_periods: {}
    });
  };
  minter = async (): Promise<MinterResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minter: {}
    });
  };
  contractInfo = async (): Promise<ContractInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_info: {}
    });
  };
  nftInfo = async ({
    tokenId
  }: {
    tokenId: string;
  }): Promise<NftInfoResponseForMetadata> => {
    return this.client.queryContractSmart(this.contractAddress, {
      nft_info: {
        token_id: tokenId
      }
    });
  };
  ownerOf = async ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }): Promise<OwnerOfResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      owner_of: {
        include_expired: includeExpired,
        token_id: tokenId
      }
    });
  };
  allNftInfo = async ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }): Promise<AllNftInfoResponseForMetadata> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_nft_info: {
        include_expired: includeExpired,
        token_id: tokenId
      }
    });
  };
  operator = async ({
    includeExpired,
    operator,
    owner
  }: {
    includeExpired?: boolean;
    operator: string;
    owner: string;
  }): Promise<OperatorResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      operator: {
        include_expired: includeExpired,
        operator,
        owner
      }
    });
  };
  allOperators = async ({
    includeExpired,
    limit,
    owner,
    startAfter
  }: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  }): Promise<OperatorsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_operators: {
        include_expired: includeExpired,
        limit,
        owner,
        start_after: startAfter
      }
    });
  };
  numTokens = async (): Promise<NumTokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      num_tokens: {}
    });
  };
  tokens = async ({
    limit,
    owner,
    startAfter
  }: {
    limit?: number;
    owner: string;
    startAfter?: string;
  }): Promise<TokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      tokens: {
        limit,
        owner,
        start_after: startAfter
      }
    });
  };
  allTokens = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<TokensResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_tokens: {
        limit,
        start_after: startAfter
      }
    });
  };
  approval = async ({
    includeExpired,
    spender,
    tokenId
  }: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  }): Promise<ApprovalResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      approval: {
        include_expired: includeExpired,
        spender,
        token_id: tokenId
      }
    });
  };
  approvals = async ({
    includeExpired,
    tokenId
  }: {
    includeExpired?: boolean;
    tokenId: string;
  }): Promise<ApprovalsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      approvals: {
        include_expired: includeExpired,
        token_id: tokenId
      }
    });
  };
  ownership = async (): Promise<OwnershipForAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {}
    });
  };
  extension = async (): Promise<ResponseForEmpty> => {
    return this.client.queryContractSmart(this.contractAddress, {
      extension: {}
    });
  };
  contractVersion = async (): Promise<ContractVersion> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_version: {}
    });
  };
  merkleRoot = async (): Promise<String> => {
    return this.client.queryContractSmart(this.contractAddress, {
      merkle_root: {}
    });
  };
  royaltyInfo = async ({
    salePrice,
    tokenId
  }: {
    salePrice: Uint128;
    tokenId: string;
  }): Promise<RoyaltiesInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      royalty_info: {
        sale_price: salePrice,
        token_id: tokenId
      }
    });
  };
  checkRoyalties = async (): Promise<CheckRoyaltiesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      check_royalties: {}
    });
  };
}
export interface NftTr721Interface extends NftTr721ReadOnlyInterface {
  contractAddress: string;
  sender: string;
  transferNft: ({
    recipient,
    tokenId
  }: {
    recipient: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  sendNft: ({
    contract,
    msg,
    tokenId
  }: {
    contract: string;
    msg: Binary;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  approve: ({
    expires,
    spender,
    tokenId
  }: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  approveAll: ({
    expires,
    operator
  }: {
    expires?: Expiration;
    operator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  revoke: ({
    spender,
    tokenId
  }: {
    spender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  revokeAll: ({
    operator
  }: {
    operator: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  mint: ({
    extension,
    owner,
    tokenId,
    tokenUri
  }: {
    extension?: Metadata;
    owner: string;
    tokenId: string;
    tokenUri?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateMintInfo: ({
    mintInfo
  }: {
    mintInfo: MintInfo;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateMintPeriod: ({
    mintPeriod,
    mintPeriodId
  }: {
    mintPeriod: MintPeriod;
    mintPeriodId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  requestMint: ({
    periodId,
    whitelistProof
  }: {
    periodId: number;
    whitelistProof?: WhitelistProof;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claim: ({
    merkleProof,
    metadata,
    tokenId
  }: {
    merkleProof: string;
    metadata: Metadata;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class NftTr721Client extends NftTr721QueryClient implements NftTr721Interface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.transferNft = this.transferNft.bind(this);
    this.sendNft = this.sendNft.bind(this);
    this.approve = this.approve.bind(this);
    this.approveAll = this.approveAll.bind(this);
    this.revoke = this.revoke.bind(this);
    this.revokeAll = this.revokeAll.bind(this);
    this.mint = this.mint.bind(this);
    this.updateMintInfo = this.updateMintInfo.bind(this);
    this.updateMintPeriod = this.updateMintPeriod.bind(this);
    this.requestMint = this.requestMint.bind(this);
    this.claim = this.claim.bind(this);
  }

  transferNft = async ({
    recipient,
    tokenId
  }: {
    recipient: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_nft: {
        recipient,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  sendNft = async ({
    contract,
    msg,
    tokenId
  }: {
    contract: string;
    msg: Binary;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      send_nft: {
        contract,
        msg,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  approve = async ({
    expires,
    spender,
    tokenId
  }: {
    expires?: Expiration;
    spender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      approve: {
        expires,
        spender,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  approveAll = async ({
    expires,
    operator
  }: {
    expires?: Expiration;
    operator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      approve_all: {
        expires,
        operator
      }
    }, fee, memo, _funds);
  };
  revoke = async ({
    spender,
    tokenId
  }: {
    spender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revoke: {
        spender,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  revokeAll = async ({
    operator
  }: {
    operator: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      revoke_all: {
        operator
      }
    }, fee, memo, _funds);
  };
  mint = async ({
    extension,
    owner,
    tokenId,
    tokenUri
  }: {
    extension?: Metadata;
    owner: string;
    tokenId: string;
    tokenUri?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint: {
        extension,
        owner,
        token_id: tokenId,
        token_uri: tokenUri
      }
    }, fee, memo, _funds);
  };
  updateMintInfo = async ({
    mintInfo
  }: {
    mintInfo: MintInfo;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_mint_info: {
        mint_info: mintInfo
      }
    }, fee, memo, _funds);
  };
  updateMintPeriod = async ({
    mintPeriod,
    mintPeriodId
  }: {
    mintPeriod: MintPeriod;
    mintPeriodId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_mint_period: {
        mint_period: mintPeriod,
        mint_period_id: mintPeriodId
      }
    }, fee, memo, _funds);
  };
  requestMint = async ({
    periodId,
    whitelistProof
  }: {
    periodId: number;
    whitelistProof?: WhitelistProof;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      request_mint: {
        period_id: periodId,
        whitelist_proof: whitelistProof
      }
    }, fee, memo, _funds);
  };
  claim = async ({
    merkleProof,
    metadata,
    tokenId
  }: {
    merkleProof: string;
    metadata: Metadata;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {
        merkle_proof: merkleProof,
        metadata,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
}