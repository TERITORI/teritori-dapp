//@ts-nocheck

/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.25.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  UseQueryOptions,
  useQuery,
  useMutation,
  UseMutationOptions,
} from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import {
  Addr,
  Config,
  ExecuteMsg,
  Uint128,
  InstantiateMsg,
  PostCategory,
  PostResult,
  Reaction,
  Post,
  QueryMsg,
} from "./TeritoriSocialFeed.types";
import {
  TeritoriSocialFeedQueryClient,
  TeritoriSocialFeedClient,
} from "./TeritoriSocialFeed.client";
export const teritoriSocialFeedQueryKeys = {
  contract: [
    {
      contract: "teritoriSocialFeed",
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [
      { ...teritoriSocialFeedQueryKeys.contract[0], address: contractAddress },
    ] as const,
  config: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...teritoriSocialFeedQueryKeys.address(contractAddress)[0],
        method: "config",
        args,
      },
    ] as const,
  queryFeeByCategory: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...teritoriSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_fee_by_category",
        args,
      },
    ] as const,
  queryLockedTokens: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...teritoriSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_locked_tokens",
        args,
      },
    ] as const,
  queryAvailableFreePosts: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...teritoriSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_available_free_posts",
        args,
      },
    ] as const,
  queryPost: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...teritoriSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_post",
        args,
      },
    ] as const,
  querySubPost: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...teritoriSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_sub_post",
        args,
      },
    ] as const,
  querySubPosts: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...teritoriSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_sub_posts",
        args,
      },
    ] as const,
  queryMainPosts: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...teritoriSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_main_posts",
        args,
      },
    ] as const,
  queryMainPostsCount: (
    contractAddress: string | undefined,
    args?: Record<string, unknown>
  ) =>
    [
      {
        ...teritoriSocialFeedQueryKeys.address(contractAddress)[0],
        method: "query_main_posts_count",
        args,
      },
    ] as const,
};
export interface TeritoriSocialFeedReactQuery<TResponse, TData = TResponse> {
  client: TeritoriSocialFeedQueryClient | undefined;
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined;
  };
}
export interface TeritoriSocialFeedQueryMainPostsCountQuery<TData>
  extends TeritoriSocialFeedReactQuery<QueryMainPostsCountResponse, TData> {}
export function useTeritoriSocialFeedQueryMainPostsCountQuery<
  TData = QueryMainPostsCountResponse
>({ client, options }: TeritoriSocialFeedQueryMainPostsCountQuery<TData>) {
  return useQuery<QueryMainPostsCountResponse, Error, TData>(
    teritoriSocialFeedQueryKeys.queryMainPostsCount(client?.contractAddress),
    () =>
      client
        ? client.queryMainPostsCount()
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface TeritoriSocialFeedQueryMainPostsQuery<TData>
  extends TeritoriSocialFeedReactQuery<QueryMainPostsResponse, TData> {
  args: {
    count: number;
    from: number;
    sort: string;
    user?: string;
  };
}
export function useTeritoriSocialFeedQueryMainPostsQuery<
  TData = QueryMainPostsResponse
>({ client, args, options }: TeritoriSocialFeedQueryMainPostsQuery<TData>) {
  return useQuery<QueryMainPostsResponse, Error, TData>(
    teritoriSocialFeedQueryKeys.queryMainPosts(client?.contractAddress, args),
    () =>
      client
        ? client.queryMainPosts({
            count: args.count,
            from: args.from,
            sort: args.sort,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface TeritoriSocialFeedQuerySubPostsQuery<TData>
  extends TeritoriSocialFeedReactQuery<QuerySubPostsResponse, TData> {
  args: {
    count: number;
    from: number;
    identifier: string;
    sort: string;
    user?: string;
  };
}
export function useTeritoriSocialFeedQuerySubPostsQuery<
  TData = QuerySubPostsResponse
>({ client, args, options }: TeritoriSocialFeedQuerySubPostsQuery<TData>) {
  return useQuery<QuerySubPostsResponse, Error, TData>(
    teritoriSocialFeedQueryKeys.querySubPosts(client?.contractAddress, args),
    () =>
      client
        ? client.querySubPosts({
            count: args.count,
            from: args.from,
            identifier: args.identifier,
            sort: args.sort,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface TeritoriSocialFeedQuerySubPostQuery<TData>
  extends TeritoriSocialFeedReactQuery<QuerySubPostResponse, TData> {
  args: {
    identifier: string;
    index: number;
    user?: string;
  };
}
export function useTeritoriSocialFeedQuerySubPostQuery<
  TData = QuerySubPostResponse
>({ client, args, options }: TeritoriSocialFeedQuerySubPostQuery<TData>) {
  return useQuery<QuerySubPostResponse, Error, TData>(
    teritoriSocialFeedQueryKeys.querySubPost(client?.contractAddress, args),
    () =>
      client
        ? client.querySubPost({
            identifier: args.identifier,
            index: args.index,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface TeritoriSocialFeedQueryPostQuery<TData>
  extends TeritoriSocialFeedReactQuery<QueryPostResponse, TData> {
  args: {
    identifier: string;
    user?: string;
  };
}
export function useTeritoriSocialFeedQueryPostQuery<TData = QueryPostResponse>({
  client,
  args,
  options,
}: TeritoriSocialFeedQueryPostQuery<TData>) {
  return useQuery<QueryPostResponse, Error, TData>(
    teritoriSocialFeedQueryKeys.queryPost(client?.contractAddress, args),
    () =>
      client
        ? client.queryPost({
            identifier: args.identifier,
            user: args.user,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface TeritoriSocialFeedQueryAvailableFreePostsQuery<TData>
  extends TeritoriSocialFeedReactQuery<QueryAvailableFreePostsResponse, TData> {
  args: {
    wallet: string;
  };
}
export function useTeritoriSocialFeedQueryAvailableFreePostsQuery<
  TData = QueryAvailableFreePostsResponse
>({
  client,
  args,
  options,
}: TeritoriSocialFeedQueryAvailableFreePostsQuery<TData>) {
  return useQuery<QueryAvailableFreePostsResponse, Error, TData>(
    teritoriSocialFeedQueryKeys.queryAvailableFreePosts(
      client?.contractAddress,
      args
    ),
    () =>
      client
        ? client.queryAvailableFreePosts({
            wallet: args.wallet,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface TeritoriSocialFeedQueryLockedTokensQuery<TData>
  extends TeritoriSocialFeedReactQuery<QueryLockedTokensResponse, TData> {
  args: {
    wallet: string;
  };
}
export function useTeritoriSocialFeedQueryLockedTokensQuery<
  TData = QueryLockedTokensResponse
>({ client, args, options }: TeritoriSocialFeedQueryLockedTokensQuery<TData>) {
  return useQuery<QueryLockedTokensResponse, Error, TData>(
    teritoriSocialFeedQueryKeys.queryLockedTokens(
      client?.contractAddress,
      args
    ),
    () =>
      client
        ? client.queryLockedTokens({
            wallet: args.wallet,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface TeritoriSocialFeedQueryFeeByCategoryQuery<TData>
  extends TeritoriSocialFeedReactQuery<QueryFeeByCategoryResponse, TData> {
  args: {
    category: number;
  };
}
export function useTeritoriSocialFeedQueryFeeByCategoryQuery<
  TData = QueryFeeByCategoryResponse
>({ client, args, options }: TeritoriSocialFeedQueryFeeByCategoryQuery<TData>) {
  return useQuery<QueryFeeByCategoryResponse, Error, TData>(
    teritoriSocialFeedQueryKeys.queryFeeByCategory(
      client?.contractAddress,
      args
    ),
    () =>
      client
        ? client.queryFeeByCategory({
            category: args.category,
          })
        : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface TeritoriSocialFeedConfigQuery<TData>
  extends TeritoriSocialFeedReactQuery<ConfigResponse, TData> {}
export function useTeritoriSocialFeedConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: TeritoriSocialFeedConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    teritoriSocialFeedQueryKeys.config(client?.contractAddress),
    () =>
      client ? client.config() : Promise.reject(new Error("Invalid client")),
    {
      ...options,
      enabled:
        !!client && (options?.enabled != undefined ? options.enabled : true),
    }
  );
}
export interface TeritoriSocialFeedCreatePostByBotMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    category: number;
    identifier: string;
    metadata: string;
    parentPostIdentifier?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedCreatePostByBotMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedCreatePostByBotMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    TeritoriSocialFeedCreatePostByBotMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.createPostByBot(msg, fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedAddAIBotMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    addr: Addr;
    name: string;
    postLimit: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedAddAIBotMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedAddAIBotMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, TeritoriSocialFeedAddAIBotMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.addAIBot(msg, fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedWithdrawFundMutation {
  client: TeritoriSocialFeedClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedWithdrawFundMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedWithdrawFundMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    TeritoriSocialFeedWithdrawFundMutation
  >(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.withdrawFund(fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedUnlockTokensMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    amount: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedUnlockTokensMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedUnlockTokensMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    TeritoriSocialFeedUnlockTokensMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.unlockTokens(msg, fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedLockTokensMutation {
  client: TeritoriSocialFeedClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedLockTokensMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedLockTokensMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    TeritoriSocialFeedLockTokensMutation
  >(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.lockTokens(fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedDeletePostMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    identifier: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedDeletePostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedDeletePostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    TeritoriSocialFeedDeletePostMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.deletePost(msg, fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedTipPostMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    identifier: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedTipPostMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, TeritoriSocialFeedTipPostMutation>,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, TeritoriSocialFeedTipPostMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.tipPost(msg, fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedReactPostMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    icon: string;
    identifier: string;
    up: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedReactPostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedReactPostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<ExecuteResult, Error, TeritoriSocialFeedReactPostMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.reactPost(msg, fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedUpdatePostMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    category: number;
    identifier: string;
    metadata: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedUpdatePostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedUpdatePostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    TeritoriSocialFeedUpdatePostMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updatePost(msg, fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedCreatePostMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    category: number;
    identifier: string;
    metadata: string;
    parentPostIdentifier?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedCreatePostMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedCreatePostMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    TeritoriSocialFeedCreatePostMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.createPost(msg, fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedAddFreePostsMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    freeCount: Uint128;
    wallets: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedAddFreePostsMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedAddFreePostsMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    TeritoriSocialFeedAddFreePostsMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.addFreePosts(msg, fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedUpdateFeeByCategoryMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    category: number;
    fee: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedUpdateFeeByCategoryMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedUpdateFeeByCategoryMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    TeritoriSocialFeedUpdateFeeByCategoryMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateFeeByCategory(msg, fee, memo, funds),
    options
  );
}
export interface TeritoriSocialFeedUpdateConfigMutation {
  client: TeritoriSocialFeedClient;
  msg: {
    owner?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTeritoriSocialFeedUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<
      ExecuteResult,
      Error,
      TeritoriSocialFeedUpdateConfigMutation
    >,
    "mutationFn"
  >
) {
  return useMutation<
    ExecuteResult,
    Error,
    TeritoriSocialFeedUpdateConfigMutation
  >(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options
  );
}
