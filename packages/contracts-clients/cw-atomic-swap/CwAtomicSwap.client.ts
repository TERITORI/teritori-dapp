/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ExecMsg, QueryMsg, QueryMsg1, Bound, Order, Addr, Timestamp, Uint64, SwapState, Uint128, ListSwapsResult, AtomicSwap, SwapStateRedeemed, SwapStateRefunded, Coin } from "./CwAtomicSwap.types";
export interface CwAtomicSwapReadOnlyInterface {
  contractAddress: string;
  admin: () => Promise<Addr>;
  swaps: ({
    limit,
    max,
    min,
    order
  }: {
    limit?: number;
    max?: Bound;
    min?: Bound;
    order?: Order;
  }) => Promise<ListSwapsResult>;
}
export class CwAtomicSwapQueryClient implements CwAtomicSwapReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.admin = this.admin.bind(this);
    this.swaps = this.swaps.bind(this);
  }

  admin = async (): Promise<Addr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      admin: {}
    });
  };
  swaps = async ({
    limit,
    max,
    min,
    order
  }: {
    limit?: number;
    max?: Bound;
    min?: Bound;
    order?: Order;
  }): Promise<ListSwapsResult> => {
    return this.client.queryContractSmart(this.contractAddress, {
      swaps: {
        limit,
        max,
        min,
        order
      }
    });
  };
}
export interface CwAtomicSwapInterface extends CwAtomicSwapReadOnlyInterface {
  contractAddress: string;
  sender: string;
  create: ({
    destination,
    hashlock,
    timelock
  }: {
    destination: string;
    hashlock: string;
    timelock: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  redeem: ({
    id,
    preimage
  }: {
    id: number;
    preimage: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  refund: ({
    id
  }: {
    id: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  changeAdmin: ({
    addr
  }: {
    addr: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class CwAtomicSwapClient extends CwAtomicSwapQueryClient implements CwAtomicSwapInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.create = this.create.bind(this);
    this.redeem = this.redeem.bind(this);
    this.refund = this.refund.bind(this);
    this.changeAdmin = this.changeAdmin.bind(this);
  }

  create = async ({
    destination,
    hashlock,
    timelock
  }: {
    destination: string;
    hashlock: string;
    timelock: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create: {
        destination,
        hashlock,
        timelock
      }
    }, fee, memo, _funds);
  };
  redeem = async ({
    id,
    preimage
  }: {
    id: number;
    preimage: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      redeem: {
        id,
        preimage
      }
    }, fee, memo, _funds);
  };
  refund = async ({
    id
  }: {
    id: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      refund: {
        id
      }
    }, fee, memo, _funds);
  };
  changeAdmin = async ({
    addr
  }: {
    addr: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_admin: {
        addr
      }
    }, fee, memo, _funds);
  };
}