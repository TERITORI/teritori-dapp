/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, ExecMsg, QueryMsg, QueryMsg1, Addr, ArrayOfTupleOfUint64AndAddr, Info, Config, Uint16 } from "./Rakki.types";
export interface RakkiReadOnlyInterface {
  contractAddress: string;
  info: () => Promise<Info>;
  history: ({
    cursor,
    limit
  }: {
    cursor?: number;
    limit: number;
  }) => Promise<ArrayOfTupleOfUint64AndAddr>;
  ticketsCountByUser: ({
    userAddr
  }: {
    userAddr: string;
  }) => Promise<Uint16>;
}
export class RakkiQueryClient implements RakkiReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.info = this.info.bind(this);
    this.history = this.history.bind(this);
    this.ticketsCountByUser = this.ticketsCountByUser.bind(this);
  }

  info = async (): Promise<Info> => {
    return this.client.queryContractSmart(this.contractAddress, {
      info: {}
    });
  };
  history = async ({
    cursor,
    limit
  }: {
    cursor?: number;
    limit: number;
  }): Promise<ArrayOfTupleOfUint64AndAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      history: {
        cursor,
        limit
      }
    });
  };
  ticketsCountByUser = async ({
    userAddr
  }: {
    userAddr: string;
  }): Promise<Uint16> => {
    return this.client.queryContractSmart(this.contractAddress, {
      tickets_count_by_user: {
        user_addr: userAddr
      }
    });
  };
}
export interface RakkiInterface extends RakkiReadOnlyInterface {
  contractAddress: string;
  sender: string;
  buyTickets: ({
    count
  }: {
    count: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawFees: ({
    destination
  }: {
    destination: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  stop: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  refund: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  changeOwner: ({
    newOwner
  }: {
    newOwner: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RakkiClient extends RakkiQueryClient implements RakkiInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.buyTickets = this.buyTickets.bind(this);
    this.withdrawFees = this.withdrawFees.bind(this);
    this.stop = this.stop.bind(this);
    this.refund = this.refund.bind(this);
    this.changeOwner = this.changeOwner.bind(this);
  }

  buyTickets = async ({
    count
  }: {
    count: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      buy_tickets: {
        count
      }
    }, fee, memo, _funds);
  };
  withdrawFees = async ({
    destination
  }: {
    destination: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_fees: {
        destination
      }
    }, fee, memo, _funds);
  };
  stop = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      stop: {}
    }, fee, memo, _funds);
  };
  refund = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      refund: {}
    }, fee, memo, _funds);
  };
  changeOwner = async ({
    newOwner
  }: {
    newOwner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      change_owner: {
        new_owner: newOwner
      }
    }, fee, memo, _funds);
  };
}