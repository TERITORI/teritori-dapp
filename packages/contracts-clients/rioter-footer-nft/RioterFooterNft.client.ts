/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, ConfigResponse, Config, ExecuteMsg, Uint128, NftPosition, FeeConfig, InstantiateMsg, MapSize, NftData, QueryFeeConfigResponse, QueryMapSizeResponse, QueryMsg, QueryNftCountResponse, QueryNftsResponse } from "./RioterFooterNft.types";
export interface RioterFooterNftReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  queryFeeConfig: () => Promise<QueryFeeConfigResponse>;
  queryMapSize: () => Promise<QueryMapSizeResponse>;
  queryNftCount: () => Promise<QueryNftCountResponse>;
  queryNfts: ({
    from,
    to
  }: {
    from: number;
    to: number;
  }) => Promise<QueryNftsResponse>;
}
export class RioterFooterNftQueryClient implements RioterFooterNftReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.queryFeeConfig = this.queryFeeConfig.bind(this);
    this.queryMapSize = this.queryMapSize.bind(this);
    this.queryNftCount = this.queryNftCount.bind(this);
    this.queryNfts = this.queryNfts.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  queryFeeConfig = async (): Promise<QueryFeeConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_fee_config: {}
    });
  };
  queryMapSize = async (): Promise<QueryMapSizeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_map_size: {}
    });
  };
  queryNftCount = async (): Promise<QueryNftCountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_nft_count: {}
    });
  };
  queryNfts = async ({
    from,
    to
  }: {
    from: number;
    to: number;
  }): Promise<QueryNftsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_nfts: {
        from,
        to
      }
    });
  };
}
export interface RioterFooterNftInterface extends RioterFooterNftReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    owner
  }: {
    owner: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateFeeConfig: ({
    feePerSize
  }: {
    feePerSize: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateMapSize: ({
    height,
    width
  }: {
    height: Uint128;
    width: Uint128;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  setWhitelistedCollection: ({
    collection,
    whitelist
  }: {
    collection: string;
    whitelist: boolean;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  addMyNft: ({
    additional,
    contractAddress,
    position,
    tokenId
  }: {
    additional: string;
    contractAddress: string;
    position: NftPosition;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class RioterFooterNftClient extends RioterFooterNftQueryClient implements RioterFooterNftInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.updateFeeConfig = this.updateFeeConfig.bind(this);
    this.updateMapSize = this.updateMapSize.bind(this);
    this.setWhitelistedCollection = this.setWhitelistedCollection.bind(this);
    this.addMyNft = this.addMyNft.bind(this);
  }

  updateConfig = async ({
    owner
  }: {
    owner: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        owner
      }
    }, fee, memo, funds);
  };
  updateFeeConfig = async ({
    feePerSize
  }: {
    feePerSize: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_fee_config: {
        fee_per_size: feePerSize
      }
    }, fee, memo, funds);
  };
  updateMapSize = async ({
    height,
    width
  }: {
    height: Uint128;
    width: Uint128;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_map_size: {
        height,
        width
      }
    }, fee, memo, funds);
  };
  setWhitelistedCollection = async ({
    collection,
    whitelist
  }: {
    collection: string;
    whitelist: boolean;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_whitelisted_collection: {
        collection,
        whitelist
      }
    }, fee, memo, funds);
  };
  addMyNft = async ({
    additional,
    contractAddress,
    position,
    tokenId
  }: {
    additional: string;
    contractAddress: string;
    position: NftPosition;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_my_nft: {
        additional,
        contract_address: contractAddress,
        position,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
}