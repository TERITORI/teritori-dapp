/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { DaoCoreConfig, ProposalModule, TokenHolder, DaoMember } from "./TeritoriDaoCore.types";
export interface TeritoriDaoCoreReadOnlyInterface {
  contractAddress: string;
  config: ()=> Promise<DaoCoreConfig>;
  proposalModules: () => Promise<ProposalModule[]>;
}
export class TeritoriDaoCoreQueryClient implements TeritoriDaoCoreReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.proposalModules = this.proposalModules.bind(this);
  }

  config = async ():Promise<DaoCoreConfig> =>{
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  }

  proposalModules = async ():Promise<ProposalModule[]> =>{
  	return this.client.queryContractSmart(this.contractAddress, {
      proposal_modules: {}
    });
  }
}

export interface TeritoriDaoCoreInterface extends TeritoriDaoCoreReadOnlyInterface {
  contractAddress: string;
  sender: string;  
  createDaoTokenBased:({
    daoPreProposeSingleCodeId,
    daoProposalSingleCodeId,
    daoCw20CodeId,
    daoCw20StakeCodeId,
    daoVotingCw20StakedCodeId,
    daoCoreCodeId,
    name,
    description,
    tns,
    imageUrl,
    tokenName,
    tokenSymbol,
    tokenHolders,
    quorum,
    threshold,
    maxVotingPeriod,
  }:{
    daoPreProposeSingleCodeId: number,
    daoProposalSingleCodeId: number,
    daoCw20CodeId: number,
    daoCw20StakeCodeId: number,
    daoVotingCw20StakedCodeId: number,
    daoCoreCodeId: number,
    name: string;
    description: string;
    tns: string;
    imageUrl: string;
    tokenHolders: TokenHolder[],
    tokenName: string;
    tokenSymbol: string;
    quorum: string;
    threshold: string;
    maxVotingPeriod: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[])=>Promise<ExecuteResult>;

  createDaoMemberBased:({
    daoCoreCodeId,
    daoPreProposeSingleCodeId,
    daoProposalSingleCodeId,
    daoCw4GroupCodeId,
    daoVotingCw4CodeId,
    name,
    description,
    tns,
    imageUrl,
    members,
    quorum,
    threshold,
    maxVotingPeriod,
  }:{
    daoCoreCodeId: number,
    daoPreProposeSingleCodeId: number,
    daoProposalSingleCodeId: number,
    daoCw4GroupCodeId: number,
    daoVotingCw4CodeId: number,
    name: string;
    description: string;
    tns: string;
    imageUrl: string;
    members: DaoMember[],
    quorum: string;
    threshold: string;
    maxVotingPeriod: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[])=>Promise<ExecuteResult>;
}

export class TeritoriDaoCoreClient extends TeritoriDaoCoreQueryClient implements TeritoriDaoCoreInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress
    this.createDaoTokenBased = this.createDaoTokenBased.bind(this);
    this.createDaoMemberBased = this.createDaoMemberBased.bind(this);
  }

  createDaoTokenBased = async (
  {
    daoPreProposeSingleCodeId,
    daoProposalSingleCodeId,
    daoCw20CodeId,
    daoCw20StakeCodeId,
    daoVotingCw20StakedCodeId,
    daoCoreCodeId,
    name,
    description,
    tns,
    imageUrl,
    tokenName,
    tokenSymbol,
    tokenHolders,
    quorum,
    threshold,
    maxVotingPeriod,
  }:{
    daoPreProposeSingleCodeId: number;
    daoProposalSingleCodeId: number;
    daoCw20CodeId: number;
    daoCw20StakeCodeId: number;
    daoVotingCw20StakedCodeId: number;
    daoCoreCodeId: number;
    name: string;
    description: string;
    tns: string;
    imageUrl: string;
    tokenHolders: TokenHolder[];
    quorum: string;
    maxVotingPeriod: number;
    threshold: string;
    tokenName: string;
    tokenSymbol: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]):Promise<ExecuteResult> =>{

    const dao_pre_propose_single_msg = {
      deposit_info: null,
      extension: {},
      open_proposal_submission: false,
    };
    const dao_proposal_single_msg = {
      threshold: {
        threshold_quorum: {
          quorum: { percent: quorum },
          threshold: {
            percent: threshold,
          },
        },
      },
      max_voting_period: {
        time: maxVotingPeriod
      },
      min_voting_period: null,
      only_members_execute: true, // need to fix
      allow_revoting: false,
      close_proposal_on_execution_failure: true,
      pre_propose_info: {
        module_may_propose: {
          info: {
            code_id: daoPreProposeSingleCodeId,
            msg: Buffer.from(
              JSON.stringify(dao_pre_propose_single_msg)
            ).toString("base64"),
            admin: { core_module: {} },
            label: `DAO_${name}_pre-propose-DaoProposalSingle`,
          },
        },
      },
    };
    const proposal_modules_instantiate_info = [
      {
        admin: { core_module: {} },
        code_id: daoProposalSingleCodeId,
        label: `DAO_${name}_DAOProposalSingle`,
        msg: Buffer.from(JSON.stringify(dao_proposal_single_msg)).toString(
          "base64"
        ),
      },
    ];

    const dao_voting_cw20_staked_msg = {
      token_info: {
        new: {
          code_id: daoCw20CodeId,
          decimals: 6,
          initial_balances: tokenHolders,
          initial_dao_balance: null,
          label: tokenName,
          name: tokenName,
          symbol: tokenSymbol,
          staking_code_id: daoCw20StakeCodeId,
          unstaking_duration: null,
        },
      },
    };

    const voting_module_instantiate_info = {
      admin: { core_module: {} },
      code_id: daoVotingCw20StakedCodeId,
      label: `DAO_${name}_DaoVotingCw20Staked`,
      msg: Buffer.from(JSON.stringify(dao_voting_cw20_staked_msg)).toString(
        "base64"
      ),
    };

    const dao_core_instantiate_msg = {
      admin: null,
      automatically_add_cw20s: true,
      automatically_add_cw721s: true,
      name,
      description,
      tns,
      image_url: imageUrl,
      proposal_modules_instantiate_info,
      voting_module_instantiate_info,
    };
    const instantiate_msg = Buffer.from(
      JSON.stringify(dao_core_instantiate_msg)
    ).toString("base64");

    return await this.client.execute( this.sender, this.contractAddress, {
      instantiate_contract_with_self_admin:{
          code_id: daoCoreCodeId,
          instantiate_msg,
          label: name
      }
    }, fee, memo, funds);
  }

  createDaoMemberBased = async (
  {
    daoCoreCodeId,
    daoPreProposeSingleCodeId,
    daoProposalSingleCodeId,
    daoCw4GroupCodeId,
    daoVotingCw4CodeId,
    name,
    description,
    tns,
    imageUrl,
    members,
    quorum,
    threshold,
    maxVotingPeriod,
  }:{
    daoCoreCodeId: number;
    daoPreProposeSingleCodeId: number;
    daoProposalSingleCodeId: number;
    daoCw4GroupCodeId: number;
    daoVotingCw4CodeId: number;
    name: string;
    description: string;
    tns: string;
    imageUrl: string;
    members: DaoMember[];
    quorum: string;
    maxVotingPeriod: number;
    threshold: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]):Promise<ExecuteResult> =>{

    const dao_pre_propose_single_msg = {
      deposit_info: null,
      extension: {},
      open_proposal_submission: false,
    };
    const dao_proposal_single_msg = {
      threshold: {
        threshold_quorum: {
          quorum: { percent: quorum },
          threshold: {
            percent: threshold,
          },
        },
      },
      max_voting_period: {
        time: maxVotingPeriod
      },
      min_voting_period: null,
      only_members_execute: true, // need to fix
      allow_revoting: false,
      close_proposal_on_execution_failure: true,
      pre_propose_info: {
        module_may_propose: {
          info: {
            code_id: daoPreProposeSingleCodeId,
            msg: Buffer.from(
              JSON.stringify(dao_pre_propose_single_msg)
            ).toString("base64"),
            admin: { core_module: {} },
            label: `DAO_${name}_pre-propose-DaoProposalSingle`,
          },
        },
      },
    };
    const proposal_modules_instantiate_info = [
      {
        admin: { core_module: {} },
        code_id: daoProposalSingleCodeId,
        label: `DAO_${name}_DAOProposalSingle`,
        msg: Buffer.from(JSON.stringify(dao_proposal_single_msg)).toString(
          "base64"
        ),
      },
    ];

    const dao_voting_cw4_msg = {
        cw4_group_code_id: daoCw4GroupCodeId,
        initial_members: members
    };

    const voting_module_instantiate_info = {
      admin: { core_module: {} },
      code_id: daoVotingCw4CodeId,
      label: `DAO_${name}_DaoVotingCw4`,
      msg: Buffer.from(JSON.stringify(dao_voting_cw4_msg)).toString(
        "base64"
      ),
    };

    const dao_core_instantiate_msg = {
      admin: null,
      automatically_add_cw20s: true,
      automatically_add_cw721s: true,
      name,
      description,
      tns,
      image_url: imageUrl,
      proposal_modules_instantiate_info,
      voting_module_instantiate_info,
    };
    const instantiate_msg = Buffer.from(
      JSON.stringify(dao_core_instantiate_msg)
    ).toString("base64");

    return await this.client.execute( this.sender, this.contractAddress, {
      instantiate_contract_with_self_admin:{
          code_id: daoCoreCodeId,
          instantiate_msg,
          label: name
      }
    }, fee, memo, funds);
  }
}