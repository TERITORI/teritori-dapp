/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { ProposalData } from "./TeritoriDaoProposal.types";
import { ModuleAddr } from "./TeritoriDaoCore.types";

export interface TeritoriDaoProposalReadOnlyInterface {
  contractAddress: string;
  listProposals: () => Promise<ProposalData>;
  proposalCreationPolicy: ()=> Promise<ModuleAddr>;
}
export class TeritoriDaoProposalQueryClient implements TeritoriDaoProposalReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.listProposals = this.listProposals.bind(this);
  }
  listProposals = async ():Promise<ProposalData> =>{
    return await this.client.queryContractSmart(this.contractAddress, {
      list_proposals: {}
    });
  }

  proposalCreationPolicy = async (): Promise<ModuleAddr> =>{
    return await this.client.queryContractSmart(this.contractAddress, {
      proposal_creation_policy:{}
    });
  }
}

export interface TeritoriDaoProposalInterface extends TeritoriDaoProposalReadOnlyInterface {
  contractAddress: string;
  sender: string;
  vote:({
    proposalId,
    vote,
  }:{
    proposalId: number;
    vote: string;
  },  fee?: number | StdFee | "auto", memo?: string, funds?: Coin[])=>Promise<ExecuteResult>;
  execute: ({
    proposalId,
  }: {proposalId: number}, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[])=>Promise<ExecuteResult>;
}

export class TeritoriDaoProposalClient extends TeritoriDaoProposalQueryClient implements TeritoriDaoProposalInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress
    this.vote = this.vote.bind(this);
  }

  vote = async ({
    proposalId,
    vote
  }: {
    proposalId: number,
    vote: string
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]):Promise<ExecuteResult> =>{
    return await this.client.execute( this.sender, this.contractAddress, {
      vote:{
          proposal_id: proposalId,
          vote
      }
    }, fee, memo, funds);
  }

  execute = async ({
    proposalId,
  }: {proposalId: number}, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]) =>{
    return await this.client.execute( this.sender, this.contractAddress, {
      execute:{
          proposal_id: proposalId,
      }
    }, fee, memo, funds);
  }
}
