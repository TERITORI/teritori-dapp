/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NFTValueInterface extends ethers.utils.Interface {
  functions: {
    "buyNFT(address,uint256)": FunctionFragment;
    "listNFT(address,uint256,tuple)": FunctionFragment;
    "nftSales(address,uint256)": FunctionFragment;
    "updateSaleOption(address,uint256,tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listNFT",
    values: [string, BigNumberish, { token: string; amount: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "nftSales",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSaleOption",
    values: [string, BigNumberish, { token: string; amount: BigNumberish }]
  ): string;

  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftSales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateSaleOption",
    data: BytesLike
  ): Result;

  events: {
    "BuyNFT(address,address,uint256)": EventFragment;
    "ListNFT(address,address,uint256,tuple)": EventFragment;
    "UpdateSaleOption(address,address,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ListNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateSaleOption"): EventFragment;
}

export class NFTValue extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTValueInterface;

  functions: {
    buyNFT(
      nft: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    listNFT(
      nft: string,
      tokenId: BigNumberish,
      saleOption: { token: string; amount: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nftSales(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, [string, BigNumber] & { token: string; amount: BigNumber }] & {
        owner: string;
        saleOption: [string, BigNumber] & { token: string; amount: BigNumber };
      }
    >;

    updateSaleOption(
      nft: string,
      tokenId: BigNumberish,
      saleOption: { token: string; amount: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  buyNFT(
    nft: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  listNFT(
    nft: string,
    tokenId: BigNumberish,
    saleOption: { token: string; amount: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nftSales(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, [string, BigNumber] & { token: string; amount: BigNumber }] & {
      owner: string;
      saleOption: [string, BigNumber] & { token: string; amount: BigNumber };
    }
  >;

  updateSaleOption(
    nft: string,
    tokenId: BigNumberish,
    saleOption: { token: string; amount: BigNumberish },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyNFT(
      nft: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    listNFT(
      nft: string,
      tokenId: BigNumberish,
      saleOption: { token: string; amount: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    nftSales(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, [string, BigNumber] & { token: string; amount: BigNumber }] & {
        owner: string;
        saleOption: [string, BigNumber] & { token: string; amount: BigNumber };
      }
    >;

    updateSaleOption(
      nft: string,
      tokenId: BigNumberish,
      saleOption: { token: string; amount: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BuyNFT(
      buyer?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { buyer: string; nft: string; tokenId: BigNumber }
    >;

    ListNFT(
      owner?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      saleOption?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        [string, BigNumber] & { token: string; amount: BigNumber }
      ],
      {
        owner: string;
        nft: string;
        tokenId: BigNumber;
        saleOption: [string, BigNumber] & { token: string; amount: BigNumber };
      }
    >;

    UpdateSaleOption(
      owner?: string | null,
      nft?: string | null,
      tokenId?: BigNumberish | null,
      saleOption?: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        [string, BigNumber] & { token: string; amount: BigNumber }
      ],
      {
        owner: string;
        nft: string;
        tokenId: BigNumber;
        saleOption: [string, BigNumber] & { token: string; amount: BigNumber };
      }
    >;
  };

  estimateGas: {
    buyNFT(
      nft: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    listNFT(
      nft: string,
      tokenId: BigNumberish,
      saleOption: { token: string; amount: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nftSales(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateSaleOption(
      nft: string,
      tokenId: BigNumberish,
      saleOption: { token: string; amount: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyNFT(
      nft: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    listNFT(
      nft: string,
      tokenId: BigNumberish,
      saleOption: { token: string; amount: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nftSales(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSaleOption(
      nft: string,
      tokenId: BigNumberish,
      saleOption: { token: string; amount: BigNumberish },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
