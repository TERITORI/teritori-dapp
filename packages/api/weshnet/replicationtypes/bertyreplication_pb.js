// source: replicationtypes/bertyreplication.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var gogoproto_gogo_pb = require('../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
var protocoltypes_pb = require('../protocoltypes_pb.js');
goog.object.extend(proto, protocoltypes_pb);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicateGlobalStats', null, global);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicateGlobalStats.Reply', null, global);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicateGlobalStats.Request', null, global);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicateGroupStats', null, global);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicateGroupStats.Reply', null, global);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicateGroupStats.Request', null, global);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicatedGroup', null, global);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicatedGroupToken', null, global);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicationServiceReplicateGroup', null, global);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply', null, global);
goog.exportSymbol('proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicatedGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicatedGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicatedGroup.displayName = 'proto.weshnet.replication.v1.ReplicatedGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicatedGroupToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicatedGroupToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicatedGroupToken.displayName = 'proto.weshnet.replication.v1.ReplicatedGroupToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicationServiceReplicateGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.displayName = 'proto.weshnet.replication.v1.ReplicationServiceReplicateGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.displayName = 'proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.displayName = 'proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicateGlobalStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicateGlobalStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicateGlobalStats.displayName = 'proto.weshnet.replication.v1.ReplicateGlobalStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicateGlobalStats.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicateGlobalStats.Request.displayName = 'proto.weshnet.replication.v1.ReplicateGlobalStats.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicateGlobalStats.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.displayName = 'proto.weshnet.replication.v1.ReplicateGlobalStats.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicateGroupStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicateGroupStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicateGroupStats.displayName = 'proto.weshnet.replication.v1.ReplicateGroupStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicateGroupStats.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicateGroupStats.Request.displayName = 'proto.weshnet.replication.v1.ReplicateGroupStats.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.replication.v1.ReplicateGroupStats.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.replication.v1.ReplicateGroupStats.Reply.displayName = 'proto.weshnet.replication.v1.ReplicateGroupStats.Reply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicatedGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicatedGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicatedGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signPub: jspb.Message.getFieldWithDefault(msg, 2, ""),
    linkKey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 100, 0),
    updatedAt: jspb.Message.getFieldWithDefault(msg, 101, 0),
    metadataEntriesCount: jspb.Message.getFieldWithDefault(msg, 102, 0),
    metadataLatestHead: jspb.Message.getFieldWithDefault(msg, 103, ""),
    messageEntriesCount: jspb.Message.getFieldWithDefault(msg, 104, 0),
    messageLatestHead: jspb.Message.getFieldWithDefault(msg, 105, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup}
 */
proto.weshnet.replication.v1.ReplicatedGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicatedGroup;
  return proto.weshnet.replication.v1.ReplicatedGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicatedGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup}
 */
proto.weshnet.replication.v1.ReplicatedGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignPub(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLinkKey(value);
      break;
    case 100:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatedAt(value);
      break;
    case 102:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMetadataEntriesCount(value);
      break;
    case 103:
      var value = /** @type {string} */ (reader.readString());
      msg.setMetadataLatestHead(value);
      break;
    case 104:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageEntriesCount(value);
      break;
    case 105:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageLatestHead(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicatedGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicatedGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicatedGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignPub();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLinkKey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      100,
      f
    );
  }
  f = message.getUpdatedAt();
  if (f !== 0) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMetadataEntriesCount();
  if (f !== 0) {
    writer.writeInt64(
      102,
      f
    );
  }
  f = message.getMetadataLatestHead();
  if (f.length > 0) {
    writer.writeString(
      103,
      f
    );
  }
  f = message.getMessageEntriesCount();
  if (f !== 0) {
    writer.writeInt64(
      104,
      f
    );
  }
  f = message.getMessageLatestHead();
  if (f.length > 0) {
    writer.writeString(
      105,
      f
    );
  }
};


/**
 * optional string public_key = 1;
 * @return {string}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sign_pub = 2;
 * @return {string}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.getSignPub = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.setSignPub = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string link_key = 3;
 * @return {string}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.getLinkKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.setLinkKey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 created_at = 100;
 * @return {number}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 100, value);
};


/**
 * optional int64 updated_at = 101;
 * @return {number}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.getUpdatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.setUpdatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 101, value);
};


/**
 * optional int64 metadata_entries_count = 102;
 * @return {number}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.getMetadataEntriesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 102, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.setMetadataEntriesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 102, value);
};


/**
 * optional string metadata_latest_head = 103;
 * @return {string}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.getMetadataLatestHead = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 103, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.setMetadataLatestHead = function(value) {
  return jspb.Message.setProto3StringField(this, 103, value);
};


/**
 * optional int64 message_entries_count = 104;
 * @return {number}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.getMessageEntriesCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 104, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.setMessageEntriesCount = function(value) {
  return jspb.Message.setProto3IntField(this, 104, value);
};


/**
 * optional string message_latest_head = 105;
 * @return {string}
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.getMessageLatestHead = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 105, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroup} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroup.prototype.setMessageLatestHead = function(value) {
  return jspb.Message.setProto3StringField(this, 105, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicatedGroupToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicatedGroupToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicatedGroupPublicKey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    replicatedGroup: (f = msg.getReplicatedGroup()) && proto.weshnet.replication.v1.ReplicatedGroup.toObject(includeInstance, f),
    tokenIssuer: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tokenId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    createdAt: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicatedGroupToken}
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicatedGroupToken;
  return proto.weshnet.replication.v1.ReplicatedGroupToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicatedGroupToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicatedGroupToken}
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplicatedGroupPublicKey(value);
      break;
    case 2:
      var value = new proto.weshnet.replication.v1.ReplicatedGroup;
      reader.readMessage(value,proto.weshnet.replication.v1.ReplicatedGroup.deserializeBinaryFromReader);
      msg.setReplicatedGroup(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenIssuer(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicatedGroupToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicatedGroupToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicatedGroupPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReplicatedGroup();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.weshnet.replication.v1.ReplicatedGroup.serializeBinaryToWriter
    );
  }
  f = message.getTokenIssuer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTokenId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getCreatedAt();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string replicated_group_public_key = 1;
 * @return {string}
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.getReplicatedGroupPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroupToken} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.setReplicatedGroupPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ReplicatedGroup replicated_group = 2;
 * @return {?proto.weshnet.replication.v1.ReplicatedGroup}
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.getReplicatedGroup = function() {
  return /** @type{?proto.weshnet.replication.v1.ReplicatedGroup} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.replication.v1.ReplicatedGroup, 2));
};


/**
 * @param {?proto.weshnet.replication.v1.ReplicatedGroup|undefined} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroupToken} returns this
*/
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.setReplicatedGroup = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.replication.v1.ReplicatedGroupToken} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.clearReplicatedGroup = function() {
  return this.setReplicatedGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.hasReplicatedGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string token_issuer = 3;
 * @return {string}
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.getTokenIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroupToken} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.setTokenIssuer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string token_id = 4;
 * @return {string}
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.getTokenId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroupToken} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.setTokenId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 created_at = 5;
 * @return {number}
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.getCreatedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.replication.v1.ReplicatedGroupToken} returns this
 */
proto.weshnet.replication.v1.ReplicatedGroupToken.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicationServiceReplicateGroup;
  return proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && protocoltypes_pb.Group.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request;
  return proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new protocoltypes_pb.Group;
      reader.readMessage(value,protocoltypes_pb.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      protocoltypes_pb.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional weshnet.protocol.v1.Group group = 1;
 * @return {?proto.weshnet.protocol.v1.Group}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.prototype.getGroup = function() {
  return /** @type{?proto.weshnet.protocol.v1.Group} */ (
    jspb.Message.getWrapperField(this, protocoltypes_pb.Group, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.Group|undefined} value
 * @return {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request} returns this
*/
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request} returns this
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Request.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply;
  return proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply} returns this
 */
proto.weshnet.replication.v1.ReplicationServiceReplicateGroup.Reply.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicateGlobalStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicateGlobalStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicateGlobalStats}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicateGlobalStats;
  return proto.weshnet.replication.v1.ReplicateGlobalStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicateGlobalStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicateGlobalStats}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicateGlobalStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicateGlobalStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicateGlobalStats.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicateGlobalStats.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicateGlobalStats.Request}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicateGlobalStats.Request;
  return proto.weshnet.replication.v1.ReplicateGlobalStats.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicateGlobalStats.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicateGlobalStats.Request}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicateGlobalStats.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicateGlobalStats.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicateGlobalStats.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    startedAt: jspb.Message.getFieldWithDefault(msg, 1, 0),
    replicatedGroups: jspb.Message.getFieldWithDefault(msg, 2, 0),
    totalMetadataEntries: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalMessageEntries: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicateGlobalStats.Reply}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicateGlobalStats.Reply;
  return proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicateGlobalStats.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicateGlobalStats.Reply}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartedAt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplicatedGroups(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalMetadataEntries(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalMessageEntries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicateGlobalStats.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartedAt();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getReplicatedGroups();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTotalMetadataEntries();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTotalMessageEntries();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 started_at = 1;
 * @return {number}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.prototype.getStartedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.replication.v1.ReplicateGlobalStats.Reply} returns this
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.prototype.setStartedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 replicated_groups = 2;
 * @return {number}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.prototype.getReplicatedGroups = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.replication.v1.ReplicateGlobalStats.Reply} returns this
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.prototype.setReplicatedGroups = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 total_metadata_entries = 3;
 * @return {number}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.prototype.getTotalMetadataEntries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.replication.v1.ReplicateGlobalStats.Reply} returns this
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.prototype.setTotalMetadataEntries = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 total_message_entries = 4;
 * @return {number}
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.prototype.getTotalMessageEntries = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.replication.v1.ReplicateGlobalStats.Reply} returns this
 */
proto.weshnet.replication.v1.ReplicateGlobalStats.Reply.prototype.setTotalMessageEntries = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicateGroupStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicateGroupStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGroupStats.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicateGroupStats}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicateGroupStats;
  return proto.weshnet.replication.v1.ReplicateGroupStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicateGroupStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicateGroupStats}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicateGroupStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicateGroupStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGroupStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicateGroupStats.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicateGroupStats.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPublicKey: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicateGroupStats.Request}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicateGroupStats.Request;
  return proto.weshnet.replication.v1.ReplicateGroupStats.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicateGroupStats.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicateGroupStats.Request}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicateGroupStats.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicateGroupStats.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPublicKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string group_public_key = 1;
 * @return {string}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Request.prototype.getGroupPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.replication.v1.ReplicateGroupStats.Request} returns this
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Request.prototype.setGroupPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.replication.v1.ReplicateGroupStats.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.replication.v1.ReplicateGroupStats.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.weshnet.replication.v1.ReplicatedGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.replication.v1.ReplicateGroupStats.Reply}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.replication.v1.ReplicateGroupStats.Reply;
  return proto.weshnet.replication.v1.ReplicateGroupStats.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.replication.v1.ReplicateGroupStats.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.replication.v1.ReplicateGroupStats.Reply}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.replication.v1.ReplicatedGroup;
      reader.readMessage(value,proto.weshnet.replication.v1.ReplicatedGroup.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.replication.v1.ReplicateGroupStats.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.replication.v1.ReplicateGroupStats.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.replication.v1.ReplicatedGroup.serializeBinaryToWriter
    );
  }
};


/**
 * optional ReplicatedGroup group = 1;
 * @return {?proto.weshnet.replication.v1.ReplicatedGroup}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Reply.prototype.getGroup = function() {
  return /** @type{?proto.weshnet.replication.v1.ReplicatedGroup} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.replication.v1.ReplicatedGroup, 1));
};


/**
 * @param {?proto.weshnet.replication.v1.ReplicatedGroup|undefined} value
 * @return {!proto.weshnet.replication.v1.ReplicateGroupStats.Reply} returns this
*/
proto.weshnet.replication.v1.ReplicateGroupStats.Reply.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.replication.v1.ReplicateGroupStats.Reply} returns this
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Reply.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.replication.v1.ReplicateGroupStats.Reply.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.weshnet.replication.v1);
