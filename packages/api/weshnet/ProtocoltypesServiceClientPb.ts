/**
 * @fileoverview gRPC-Web generated client stub for weshnet.protocol.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: protocoltypes.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as protocoltypes_pb from './protocoltypes_pb'; // proto import: "protocoltypes.proto"


export class ProtocolServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorServiceExportData = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ServiceExportData',
    grpcWeb.MethodType.SERVER_STREAMING,
    protocoltypes_pb.ServiceExportData.Request,
    protocoltypes_pb.ServiceExportData.Reply,
    (request: protocoltypes_pb.ServiceExportData.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ServiceExportData.Reply.deserializeBinary
  );

  serviceExportData(
    request: protocoltypes_pb.ServiceExportData.Request,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<protocoltypes_pb.ServiceExportData.Reply> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/weshnet.protocol.v1.ProtocolService/ServiceExportData',
      request,
      metadata || {},
      this.methodDescriptorServiceExportData);
  }

  methodDescriptorServiceGetConfiguration = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ServiceGetConfiguration',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ServiceGetConfiguration.Request,
    protocoltypes_pb.ServiceGetConfiguration.Reply,
    (request: protocoltypes_pb.ServiceGetConfiguration.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ServiceGetConfiguration.Reply.deserializeBinary
  );

  serviceGetConfiguration(
    request: protocoltypes_pb.ServiceGetConfiguration.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ServiceGetConfiguration.Reply>;

  serviceGetConfiguration(
    request: protocoltypes_pb.ServiceGetConfiguration.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ServiceGetConfiguration.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ServiceGetConfiguration.Reply>;

  serviceGetConfiguration(
    request: protocoltypes_pb.ServiceGetConfiguration.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ServiceGetConfiguration.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ServiceGetConfiguration',
        request,
        metadata || {},
        this.methodDescriptorServiceGetConfiguration,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ServiceGetConfiguration',
    request,
    metadata || {},
    this.methodDescriptorServiceGetConfiguration);
  }

  methodDescriptorContactRequestReference = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ContactRequestReference',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ContactRequestReference.Request,
    protocoltypes_pb.ContactRequestReference.Reply,
    (request: protocoltypes_pb.ContactRequestReference.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ContactRequestReference.Reply.deserializeBinary
  );

  contactRequestReference(
    request: protocoltypes_pb.ContactRequestReference.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ContactRequestReference.Reply>;

  contactRequestReference(
    request: protocoltypes_pb.ContactRequestReference.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestReference.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ContactRequestReference.Reply>;

  contactRequestReference(
    request: protocoltypes_pb.ContactRequestReference.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestReference.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ContactRequestReference',
        request,
        metadata || {},
        this.methodDescriptorContactRequestReference,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ContactRequestReference',
    request,
    metadata || {},
    this.methodDescriptorContactRequestReference);
  }

  methodDescriptorContactRequestDisable = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ContactRequestDisable',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ContactRequestDisable.Request,
    protocoltypes_pb.ContactRequestDisable.Reply,
    (request: protocoltypes_pb.ContactRequestDisable.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ContactRequestDisable.Reply.deserializeBinary
  );

  contactRequestDisable(
    request: protocoltypes_pb.ContactRequestDisable.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ContactRequestDisable.Reply>;

  contactRequestDisable(
    request: protocoltypes_pb.ContactRequestDisable.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestDisable.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ContactRequestDisable.Reply>;

  contactRequestDisable(
    request: protocoltypes_pb.ContactRequestDisable.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestDisable.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ContactRequestDisable',
        request,
        metadata || {},
        this.methodDescriptorContactRequestDisable,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ContactRequestDisable',
    request,
    metadata || {},
    this.methodDescriptorContactRequestDisable);
  }

  methodDescriptorContactRequestEnable = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ContactRequestEnable',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ContactRequestEnable.Request,
    protocoltypes_pb.ContactRequestEnable.Reply,
    (request: protocoltypes_pb.ContactRequestEnable.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ContactRequestEnable.Reply.deserializeBinary
  );

  contactRequestEnable(
    request: protocoltypes_pb.ContactRequestEnable.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ContactRequestEnable.Reply>;

  contactRequestEnable(
    request: protocoltypes_pb.ContactRequestEnable.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestEnable.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ContactRequestEnable.Reply>;

  contactRequestEnable(
    request: protocoltypes_pb.ContactRequestEnable.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestEnable.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ContactRequestEnable',
        request,
        metadata || {},
        this.methodDescriptorContactRequestEnable,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ContactRequestEnable',
    request,
    metadata || {},
    this.methodDescriptorContactRequestEnable);
  }

  methodDescriptorContactRequestResetReference = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ContactRequestResetReference',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ContactRequestResetReference.Request,
    protocoltypes_pb.ContactRequestResetReference.Reply,
    (request: protocoltypes_pb.ContactRequestResetReference.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ContactRequestResetReference.Reply.deserializeBinary
  );

  contactRequestResetReference(
    request: protocoltypes_pb.ContactRequestResetReference.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ContactRequestResetReference.Reply>;

  contactRequestResetReference(
    request: protocoltypes_pb.ContactRequestResetReference.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestResetReference.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ContactRequestResetReference.Reply>;

  contactRequestResetReference(
    request: protocoltypes_pb.ContactRequestResetReference.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestResetReference.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ContactRequestResetReference',
        request,
        metadata || {},
        this.methodDescriptorContactRequestResetReference,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ContactRequestResetReference',
    request,
    metadata || {},
    this.methodDescriptorContactRequestResetReference);
  }

  methodDescriptorContactRequestSend = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ContactRequestSend',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ContactRequestSend.Request,
    protocoltypes_pb.ContactRequestSend.Reply,
    (request: protocoltypes_pb.ContactRequestSend.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ContactRequestSend.Reply.deserializeBinary
  );

  contactRequestSend(
    request: protocoltypes_pb.ContactRequestSend.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ContactRequestSend.Reply>;

  contactRequestSend(
    request: protocoltypes_pb.ContactRequestSend.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestSend.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ContactRequestSend.Reply>;

  contactRequestSend(
    request: protocoltypes_pb.ContactRequestSend.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestSend.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ContactRequestSend',
        request,
        metadata || {},
        this.methodDescriptorContactRequestSend,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ContactRequestSend',
    request,
    metadata || {},
    this.methodDescriptorContactRequestSend);
  }

  methodDescriptorContactRequestAccept = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ContactRequestAccept',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ContactRequestAccept.Request,
    protocoltypes_pb.ContactRequestAccept.Reply,
    (request: protocoltypes_pb.ContactRequestAccept.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ContactRequestAccept.Reply.deserializeBinary
  );

  contactRequestAccept(
    request: protocoltypes_pb.ContactRequestAccept.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ContactRequestAccept.Reply>;

  contactRequestAccept(
    request: protocoltypes_pb.ContactRequestAccept.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestAccept.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ContactRequestAccept.Reply>;

  contactRequestAccept(
    request: protocoltypes_pb.ContactRequestAccept.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestAccept.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ContactRequestAccept',
        request,
        metadata || {},
        this.methodDescriptorContactRequestAccept,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ContactRequestAccept',
    request,
    metadata || {},
    this.methodDescriptorContactRequestAccept);
  }

  methodDescriptorContactRequestDiscard = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ContactRequestDiscard',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ContactRequestDiscard.Request,
    protocoltypes_pb.ContactRequestDiscard.Reply,
    (request: protocoltypes_pb.ContactRequestDiscard.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ContactRequestDiscard.Reply.deserializeBinary
  );

  contactRequestDiscard(
    request: protocoltypes_pb.ContactRequestDiscard.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ContactRequestDiscard.Reply>;

  contactRequestDiscard(
    request: protocoltypes_pb.ContactRequestDiscard.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestDiscard.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ContactRequestDiscard.Reply>;

  contactRequestDiscard(
    request: protocoltypes_pb.ContactRequestDiscard.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactRequestDiscard.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ContactRequestDiscard',
        request,
        metadata || {},
        this.methodDescriptorContactRequestDiscard,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ContactRequestDiscard',
    request,
    metadata || {},
    this.methodDescriptorContactRequestDiscard);
  }

  methodDescriptorShareContact = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ShareContact',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ShareContact.Request,
    protocoltypes_pb.ShareContact.Reply,
    (request: protocoltypes_pb.ShareContact.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ShareContact.Reply.deserializeBinary
  );

  shareContact(
    request: protocoltypes_pb.ShareContact.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ShareContact.Reply>;

  shareContact(
    request: protocoltypes_pb.ShareContact.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ShareContact.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ShareContact.Reply>;

  shareContact(
    request: protocoltypes_pb.ShareContact.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ShareContact.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ShareContact',
        request,
        metadata || {},
        this.methodDescriptorShareContact,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ShareContact',
    request,
    metadata || {},
    this.methodDescriptorShareContact);
  }

  methodDescriptorDecodeContact = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/DecodeContact',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.DecodeContact.Request,
    protocoltypes_pb.DecodeContact.Reply,
    (request: protocoltypes_pb.DecodeContact.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.DecodeContact.Reply.deserializeBinary
  );

  decodeContact(
    request: protocoltypes_pb.DecodeContact.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.DecodeContact.Reply>;

  decodeContact(
    request: protocoltypes_pb.DecodeContact.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.DecodeContact.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.DecodeContact.Reply>;

  decodeContact(
    request: protocoltypes_pb.DecodeContact.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.DecodeContact.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/DecodeContact',
        request,
        metadata || {},
        this.methodDescriptorDecodeContact,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/DecodeContact',
    request,
    metadata || {},
    this.methodDescriptorDecodeContact);
  }

  methodDescriptorContactBlock = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ContactBlock',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ContactBlock.Request,
    protocoltypes_pb.ContactBlock.Reply,
    (request: protocoltypes_pb.ContactBlock.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ContactBlock.Reply.deserializeBinary
  );

  contactBlock(
    request: protocoltypes_pb.ContactBlock.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ContactBlock.Reply>;

  contactBlock(
    request: protocoltypes_pb.ContactBlock.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactBlock.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ContactBlock.Reply>;

  contactBlock(
    request: protocoltypes_pb.ContactBlock.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactBlock.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ContactBlock',
        request,
        metadata || {},
        this.methodDescriptorContactBlock,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ContactBlock',
    request,
    metadata || {},
    this.methodDescriptorContactBlock);
  }

  methodDescriptorContactUnblock = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ContactUnblock',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ContactUnblock.Request,
    protocoltypes_pb.ContactUnblock.Reply,
    (request: protocoltypes_pb.ContactUnblock.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ContactUnblock.Reply.deserializeBinary
  );

  contactUnblock(
    request: protocoltypes_pb.ContactUnblock.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ContactUnblock.Reply>;

  contactUnblock(
    request: protocoltypes_pb.ContactUnblock.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactUnblock.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ContactUnblock.Reply>;

  contactUnblock(
    request: protocoltypes_pb.ContactUnblock.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactUnblock.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ContactUnblock',
        request,
        metadata || {},
        this.methodDescriptorContactUnblock,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ContactUnblock',
    request,
    metadata || {},
    this.methodDescriptorContactUnblock);
  }

  methodDescriptorContactAliasKeySend = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ContactAliasKeySend',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ContactAliasKeySend.Request,
    protocoltypes_pb.ContactAliasKeySend.Reply,
    (request: protocoltypes_pb.ContactAliasKeySend.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ContactAliasKeySend.Reply.deserializeBinary
  );

  contactAliasKeySend(
    request: protocoltypes_pb.ContactAliasKeySend.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ContactAliasKeySend.Reply>;

  contactAliasKeySend(
    request: protocoltypes_pb.ContactAliasKeySend.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactAliasKeySend.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ContactAliasKeySend.Reply>;

  contactAliasKeySend(
    request: protocoltypes_pb.ContactAliasKeySend.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ContactAliasKeySend.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ContactAliasKeySend',
        request,
        metadata || {},
        this.methodDescriptorContactAliasKeySend,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ContactAliasKeySend',
    request,
    metadata || {},
    this.methodDescriptorContactAliasKeySend);
  }

  methodDescriptorMultiMemberGroupCreate = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupCreate',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.MultiMemberGroupCreate.Request,
    protocoltypes_pb.MultiMemberGroupCreate.Reply,
    (request: protocoltypes_pb.MultiMemberGroupCreate.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.MultiMemberGroupCreate.Reply.deserializeBinary
  );

  multiMemberGroupCreate(
    request: protocoltypes_pb.MultiMemberGroupCreate.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.MultiMemberGroupCreate.Reply>;

  multiMemberGroupCreate(
    request: protocoltypes_pb.MultiMemberGroupCreate.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupCreate.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.MultiMemberGroupCreate.Reply>;

  multiMemberGroupCreate(
    request: protocoltypes_pb.MultiMemberGroupCreate.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupCreate.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupCreate',
        request,
        metadata || {},
        this.methodDescriptorMultiMemberGroupCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupCreate',
    request,
    metadata || {},
    this.methodDescriptorMultiMemberGroupCreate);
  }

  methodDescriptorMultiMemberGroupJoin = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupJoin',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.MultiMemberGroupJoin.Request,
    protocoltypes_pb.MultiMemberGroupJoin.Reply,
    (request: protocoltypes_pb.MultiMemberGroupJoin.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.MultiMemberGroupJoin.Reply.deserializeBinary
  );

  multiMemberGroupJoin(
    request: protocoltypes_pb.MultiMemberGroupJoin.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.MultiMemberGroupJoin.Reply>;

  multiMemberGroupJoin(
    request: protocoltypes_pb.MultiMemberGroupJoin.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupJoin.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.MultiMemberGroupJoin.Reply>;

  multiMemberGroupJoin(
    request: protocoltypes_pb.MultiMemberGroupJoin.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupJoin.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupJoin',
        request,
        metadata || {},
        this.methodDescriptorMultiMemberGroupJoin,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupJoin',
    request,
    metadata || {},
    this.methodDescriptorMultiMemberGroupJoin);
  }

  methodDescriptorMultiMemberGroupLeave = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupLeave',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.MultiMemberGroupLeave.Request,
    protocoltypes_pb.MultiMemberGroupLeave.Reply,
    (request: protocoltypes_pb.MultiMemberGroupLeave.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.MultiMemberGroupLeave.Reply.deserializeBinary
  );

  multiMemberGroupLeave(
    request: protocoltypes_pb.MultiMemberGroupLeave.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.MultiMemberGroupLeave.Reply>;

  multiMemberGroupLeave(
    request: protocoltypes_pb.MultiMemberGroupLeave.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupLeave.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.MultiMemberGroupLeave.Reply>;

  multiMemberGroupLeave(
    request: protocoltypes_pb.MultiMemberGroupLeave.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupLeave.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupLeave',
        request,
        metadata || {},
        this.methodDescriptorMultiMemberGroupLeave,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupLeave',
    request,
    metadata || {},
    this.methodDescriptorMultiMemberGroupLeave);
  }

  methodDescriptorMultiMemberGroupAliasResolverDisclose = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupAliasResolverDisclose',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Request,
    protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Reply,
    (request: protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Reply.deserializeBinary
  );

  multiMemberGroupAliasResolverDisclose(
    request: protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Reply>;

  multiMemberGroupAliasResolverDisclose(
    request: protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Reply>;

  multiMemberGroupAliasResolverDisclose(
    request: protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupAliasResolverDisclose.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupAliasResolverDisclose',
        request,
        metadata || {},
        this.methodDescriptorMultiMemberGroupAliasResolverDisclose,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupAliasResolverDisclose',
    request,
    metadata || {},
    this.methodDescriptorMultiMemberGroupAliasResolverDisclose);
  }

  methodDescriptorMultiMemberGroupAdminRoleGrant = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupAdminRoleGrant',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Request,
    protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Reply,
    (request: protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Reply.deserializeBinary
  );

  multiMemberGroupAdminRoleGrant(
    request: protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Reply>;

  multiMemberGroupAdminRoleGrant(
    request: protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Reply>;

  multiMemberGroupAdminRoleGrant(
    request: protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupAdminRoleGrant.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupAdminRoleGrant',
        request,
        metadata || {},
        this.methodDescriptorMultiMemberGroupAdminRoleGrant,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupAdminRoleGrant',
    request,
    metadata || {},
    this.methodDescriptorMultiMemberGroupAdminRoleGrant);
  }

  methodDescriptorMultiMemberGroupInvitationCreate = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupInvitationCreate',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.MultiMemberGroupInvitationCreate.Request,
    protocoltypes_pb.MultiMemberGroupInvitationCreate.Reply,
    (request: protocoltypes_pb.MultiMemberGroupInvitationCreate.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.MultiMemberGroupInvitationCreate.Reply.deserializeBinary
  );

  multiMemberGroupInvitationCreate(
    request: protocoltypes_pb.MultiMemberGroupInvitationCreate.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.MultiMemberGroupInvitationCreate.Reply>;

  multiMemberGroupInvitationCreate(
    request: protocoltypes_pb.MultiMemberGroupInvitationCreate.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupInvitationCreate.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.MultiMemberGroupInvitationCreate.Reply>;

  multiMemberGroupInvitationCreate(
    request: protocoltypes_pb.MultiMemberGroupInvitationCreate.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.MultiMemberGroupInvitationCreate.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupInvitationCreate',
        request,
        metadata || {},
        this.methodDescriptorMultiMemberGroupInvitationCreate,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/MultiMemberGroupInvitationCreate',
    request,
    metadata || {},
    this.methodDescriptorMultiMemberGroupInvitationCreate);
  }

  methodDescriptorAppMetadataSend = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/AppMetadataSend',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.AppMetadataSend.Request,
    protocoltypes_pb.AppMetadataSend.Reply,
    (request: protocoltypes_pb.AppMetadataSend.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.AppMetadataSend.Reply.deserializeBinary
  );

  appMetadataSend(
    request: protocoltypes_pb.AppMetadataSend.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.AppMetadataSend.Reply>;

  appMetadataSend(
    request: protocoltypes_pb.AppMetadataSend.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.AppMetadataSend.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.AppMetadataSend.Reply>;

  appMetadataSend(
    request: protocoltypes_pb.AppMetadataSend.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.AppMetadataSend.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/AppMetadataSend',
        request,
        metadata || {},
        this.methodDescriptorAppMetadataSend,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/AppMetadataSend',
    request,
    metadata || {},
    this.methodDescriptorAppMetadataSend);
  }

  methodDescriptorAppMessageSend = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/AppMessageSend',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.AppMessageSend.Request,
    protocoltypes_pb.AppMessageSend.Reply,
    (request: protocoltypes_pb.AppMessageSend.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.AppMessageSend.Reply.deserializeBinary
  );

  appMessageSend(
    request: protocoltypes_pb.AppMessageSend.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.AppMessageSend.Reply>;

  appMessageSend(
    request: protocoltypes_pb.AppMessageSend.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.AppMessageSend.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.AppMessageSend.Reply>;

  appMessageSend(
    request: protocoltypes_pb.AppMessageSend.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.AppMessageSend.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/AppMessageSend',
        request,
        metadata || {},
        this.methodDescriptorAppMessageSend,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/AppMessageSend',
    request,
    metadata || {},
    this.methodDescriptorAppMessageSend);
  }

  methodDescriptorGroupMetadataList = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/GroupMetadataList',
    grpcWeb.MethodType.SERVER_STREAMING,
    protocoltypes_pb.GroupMetadataList.Request,
    protocoltypes_pb.GroupMetadataEvent,
    (request: protocoltypes_pb.GroupMetadataList.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.GroupMetadataEvent.deserializeBinary
  );

  groupMetadataList(
    request: protocoltypes_pb.GroupMetadataList.Request,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<protocoltypes_pb.GroupMetadataEvent> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/weshnet.protocol.v1.ProtocolService/GroupMetadataList',
      request,
      metadata || {},
      this.methodDescriptorGroupMetadataList);
  }

  methodDescriptorGroupMessageList = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/GroupMessageList',
    grpcWeb.MethodType.SERVER_STREAMING,
    protocoltypes_pb.GroupMessageList.Request,
    protocoltypes_pb.GroupMessageEvent,
    (request: protocoltypes_pb.GroupMessageList.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.GroupMessageEvent.deserializeBinary
  );

  groupMessageList(
    request: protocoltypes_pb.GroupMessageList.Request,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<protocoltypes_pb.GroupMessageEvent> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/weshnet.protocol.v1.ProtocolService/GroupMessageList',
      request,
      metadata || {},
      this.methodDescriptorGroupMessageList);
  }

  methodDescriptorGroupInfo = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/GroupInfo',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.GroupInfo.Request,
    protocoltypes_pb.GroupInfo.Reply,
    (request: protocoltypes_pb.GroupInfo.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.GroupInfo.Reply.deserializeBinary
  );

  groupInfo(
    request: protocoltypes_pb.GroupInfo.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.GroupInfo.Reply>;

  groupInfo(
    request: protocoltypes_pb.GroupInfo.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.GroupInfo.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.GroupInfo.Reply>;

  groupInfo(
    request: protocoltypes_pb.GroupInfo.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.GroupInfo.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/GroupInfo',
        request,
        metadata || {},
        this.methodDescriptorGroupInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/GroupInfo',
    request,
    metadata || {},
    this.methodDescriptorGroupInfo);
  }

  methodDescriptorActivateGroup = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ActivateGroup',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ActivateGroup.Request,
    protocoltypes_pb.ActivateGroup.Reply,
    (request: protocoltypes_pb.ActivateGroup.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ActivateGroup.Reply.deserializeBinary
  );

  activateGroup(
    request: protocoltypes_pb.ActivateGroup.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ActivateGroup.Reply>;

  activateGroup(
    request: protocoltypes_pb.ActivateGroup.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ActivateGroup.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ActivateGroup.Reply>;

  activateGroup(
    request: protocoltypes_pb.ActivateGroup.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ActivateGroup.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ActivateGroup',
        request,
        metadata || {},
        this.methodDescriptorActivateGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ActivateGroup',
    request,
    metadata || {},
    this.methodDescriptorActivateGroup);
  }

  methodDescriptorDeactivateGroup = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/DeactivateGroup',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.DeactivateGroup.Request,
    protocoltypes_pb.DeactivateGroup.Reply,
    (request: protocoltypes_pb.DeactivateGroup.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.DeactivateGroup.Reply.deserializeBinary
  );

  deactivateGroup(
    request: protocoltypes_pb.DeactivateGroup.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.DeactivateGroup.Reply>;

  deactivateGroup(
    request: protocoltypes_pb.DeactivateGroup.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.DeactivateGroup.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.DeactivateGroup.Reply>;

  deactivateGroup(
    request: protocoltypes_pb.DeactivateGroup.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.DeactivateGroup.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/DeactivateGroup',
        request,
        metadata || {},
        this.methodDescriptorDeactivateGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/DeactivateGroup',
    request,
    metadata || {},
    this.methodDescriptorDeactivateGroup);
  }

  methodDescriptorGroupDeviceStatus = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/GroupDeviceStatus',
    grpcWeb.MethodType.SERVER_STREAMING,
    protocoltypes_pb.GroupDeviceStatus.Request,
    protocoltypes_pb.GroupDeviceStatus.Reply,
    (request: protocoltypes_pb.GroupDeviceStatus.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.GroupDeviceStatus.Reply.deserializeBinary
  );

  groupDeviceStatus(
    request: protocoltypes_pb.GroupDeviceStatus.Request,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<protocoltypes_pb.GroupDeviceStatus.Reply> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/weshnet.protocol.v1.ProtocolService/GroupDeviceStatus',
      request,
      metadata || {},
      this.methodDescriptorGroupDeviceStatus);
  }

  methodDescriptorDebugListGroups = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/DebugListGroups',
    grpcWeb.MethodType.SERVER_STREAMING,
    protocoltypes_pb.DebugListGroups.Request,
    protocoltypes_pb.DebugListGroups.Reply,
    (request: protocoltypes_pb.DebugListGroups.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.DebugListGroups.Reply.deserializeBinary
  );

  debugListGroups(
    request: protocoltypes_pb.DebugListGroups.Request,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<protocoltypes_pb.DebugListGroups.Reply> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/weshnet.protocol.v1.ProtocolService/DebugListGroups',
      request,
      metadata || {},
      this.methodDescriptorDebugListGroups);
  }

  methodDescriptorDebugInspectGroupStore = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/DebugInspectGroupStore',
    grpcWeb.MethodType.SERVER_STREAMING,
    protocoltypes_pb.DebugInspectGroupStore.Request,
    protocoltypes_pb.DebugInspectGroupStore.Reply,
    (request: protocoltypes_pb.DebugInspectGroupStore.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.DebugInspectGroupStore.Reply.deserializeBinary
  );

  debugInspectGroupStore(
    request: protocoltypes_pb.DebugInspectGroupStore.Request,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<protocoltypes_pb.DebugInspectGroupStore.Reply> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/weshnet.protocol.v1.ProtocolService/DebugInspectGroupStore',
      request,
      metadata || {},
      this.methodDescriptorDebugInspectGroupStore);
  }

  methodDescriptorDebugGroup = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/DebugGroup',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.DebugGroup.Request,
    protocoltypes_pb.DebugGroup.Reply,
    (request: protocoltypes_pb.DebugGroup.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.DebugGroup.Reply.deserializeBinary
  );

  debugGroup(
    request: protocoltypes_pb.DebugGroup.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.DebugGroup.Reply>;

  debugGroup(
    request: protocoltypes_pb.DebugGroup.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.DebugGroup.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.DebugGroup.Reply>;

  debugGroup(
    request: protocoltypes_pb.DebugGroup.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.DebugGroup.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/DebugGroup',
        request,
        metadata || {},
        this.methodDescriptorDebugGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/DebugGroup',
    request,
    metadata || {},
    this.methodDescriptorDebugGroup);
  }

  methodDescriptorSystemInfo = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/SystemInfo',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.SystemInfo.Request,
    protocoltypes_pb.SystemInfo.Reply,
    (request: protocoltypes_pb.SystemInfo.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.SystemInfo.Reply.deserializeBinary
  );

  systemInfo(
    request: protocoltypes_pb.SystemInfo.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.SystemInfo.Reply>;

  systemInfo(
    request: protocoltypes_pb.SystemInfo.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.SystemInfo.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.SystemInfo.Reply>;

  systemInfo(
    request: protocoltypes_pb.SystemInfo.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.SystemInfo.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/SystemInfo',
        request,
        metadata || {},
        this.methodDescriptorSystemInfo,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/SystemInfo',
    request,
    metadata || {},
    this.methodDescriptorSystemInfo);
  }

  methodDescriptorCredentialVerificationServiceInitFlow = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/CredentialVerificationServiceInitFlow',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.CredentialVerificationServiceInitFlow.Request,
    protocoltypes_pb.CredentialVerificationServiceInitFlow.Reply,
    (request: protocoltypes_pb.CredentialVerificationServiceInitFlow.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.CredentialVerificationServiceInitFlow.Reply.deserializeBinary
  );

  credentialVerificationServiceInitFlow(
    request: protocoltypes_pb.CredentialVerificationServiceInitFlow.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.CredentialVerificationServiceInitFlow.Reply>;

  credentialVerificationServiceInitFlow(
    request: protocoltypes_pb.CredentialVerificationServiceInitFlow.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.CredentialVerificationServiceInitFlow.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.CredentialVerificationServiceInitFlow.Reply>;

  credentialVerificationServiceInitFlow(
    request: protocoltypes_pb.CredentialVerificationServiceInitFlow.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.CredentialVerificationServiceInitFlow.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/CredentialVerificationServiceInitFlow',
        request,
        metadata || {},
        this.methodDescriptorCredentialVerificationServiceInitFlow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/CredentialVerificationServiceInitFlow',
    request,
    metadata || {},
    this.methodDescriptorCredentialVerificationServiceInitFlow);
  }

  methodDescriptorCredentialVerificationServiceCompleteFlow = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/CredentialVerificationServiceCompleteFlow',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Request,
    protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Reply,
    (request: protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Reply.deserializeBinary
  );

  credentialVerificationServiceCompleteFlow(
    request: protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Reply>;

  credentialVerificationServiceCompleteFlow(
    request: protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Reply>;

  credentialVerificationServiceCompleteFlow(
    request: protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.CredentialVerificationServiceCompleteFlow.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/CredentialVerificationServiceCompleteFlow',
        request,
        metadata || {},
        this.methodDescriptorCredentialVerificationServiceCompleteFlow,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/CredentialVerificationServiceCompleteFlow',
    request,
    metadata || {},
    this.methodDescriptorCredentialVerificationServiceCompleteFlow);
  }

  methodDescriptorVerifiedCredentialsList = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/VerifiedCredentialsList',
    grpcWeb.MethodType.SERVER_STREAMING,
    protocoltypes_pb.VerifiedCredentialsList.Request,
    protocoltypes_pb.VerifiedCredentialsList.Reply,
    (request: protocoltypes_pb.VerifiedCredentialsList.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.VerifiedCredentialsList.Reply.deserializeBinary
  );

  verifiedCredentialsList(
    request: protocoltypes_pb.VerifiedCredentialsList.Request,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<protocoltypes_pb.VerifiedCredentialsList.Reply> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/weshnet.protocol.v1.ProtocolService/VerifiedCredentialsList',
      request,
      metadata || {},
      this.methodDescriptorVerifiedCredentialsList);
  }

  methodDescriptorReplicationServiceRegisterGroup = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/ReplicationServiceRegisterGroup',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.ReplicationServiceRegisterGroup.Request,
    protocoltypes_pb.ReplicationServiceRegisterGroup.Reply,
    (request: protocoltypes_pb.ReplicationServiceRegisterGroup.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.ReplicationServiceRegisterGroup.Reply.deserializeBinary
  );

  replicationServiceRegisterGroup(
    request: protocoltypes_pb.ReplicationServiceRegisterGroup.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.ReplicationServiceRegisterGroup.Reply>;

  replicationServiceRegisterGroup(
    request: protocoltypes_pb.ReplicationServiceRegisterGroup.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ReplicationServiceRegisterGroup.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.ReplicationServiceRegisterGroup.Reply>;

  replicationServiceRegisterGroup(
    request: protocoltypes_pb.ReplicationServiceRegisterGroup.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.ReplicationServiceRegisterGroup.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/ReplicationServiceRegisterGroup',
        request,
        metadata || {},
        this.methodDescriptorReplicationServiceRegisterGroup,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/ReplicationServiceRegisterGroup',
    request,
    metadata || {},
    this.methodDescriptorReplicationServiceRegisterGroup);
  }

  methodDescriptorPeerList = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/PeerList',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.PeerList.Request,
    protocoltypes_pb.PeerList.Reply,
    (request: protocoltypes_pb.PeerList.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.PeerList.Reply.deserializeBinary
  );

  peerList(
    request: protocoltypes_pb.PeerList.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.PeerList.Reply>;

  peerList(
    request: protocoltypes_pb.PeerList.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.PeerList.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.PeerList.Reply>;

  peerList(
    request: protocoltypes_pb.PeerList.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.PeerList.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/PeerList',
        request,
        metadata || {},
        this.methodDescriptorPeerList,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/PeerList',
    request,
    metadata || {},
    this.methodDescriptorPeerList);
  }

  methodDescriptorOutOfStoreReceive = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/OutOfStoreReceive',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.OutOfStoreReceive.Request,
    protocoltypes_pb.OutOfStoreReceive.Reply,
    (request: protocoltypes_pb.OutOfStoreReceive.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.OutOfStoreReceive.Reply.deserializeBinary
  );

  outOfStoreReceive(
    request: protocoltypes_pb.OutOfStoreReceive.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.OutOfStoreReceive.Reply>;

  outOfStoreReceive(
    request: protocoltypes_pb.OutOfStoreReceive.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.OutOfStoreReceive.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.OutOfStoreReceive.Reply>;

  outOfStoreReceive(
    request: protocoltypes_pb.OutOfStoreReceive.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.OutOfStoreReceive.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/OutOfStoreReceive',
        request,
        metadata || {},
        this.methodDescriptorOutOfStoreReceive,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/OutOfStoreReceive',
    request,
    metadata || {},
    this.methodDescriptorOutOfStoreReceive);
  }

  methodDescriptorOutOfStoreSeal = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/OutOfStoreSeal',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.OutOfStoreSeal.Request,
    protocoltypes_pb.OutOfStoreSeal.Reply,
    (request: protocoltypes_pb.OutOfStoreSeal.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.OutOfStoreSeal.Reply.deserializeBinary
  );

  outOfStoreSeal(
    request: protocoltypes_pb.OutOfStoreSeal.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.OutOfStoreSeal.Reply>;

  outOfStoreSeal(
    request: protocoltypes_pb.OutOfStoreSeal.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.OutOfStoreSeal.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.OutOfStoreSeal.Reply>;

  outOfStoreSeal(
    request: protocoltypes_pb.OutOfStoreSeal.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.OutOfStoreSeal.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/OutOfStoreSeal',
        request,
        metadata || {},
        this.methodDescriptorOutOfStoreSeal,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/OutOfStoreSeal',
    request,
    metadata || {},
    this.methodDescriptorOutOfStoreSeal);
  }

  methodDescriptorRefreshContactRequest = new grpcWeb.MethodDescriptor(
    '/weshnet.protocol.v1.ProtocolService/RefreshContactRequest',
    grpcWeb.MethodType.UNARY,
    protocoltypes_pb.RefreshContactRequest.Request,
    protocoltypes_pb.RefreshContactRequest.Reply,
    (request: protocoltypes_pb.RefreshContactRequest.Request) => {
      return request.serializeBinary();
    },
    protocoltypes_pb.RefreshContactRequest.Reply.deserializeBinary
  );

  refreshContactRequest(
    request: protocoltypes_pb.RefreshContactRequest.Request,
    metadata?: grpcWeb.Metadata | null): Promise<protocoltypes_pb.RefreshContactRequest.Reply>;

  refreshContactRequest(
    request: protocoltypes_pb.RefreshContactRequest.Request,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.RefreshContactRequest.Reply) => void): grpcWeb.ClientReadableStream<protocoltypes_pb.RefreshContactRequest.Reply>;

  refreshContactRequest(
    request: protocoltypes_pb.RefreshContactRequest.Request,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: protocoltypes_pb.RefreshContactRequest.Reply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/weshnet.protocol.v1.ProtocolService/RefreshContactRequest',
        request,
        metadata || {},
        this.methodDescriptorRefreshContactRequest,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/weshnet.protocol.v1.ProtocolService/RefreshContactRequest',
    request,
    metadata || {},
    this.methodDescriptorRefreshContactRequest);
  }

}

