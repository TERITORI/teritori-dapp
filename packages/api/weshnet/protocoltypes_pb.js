// source: protocoltypes.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var gogoproto_gogo_pb = require('./gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.weshnet.protocol.v1.Account', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountContactBlocked', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountContactRequestDisabled', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountContactRequestEnabled', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountContactRequestReferenceReset', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountContactUnblocked', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountGroupJoined', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountGroupLeft', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ActivateGroup', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ActivateGroup.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ActivateGroup.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AppMessageSend', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AppMessageSend.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AppMessageSend.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AppMetadataSend', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AppMetadataSend.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.AppMetadataSend.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactAliasKeyAdded', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactAliasKeySend', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactAliasKeySend.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactAliasKeySend.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactBlock', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactBlock.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactBlock.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestAccept', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestAccept.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestAccept.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestDisable', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestDisable.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestDisable.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestDiscard', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestDiscard.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestDiscard.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestEnable', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestEnable.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestEnable.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestReference', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestReference.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestReference.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestResetReference', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestResetReference.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestResetReference.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestSend', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestSend.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactRequestSend.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactState', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactUnblock', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactUnblock.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ContactUnblock.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DeactivateGroup', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DeactivateGroup.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DeactivateGroup.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DebugGroup', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DebugGroup.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DebugGroup.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DebugInspectGroupLogType', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DebugInspectGroupStore', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DebugInspectGroupStore.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DebugListGroups', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DebugListGroups.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DebugListGroups.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DecodeContact', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DecodeContact.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DecodeContact.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.DeviceChainKey', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.Direction', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.EncryptedMessage', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.EventContext', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.EventType', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.FirstLastCounters', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.Group', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupDeviceStatus', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupDeviceStatus.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupDeviceStatus.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupDeviceStatus.Transport', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupDeviceStatus.Type', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupEnvelope', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupHeadsExport', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupInfo', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupInfo.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupInfo.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupMemberDeviceAdded', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupMessageEvent', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupMessageList', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupMessageList.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupMetadata', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupMetadataEvent', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupMetadataList', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupMetadataList.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupMetadataPayloadSent', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupReplicating', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.GroupType', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MessageEnvelope', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MessageHeaders', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupCreate', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupJoin', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupLeave', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.OrbitDBMessageHeads', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.OutOfStoreMessage', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.OutOfStoreReceive', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.OutOfStoreReceive.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.OutOfStoreReceive.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.OutOfStoreSeal', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.OutOfStoreSeal.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.OutOfStoreSeal.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.PeerList', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.PeerList.Feature', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.PeerList.Peer', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.PeerList.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.PeerList.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.PeerList.Route', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.PeerList.Stream', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.Progress', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ProtocolMetadata', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.RefreshContactRequest', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.RefreshContactRequest.Peer', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.RefreshContactRequest.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.RefreshContactRequest.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ServiceExportData', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ServiceExportData.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ServiceExportData.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ServiceGetConfiguration', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ServiceGetConfiguration.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ServiceToken', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ServiceTokenSupportedService', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ShareContact', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ShareContact.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ShareContact.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.ShareableContact', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.SystemInfo', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.SystemInfo.OrbitDB', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.SystemInfo.P2P', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.SystemInfo.Process', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.SystemInfo.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.SystemInfo.Request', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.VerifiedCredentialsList', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply', null, global);
goog.exportSymbol('proto.weshnet.protocol.v1.VerifiedCredentialsList.Request', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.Account = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.Account, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.Account.displayName = 'proto.weshnet.protocol.v1.Account';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.Group.displayName = 'proto.weshnet.protocol.v1.Group';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupHeadsExport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.GroupHeadsExport.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupHeadsExport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupHeadsExport.displayName = 'proto.weshnet.protocol.v1.GroupHeadsExport';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupMetadata.displayName = 'proto.weshnet.protocol.v1.GroupMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupEnvelope.displayName = 'proto.weshnet.protocol.v1.GroupEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MessageHeaders = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MessageHeaders, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MessageHeaders.displayName = 'proto.weshnet.protocol.v1.MessageHeaders';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ProtocolMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ProtocolMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ProtocolMetadata.displayName = 'proto.weshnet.protocol.v1.ProtocolMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.EncryptedMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.EncryptedMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.EncryptedMessage.displayName = 'proto.weshnet.protocol.v1.EncryptedMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MessageEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MessageEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MessageEnvelope.displayName = 'proto.weshnet.protocol.v1.MessageEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.EventContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.EventContext.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.EventContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.EventContext.displayName = 'proto.weshnet.protocol.v1.EventContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupMetadataPayloadSent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupMetadataPayloadSent.displayName = 'proto.weshnet.protocol.v1.GroupMetadataPayloadSent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactAliasKeyAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactAliasKeyAdded.displayName = 'proto.weshnet.protocol.v1.ContactAliasKeyAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupMemberDeviceAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupMemberDeviceAdded.displayName = 'proto.weshnet.protocol.v1.GroupMemberDeviceAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DeviceChainKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DeviceChainKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DeviceChainKey.displayName = 'proto.weshnet.protocol.v1.DeviceChainKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.displayName = 'proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.displayName = 'proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.displayName = 'proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountGroupJoined = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountGroupJoined, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountGroupJoined.displayName = 'proto.weshnet.protocol.v1.AccountGroupJoined';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountGroupLeft = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountGroupLeft, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountGroupLeft.displayName = 'proto.weshnet.protocol.v1.AccountGroupLeft';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountContactRequestDisabled, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountContactRequestDisabled.displayName = 'proto.weshnet.protocol.v1.AccountContactRequestDisabled';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountContactRequestEnabled, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountContactRequestEnabled.displayName = 'proto.weshnet.protocol.v1.AccountContactRequestEnabled';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountContactRequestReferenceReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.displayName = 'proto.weshnet.protocol.v1.AccountContactRequestReferenceReset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.displayName = 'proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.displayName = 'proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.displayName = 'proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.displayName = 'proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.displayName = 'proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountContactBlocked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountContactBlocked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountContactBlocked.displayName = 'proto.weshnet.protocol.v1.AccountContactBlocked';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountContactUnblocked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountContactUnblocked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountContactUnblocked.displayName = 'proto.weshnet.protocol.v1.AccountContactUnblocked';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupReplicating = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupReplicating, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupReplicating.displayName = 'proto.weshnet.protocol.v1.GroupReplicating';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ServiceExportData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ServiceExportData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ServiceExportData.displayName = 'proto.weshnet.protocol.v1.ServiceExportData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ServiceExportData.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ServiceExportData.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ServiceExportData.Request.displayName = 'proto.weshnet.protocol.v1.ServiceExportData.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ServiceExportData.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ServiceExportData.Reply.displayName = 'proto.weshnet.protocol.v1.ServiceExportData.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ServiceGetConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ServiceGetConfiguration.displayName = 'proto.weshnet.protocol.v1.ServiceGetConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ServiceGetConfiguration.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ServiceGetConfiguration.Request.displayName = 'proto.weshnet.protocol.v1.ServiceGetConfiguration.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.displayName = 'proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestReference.displayName = 'proto.weshnet.protocol.v1.ContactRequestReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestReference.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestReference.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestReference.Request.displayName = 'proto.weshnet.protocol.v1.ContactRequestReference.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestReference.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestReference.Reply.displayName = 'proto.weshnet.protocol.v1.ContactRequestReference.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestDisable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestDisable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestDisable.displayName = 'proto.weshnet.protocol.v1.ContactRequestDisable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestDisable.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestDisable.Request.displayName = 'proto.weshnet.protocol.v1.ContactRequestDisable.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestDisable.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestDisable.Reply.displayName = 'proto.weshnet.protocol.v1.ContactRequestDisable.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestEnable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestEnable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestEnable.displayName = 'proto.weshnet.protocol.v1.ContactRequestEnable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestEnable.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestEnable.Request.displayName = 'proto.weshnet.protocol.v1.ContactRequestEnable.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestEnable.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestEnable.Reply.displayName = 'proto.weshnet.protocol.v1.ContactRequestEnable.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestResetReference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestResetReference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestResetReference.displayName = 'proto.weshnet.protocol.v1.ContactRequestResetReference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestResetReference.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestResetReference.Request.displayName = 'proto.weshnet.protocol.v1.ContactRequestResetReference.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestResetReference.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.displayName = 'proto.weshnet.protocol.v1.ContactRequestResetReference.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestSend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestSend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestSend.displayName = 'proto.weshnet.protocol.v1.ContactRequestSend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestSend.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestSend.Request.displayName = 'proto.weshnet.protocol.v1.ContactRequestSend.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestSend.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestSend.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestSend.Reply.displayName = 'proto.weshnet.protocol.v1.ContactRequestSend.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestAccept = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestAccept, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestAccept.displayName = 'proto.weshnet.protocol.v1.ContactRequestAccept';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestAccept.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestAccept.Request.displayName = 'proto.weshnet.protocol.v1.ContactRequestAccept.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestAccept.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestAccept.Reply.displayName = 'proto.weshnet.protocol.v1.ContactRequestAccept.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestDiscard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestDiscard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestDiscard.displayName = 'proto.weshnet.protocol.v1.ContactRequestDiscard';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestDiscard.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestDiscard.Request.displayName = 'proto.weshnet.protocol.v1.ContactRequestDiscard.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactRequestDiscard.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactRequestDiscard.Reply.displayName = 'proto.weshnet.protocol.v1.ContactRequestDiscard.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ShareContact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ShareContact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ShareContact.displayName = 'proto.weshnet.protocol.v1.ShareContact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ShareContact.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ShareContact.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ShareContact.Request.displayName = 'proto.weshnet.protocol.v1.ShareContact.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ShareContact.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ShareContact.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ShareContact.Reply.displayName = 'proto.weshnet.protocol.v1.ShareContact.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DecodeContact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DecodeContact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DecodeContact.displayName = 'proto.weshnet.protocol.v1.DecodeContact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DecodeContact.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DecodeContact.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DecodeContact.Request.displayName = 'proto.weshnet.protocol.v1.DecodeContact.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DecodeContact.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DecodeContact.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DecodeContact.Reply.displayName = 'proto.weshnet.protocol.v1.DecodeContact.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactBlock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactBlock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactBlock.displayName = 'proto.weshnet.protocol.v1.ContactBlock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactBlock.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactBlock.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactBlock.Request.displayName = 'proto.weshnet.protocol.v1.ContactBlock.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactBlock.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactBlock.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactBlock.Reply.displayName = 'proto.weshnet.protocol.v1.ContactBlock.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactUnblock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactUnblock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactUnblock.displayName = 'proto.weshnet.protocol.v1.ContactUnblock';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactUnblock.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactUnblock.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactUnblock.Request.displayName = 'proto.weshnet.protocol.v1.ContactUnblock.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactUnblock.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactUnblock.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactUnblock.Reply.displayName = 'proto.weshnet.protocol.v1.ContactUnblock.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactAliasKeySend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactAliasKeySend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactAliasKeySend.displayName = 'proto.weshnet.protocol.v1.ContactAliasKeySend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactAliasKeySend.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactAliasKeySend.Request.displayName = 'proto.weshnet.protocol.v1.ContactAliasKeySend.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ContactAliasKeySend.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ContactAliasKeySend.Reply.displayName = 'proto.weshnet.protocol.v1.ContactAliasKeySend.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupCreate.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupCreate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupJoin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupJoin.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupJoin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupLeave, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupLeave.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupLeave';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.displayName = 'proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AppMetadataSend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AppMetadataSend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AppMetadataSend.displayName = 'proto.weshnet.protocol.v1.AppMetadataSend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AppMetadataSend.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AppMetadataSend.Request.displayName = 'proto.weshnet.protocol.v1.AppMetadataSend.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AppMetadataSend.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AppMetadataSend.Reply.displayName = 'proto.weshnet.protocol.v1.AppMetadataSend.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AppMessageSend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AppMessageSend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AppMessageSend.displayName = 'proto.weshnet.protocol.v1.AppMessageSend';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AppMessageSend.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AppMessageSend.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AppMessageSend.Request.displayName = 'proto.weshnet.protocol.v1.AppMessageSend.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AppMessageSend.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AppMessageSend.Reply.displayName = 'proto.weshnet.protocol.v1.AppMessageSend.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupMetadataEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupMetadataEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupMetadataEvent.displayName = 'proto.weshnet.protocol.v1.GroupMetadataEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupMessageEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupMessageEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupMessageEvent.displayName = 'proto.weshnet.protocol.v1.GroupMessageEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupMetadataList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupMetadataList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupMetadataList.displayName = 'proto.weshnet.protocol.v1.GroupMetadataList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupMetadataList.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupMetadataList.Request.displayName = 'proto.weshnet.protocol.v1.GroupMetadataList.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupMessageList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupMessageList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupMessageList.displayName = 'proto.weshnet.protocol.v1.GroupMessageList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupMessageList.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupMessageList.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupMessageList.Request.displayName = 'proto.weshnet.protocol.v1.GroupMessageList.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupInfo.displayName = 'proto.weshnet.protocol.v1.GroupInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupInfo.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupInfo.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupInfo.Request.displayName = 'proto.weshnet.protocol.v1.GroupInfo.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupInfo.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupInfo.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupInfo.Reply.displayName = 'proto.weshnet.protocol.v1.GroupInfo.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ActivateGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ActivateGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ActivateGroup.displayName = 'proto.weshnet.protocol.v1.ActivateGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ActivateGroup.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ActivateGroup.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ActivateGroup.Request.displayName = 'proto.weshnet.protocol.v1.ActivateGroup.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ActivateGroup.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ActivateGroup.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ActivateGroup.Reply.displayName = 'proto.weshnet.protocol.v1.ActivateGroup.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DeactivateGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DeactivateGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DeactivateGroup.displayName = 'proto.weshnet.protocol.v1.DeactivateGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DeactivateGroup.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DeactivateGroup.Request.displayName = 'proto.weshnet.protocol.v1.DeactivateGroup.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DeactivateGroup.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DeactivateGroup.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DeactivateGroup.Reply.displayName = 'proto.weshnet.protocol.v1.DeactivateGroup.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupDeviceStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupDeviceStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupDeviceStatus.displayName = 'proto.weshnet.protocol.v1.GroupDeviceStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupDeviceStatus.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupDeviceStatus.Request.displayName = 'proto.weshnet.protocol.v1.GroupDeviceStatus.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupDeviceStatus.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.displayName = 'proto.weshnet.protocol.v1.GroupDeviceStatus.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.displayName = 'proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.displayName = 'proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.displayName = 'proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DebugListGroups = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DebugListGroups, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DebugListGroups.displayName = 'proto.weshnet.protocol.v1.DebugListGroups';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DebugListGroups.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DebugListGroups.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DebugListGroups.Request.displayName = 'proto.weshnet.protocol.v1.DebugListGroups.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DebugListGroups.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DebugListGroups.Reply.displayName = 'proto.weshnet.protocol.v1.DebugListGroups.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DebugInspectGroupStore, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DebugInspectGroupStore.displayName = 'proto.weshnet.protocol.v1.DebugInspectGroupStore';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DebugInspectGroupStore.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.displayName = 'proto.weshnet.protocol.v1.DebugInspectGroupStore.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.displayName = 'proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DebugGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DebugGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DebugGroup.displayName = 'proto.weshnet.protocol.v1.DebugGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DebugGroup.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.DebugGroup.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DebugGroup.Request.displayName = 'proto.weshnet.protocol.v1.DebugGroup.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.DebugGroup.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.DebugGroup.Reply.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.DebugGroup.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.DebugGroup.Reply.displayName = 'proto.weshnet.protocol.v1.DebugGroup.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ShareableContact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ShareableContact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ShareableContact.displayName = 'proto.weshnet.protocol.v1.ShareableContact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ServiceTokenSupportedService, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ServiceTokenSupportedService.displayName = 'proto.weshnet.protocol.v1.ServiceTokenSupportedService';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ServiceToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.ServiceToken.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.ServiceToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ServiceToken.displayName = 'proto.weshnet.protocol.v1.ServiceToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.displayName = 'proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.displayName = 'proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.displayName = 'proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.displayName = 'proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.displayName = 'proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.displayName = 'proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.VerifiedCredentialsList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.VerifiedCredentialsList.displayName = 'proto.weshnet.protocol.v1.VerifiedCredentialsList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.VerifiedCredentialsList.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.displayName = 'proto.weshnet.protocol.v1.VerifiedCredentialsList.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.displayName = 'proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.displayName = 'proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.displayName = 'proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply.displayName = 'proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.displayName = 'proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.displayName = 'proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.displayName = 'proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.SystemInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.SystemInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.SystemInfo.displayName = 'proto.weshnet.protocol.v1.SystemInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.SystemInfo.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.SystemInfo.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.SystemInfo.Request.displayName = 'proto.weshnet.protocol.v1.SystemInfo.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.SystemInfo.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.SystemInfo.Reply.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.SystemInfo.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.SystemInfo.Reply.displayName = 'proto.weshnet.protocol.v1.SystemInfo.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.SystemInfo.OrbitDB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.SystemInfo.OrbitDB.displayName = 'proto.weshnet.protocol.v1.SystemInfo.OrbitDB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.displayName = 'proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.SystemInfo.P2P = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.SystemInfo.P2P, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.SystemInfo.P2P.displayName = 'proto.weshnet.protocol.v1.SystemInfo.P2P';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.SystemInfo.Process = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.SystemInfo.Process, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.SystemInfo.Process.displayName = 'proto.weshnet.protocol.v1.SystemInfo.Process';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.PeerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.PeerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.PeerList.displayName = 'proto.weshnet.protocol.v1.PeerList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.PeerList.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.PeerList.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.PeerList.Request.displayName = 'proto.weshnet.protocol.v1.PeerList.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.PeerList.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.PeerList.Reply.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.PeerList.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.PeerList.Reply.displayName = 'proto.weshnet.protocol.v1.PeerList.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.PeerList.Peer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.PeerList.Peer.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.PeerList.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.PeerList.Peer.displayName = 'proto.weshnet.protocol.v1.PeerList.Peer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.PeerList.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.PeerList.Route.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.PeerList.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.PeerList.Route.displayName = 'proto.weshnet.protocol.v1.PeerList.Route';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.PeerList.Stream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.PeerList.Stream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.PeerList.Stream.displayName = 'proto.weshnet.protocol.v1.PeerList.Stream';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.Progress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.Progress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.Progress.displayName = 'proto.weshnet.protocol.v1.Progress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.OutOfStoreMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.OutOfStoreMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.OutOfStoreMessage.displayName = 'proto.weshnet.protocol.v1.OutOfStoreMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.displayName = 'proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.OutOfStoreReceive = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.OutOfStoreReceive, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.OutOfStoreReceive.displayName = 'proto.weshnet.protocol.v1.OutOfStoreReceive';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.OutOfStoreReceive.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.OutOfStoreReceive.Request.displayName = 'proto.weshnet.protocol.v1.OutOfStoreReceive.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.OutOfStoreReceive.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.displayName = 'proto.weshnet.protocol.v1.OutOfStoreReceive.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.OutOfStoreSeal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.OutOfStoreSeal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.OutOfStoreSeal.displayName = 'proto.weshnet.protocol.v1.OutOfStoreSeal';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.OutOfStoreSeal.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.OutOfStoreSeal.Request.displayName = 'proto.weshnet.protocol.v1.OutOfStoreSeal.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.OutOfStoreSeal.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.displayName = 'proto.weshnet.protocol.v1.OutOfStoreSeal.Reply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.displayName = 'proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.FirstLastCounters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.FirstLastCounters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.FirstLastCounters.displayName = 'proto.weshnet.protocol.v1.FirstLastCounters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.OrbitDBMessageHeads, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.OrbitDBMessageHeads.displayName = 'proto.weshnet.protocol.v1.OrbitDBMessageHeads';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.displayName = 'proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.RefreshContactRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.RefreshContactRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.RefreshContactRequest.displayName = 'proto.weshnet.protocol.v1.RefreshContactRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.RefreshContactRequest.Peer.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.RefreshContactRequest.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.RefreshContactRequest.Peer.displayName = 'proto.weshnet.protocol.v1.RefreshContactRequest.Peer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.weshnet.protocol.v1.RefreshContactRequest.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.RefreshContactRequest.Request.displayName = 'proto.weshnet.protocol.v1.RefreshContactRequest.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.protocol.v1.RefreshContactRequest.Reply.repeatedFields_, null);
};
goog.inherits(proto.weshnet.protocol.v1.RefreshContactRequest.Reply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.protocol.v1.RefreshContactRequest.Reply.displayName = 'proto.weshnet.protocol.v1.RefreshContactRequest.Reply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.Account.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.Account.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.Account} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.Account.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.weshnet.protocol.v1.Group.toObject(includeInstance, f),
    accountPrivateKey: msg.getAccountPrivateKey_asB64(),
    aliasPrivateKey: msg.getAliasPrivateKey_asB64(),
    publicRendezvousSeed: msg.getPublicRendezvousSeed_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.Account}
 */
proto.weshnet.protocol.v1.Account.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.Account;
  return proto.weshnet.protocol.v1.Account.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.Account} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.Account}
 */
proto.weshnet.protocol.v1.Account.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.Group;
      reader.readMessage(value,proto.weshnet.protocol.v1.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountPrivateKey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAliasPrivateKey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicRendezvousSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Account.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.Account.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.Account} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.Account.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.Group.serializeBinaryToWriter
    );
  }
  f = message.getAccountPrivateKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAliasPrivateKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPublicRendezvousSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional Group group = 1;
 * @return {?proto.weshnet.protocol.v1.Group}
 */
proto.weshnet.protocol.v1.Account.prototype.getGroup = function() {
  return /** @type{?proto.weshnet.protocol.v1.Group} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.Group, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.Group|undefined} value
 * @return {!proto.weshnet.protocol.v1.Account} returns this
*/
proto.weshnet.protocol.v1.Account.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.Account} returns this
 */
proto.weshnet.protocol.v1.Account.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.Account.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes account_private_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.Account.prototype.getAccountPrivateKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes account_private_key = 2;
 * This is a type-conversion wrapper around `getAccountPrivateKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.Account.prototype.getAccountPrivateKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountPrivateKey()));
};


/**
 * optional bytes account_private_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountPrivateKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Account.prototype.getAccountPrivateKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountPrivateKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.Account} returns this
 */
proto.weshnet.protocol.v1.Account.prototype.setAccountPrivateKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes alias_private_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.Account.prototype.getAliasPrivateKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes alias_private_key = 3;
 * This is a type-conversion wrapper around `getAliasPrivateKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.Account.prototype.getAliasPrivateKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAliasPrivateKey()));
};


/**
 * optional bytes alias_private_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAliasPrivateKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Account.prototype.getAliasPrivateKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAliasPrivateKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.Account} returns this
 */
proto.weshnet.protocol.v1.Account.prototype.setAliasPrivateKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes public_rendezvous_seed = 4;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.Account.prototype.getPublicRendezvousSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes public_rendezvous_seed = 4;
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {string}
 */
proto.weshnet.protocol.v1.Account.prototype.getPublicRendezvousSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicRendezvousSeed()));
};


/**
 * optional bytes public_rendezvous_seed = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Account.prototype.getPublicRendezvousSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicRendezvousSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.Account} returns this
 */
proto.weshnet.protocol.v1.Account.prototype.setPublicRendezvousSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    secret: msg.getSecret_asB64(),
    secretSig: msg.getSecretSig_asB64(),
    groupType: jspb.Message.getFieldWithDefault(msg, 4, 0),
    signPub: msg.getSignPub_asB64(),
    linkKey: msg.getLinkKey_asB64(),
    linkKeySig: msg.getLinkKeySig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.Group}
 */
proto.weshnet.protocol.v1.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.Group;
  return proto.weshnet.protocol.v1.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.Group}
 */
proto.weshnet.protocol.v1.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecret(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecretSig(value);
      break;
    case 4:
      var value = /** @type {!proto.weshnet.protocol.v1.GroupType} */ (reader.readEnum());
      msg.setGroupType(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignPub(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLinkKey(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLinkKeySig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSecret_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSecretSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getGroupType();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSignPub_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getLinkKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getLinkKeySig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.Group.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.Group.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Group.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.Group} returns this
 */
proto.weshnet.protocol.v1.Group.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes secret = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.Group.prototype.getSecret = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes secret = 2;
 * This is a type-conversion wrapper around `getSecret()`
 * @return {string}
 */
proto.weshnet.protocol.v1.Group.prototype.getSecret_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecret()));
};


/**
 * optional bytes secret = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecret()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Group.prototype.getSecret_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecret()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.Group} returns this
 */
proto.weshnet.protocol.v1.Group.prototype.setSecret = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes secret_sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.Group.prototype.getSecretSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes secret_sig = 3;
 * This is a type-conversion wrapper around `getSecretSig()`
 * @return {string}
 */
proto.weshnet.protocol.v1.Group.prototype.getSecretSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecretSig()));
};


/**
 * optional bytes secret_sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecretSig()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Group.prototype.getSecretSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecretSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.Group} returns this
 */
proto.weshnet.protocol.v1.Group.prototype.setSecretSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional GroupType group_type = 4;
 * @return {!proto.weshnet.protocol.v1.GroupType}
 */
proto.weshnet.protocol.v1.Group.prototype.getGroupType = function() {
  return /** @type {!proto.weshnet.protocol.v1.GroupType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.GroupType} value
 * @return {!proto.weshnet.protocol.v1.Group} returns this
 */
proto.weshnet.protocol.v1.Group.prototype.setGroupType = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bytes sign_pub = 5;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.Group.prototype.getSignPub = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes sign_pub = 5;
 * This is a type-conversion wrapper around `getSignPub()`
 * @return {string}
 */
proto.weshnet.protocol.v1.Group.prototype.getSignPub_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignPub()));
};


/**
 * optional bytes sign_pub = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignPub()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Group.prototype.getSignPub_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignPub()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.Group} returns this
 */
proto.weshnet.protocol.v1.Group.prototype.setSignPub = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes link_key = 6;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.Group.prototype.getLinkKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes link_key = 6;
 * This is a type-conversion wrapper around `getLinkKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.Group.prototype.getLinkKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLinkKey()));
};


/**
 * optional bytes link_key = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLinkKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Group.prototype.getLinkKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLinkKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.Group} returns this
 */
proto.weshnet.protocol.v1.Group.prototype.setLinkKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes link_key_sig = 7;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.Group.prototype.getLinkKeySig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes link_key_sig = 7;
 * This is a type-conversion wrapper around `getLinkKeySig()`
 * @return {string}
 */
proto.weshnet.protocol.v1.Group.prototype.getLinkKeySig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLinkKeySig()));
};


/**
 * optional bytes link_key_sig = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLinkKeySig()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Group.prototype.getLinkKeySig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLinkKeySig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.Group} returns this
 */
proto.weshnet.protocol.v1.Group.prototype.setLinkKeySig = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.GroupHeadsExport.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupHeadsExport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupHeadsExport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupHeadsExport.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    signPub: msg.getSignPub_asB64(),
    metadataHeadsCidsList: msg.getMetadataHeadsCidsList_asB64(),
    messagesHeadsCidsList: msg.getMessagesHeadsCidsList_asB64(),
    linkKey: msg.getLinkKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupHeadsExport;
  return proto.weshnet.protocol.v1.GroupHeadsExport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupHeadsExport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignPub(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addMetadataHeadsCids(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addMessagesHeadsCids(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLinkKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupHeadsExport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupHeadsExport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupHeadsExport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignPub_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMetadataHeadsCidsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
  f = message.getMessagesHeadsCidsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = message.getLinkKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport} returns this
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes sign_pub = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getSignPub = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sign_pub = 2;
 * This is a type-conversion wrapper around `getSignPub()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getSignPub_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignPub()));
};


/**
 * optional bytes sign_pub = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignPub()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getSignPub_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignPub()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport} returns this
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.setSignPub = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated bytes metadata_heads_cids = 3;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getMetadataHeadsCidsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * repeated bytes metadata_heads_cids = 3;
 * This is a type-conversion wrapper around `getMetadataHeadsCidsList()`
 * @return {!Array<string>}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getMetadataHeadsCidsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getMetadataHeadsCidsList()));
};


/**
 * repeated bytes metadata_heads_cids = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadataHeadsCidsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getMetadataHeadsCidsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getMetadataHeadsCidsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport} returns this
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.setMetadataHeadsCidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport} returns this
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.addMetadataHeadsCids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport} returns this
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.clearMetadataHeadsCidsList = function() {
  return this.setMetadataHeadsCidsList([]);
};


/**
 * repeated bytes messages_heads_cids = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getMessagesHeadsCidsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes messages_heads_cids = 4;
 * This is a type-conversion wrapper around `getMessagesHeadsCidsList()`
 * @return {!Array<string>}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getMessagesHeadsCidsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getMessagesHeadsCidsList()));
};


/**
 * repeated bytes messages_heads_cids = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessagesHeadsCidsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getMessagesHeadsCidsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getMessagesHeadsCidsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport} returns this
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.setMessagesHeadsCidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport} returns this
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.addMessagesHeadsCids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport} returns this
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.clearMessagesHeadsCidsList = function() {
  return this.setMessagesHeadsCidsList([]);
};


/**
 * optional bytes link_key = 5;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getLinkKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes link_key = 5;
 * This is a type-conversion wrapper around `getLinkKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getLinkKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLinkKey()));
};


/**
 * optional bytes link_key = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLinkKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.getLinkKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLinkKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupHeadsExport} returns this
 */
proto.weshnet.protocol.v1.GroupHeadsExport.prototype.setLinkKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    payload: msg.getPayload_asB64(),
    sig: msg.getSig_asB64(),
    protocolMetadata: (f = msg.getProtocolMetadata()) && proto.weshnet.protocol.v1.ProtocolMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupMetadata}
 */
proto.weshnet.protocol.v1.GroupMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupMetadata;
  return proto.weshnet.protocol.v1.GroupMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupMetadata}
 */
proto.weshnet.protocol.v1.GroupMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.weshnet.protocol.v1.EventType} */ (reader.readEnum());
      msg.setEventType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 4:
      var value = new proto.weshnet.protocol.v1.ProtocolMetadata;
      reader.readMessage(value,proto.weshnet.protocol.v1.ProtocolMetadata.deserializeBinaryFromReader);
      msg.setProtocolMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getProtocolMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.weshnet.protocol.v1.ProtocolMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional EventType event_type = 1;
 * @return {!proto.weshnet.protocol.v1.EventType}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.getEventType = function() {
  return /** @type {!proto.weshnet.protocol.v1.EventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.EventType} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadata} returns this
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.setEventType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadata} returns this
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sig = 3;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadata} returns this
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional ProtocolMetadata protocol_metadata = 4;
 * @return {?proto.weshnet.protocol.v1.ProtocolMetadata}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.getProtocolMetadata = function() {
  return /** @type{?proto.weshnet.protocol.v1.ProtocolMetadata} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.ProtocolMetadata, 4));
};


/**
 * @param {?proto.weshnet.protocol.v1.ProtocolMetadata|undefined} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadata} returns this
*/
proto.weshnet.protocol.v1.GroupMetadata.prototype.setProtocolMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.GroupMetadata} returns this
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.clearProtocolMetadata = function() {
  return this.setProtocolMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMetadata.prototype.hasProtocolMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    event: msg.getEvent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupEnvelope}
 */
proto.weshnet.protocol.v1.GroupEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupEnvelope;
  return proto.weshnet.protocol.v1.GroupEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupEnvelope}
 */
proto.weshnet.protocol.v1.GroupEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEvent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupEnvelope.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupEnvelope.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupEnvelope.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupEnvelope} returns this
 */
proto.weshnet.protocol.v1.GroupEnvelope.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes event = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupEnvelope.prototype.getEvent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes event = 2;
 * This is a type-conversion wrapper around `getEvent()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupEnvelope.prototype.getEvent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvent()));
};


/**
 * optional bytes event = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvent()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupEnvelope.prototype.getEvent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupEnvelope} returns this
 */
proto.weshnet.protocol.v1.GroupEnvelope.prototype.setEvent = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MessageHeaders.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MessageHeaders} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MessageHeaders.toObject = function(includeInstance, msg) {
  var f, obj = {
    counter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    devicePk: msg.getDevicePk_asB64(),
    sig: msg.getSig_asB64(),
    metadataMap: (f = msg.getMetadataMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MessageHeaders}
 */
proto.weshnet.protocol.v1.MessageHeaders.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MessageHeaders;
  return proto.weshnet.protocol.v1.MessageHeaders.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MessageHeaders} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MessageHeaders}
 */
proto.weshnet.protocol.v1.MessageHeaders.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCounter(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 4:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MessageHeaders.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MessageHeaders} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MessageHeaders.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCounter();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * optional uint64 counter = 1;
 * @return {number}
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.MessageHeaders} returns this
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.setCounter = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bytes device_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes device_pk = 2;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MessageHeaders} returns this
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sig = 3;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MessageHeaders} returns this
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * map<string, string> metadata = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.weshnet.protocol.v1.MessageHeaders} returns this
 */
proto.weshnet.protocol.v1.MessageHeaders.prototype.clearMetadataMap = function() {
  this.getMetadataMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ProtocolMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ProtocolMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ProtocolMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ProtocolMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ProtocolMetadata}
 */
proto.weshnet.protocol.v1.ProtocolMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ProtocolMetadata;
  return proto.weshnet.protocol.v1.ProtocolMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ProtocolMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ProtocolMetadata}
 */
proto.weshnet.protocol.v1.ProtocolMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ProtocolMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ProtocolMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ProtocolMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ProtocolMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.EncryptedMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.EncryptedMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.EncryptedMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.EncryptedMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    plaintext: msg.getPlaintext_asB64(),
    protocolMetadata: (f = msg.getProtocolMetadata()) && proto.weshnet.protocol.v1.ProtocolMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.EncryptedMessage}
 */
proto.weshnet.protocol.v1.EncryptedMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.EncryptedMessage;
  return proto.weshnet.protocol.v1.EncryptedMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.EncryptedMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.EncryptedMessage}
 */
proto.weshnet.protocol.v1.EncryptedMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlaintext(value);
      break;
    case 2:
      var value = new proto.weshnet.protocol.v1.ProtocolMetadata;
      reader.readMessage(value,proto.weshnet.protocol.v1.ProtocolMetadata.deserializeBinaryFromReader);
      msg.setProtocolMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.EncryptedMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.EncryptedMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.EncryptedMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.EncryptedMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlaintext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getProtocolMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.weshnet.protocol.v1.ProtocolMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes plaintext = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.EncryptedMessage.prototype.getPlaintext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes plaintext = 1;
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {string}
 */
proto.weshnet.protocol.v1.EncryptedMessage.prototype.getPlaintext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlaintext()));
};


/**
 * optional bytes plaintext = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.EncryptedMessage.prototype.getPlaintext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlaintext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.EncryptedMessage} returns this
 */
proto.weshnet.protocol.v1.EncryptedMessage.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional ProtocolMetadata protocol_metadata = 2;
 * @return {?proto.weshnet.protocol.v1.ProtocolMetadata}
 */
proto.weshnet.protocol.v1.EncryptedMessage.prototype.getProtocolMetadata = function() {
  return /** @type{?proto.weshnet.protocol.v1.ProtocolMetadata} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.ProtocolMetadata, 2));
};


/**
 * @param {?proto.weshnet.protocol.v1.ProtocolMetadata|undefined} value
 * @return {!proto.weshnet.protocol.v1.EncryptedMessage} returns this
*/
proto.weshnet.protocol.v1.EncryptedMessage.prototype.setProtocolMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.EncryptedMessage} returns this
 */
proto.weshnet.protocol.v1.EncryptedMessage.prototype.clearProtocolMetadata = function() {
  return this.setProtocolMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.EncryptedMessage.prototype.hasProtocolMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MessageEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MessageEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MessageEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageHeaders: msg.getMessageHeaders_asB64(),
    message: msg.getMessage_asB64(),
    nonce: msg.getNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MessageEnvelope}
 */
proto.weshnet.protocol.v1.MessageEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MessageEnvelope;
  return proto.weshnet.protocol.v1.MessageEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MessageEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MessageEnvelope}
 */
proto.weshnet.protocol.v1.MessageEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageHeaders(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MessageEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MessageEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MessageEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageHeaders_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes message_headers = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.getMessageHeaders = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes message_headers = 1;
 * This is a type-conversion wrapper around `getMessageHeaders()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.getMessageHeaders_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageHeaders()));
};


/**
 * optional bytes message_headers = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageHeaders()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.getMessageHeaders_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageHeaders()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MessageEnvelope} returns this
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.setMessageHeaders = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes message = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.getMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes message = 2;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * optional bytes message = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MessageEnvelope} returns this
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.setMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes nonce = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes nonce = 3;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MessageEnvelope} returns this
 */
proto.weshnet.protocol.v1.MessageEnvelope.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.EventContext.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.EventContext.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.EventContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.EventContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.EventContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    parentIdsList: msg.getParentIdsList_asB64(),
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.EventContext}
 */
proto.weshnet.protocol.v1.EventContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.EventContext;
  return proto.weshnet.protocol.v1.EventContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.EventContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.EventContext}
 */
proto.weshnet.protocol.v1.EventContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addParentIds(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.EventContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.EventContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.EventContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.EventContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getParentIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.EventContext.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.weshnet.protocol.v1.EventContext.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.EventContext.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.EventContext} returns this
 */
proto.weshnet.protocol.v1.EventContext.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes parent_ids = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.weshnet.protocol.v1.EventContext.prototype.getParentIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes parent_ids = 2;
 * This is a type-conversion wrapper around `getParentIdsList()`
 * @return {!Array<string>}
 */
proto.weshnet.protocol.v1.EventContext.prototype.getParentIdsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getParentIdsList()));
};


/**
 * repeated bytes parent_ids = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentIdsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.weshnet.protocol.v1.EventContext.prototype.getParentIdsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getParentIdsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.weshnet.protocol.v1.EventContext} returns this
 */
proto.weshnet.protocol.v1.EventContext.prototype.setParentIdsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.EventContext} returns this
 */
proto.weshnet.protocol.v1.EventContext.prototype.addParentIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.EventContext} returns this
 */
proto.weshnet.protocol.v1.EventContext.prototype.clearParentIdsList = function() {
  return this.setParentIdsList([]);
};


/**
 * optional bytes group_pk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.EventContext.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes group_pk = 3;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.EventContext.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.EventContext.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.EventContext} returns this
 */
proto.weshnet.protocol.v1.EventContext.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupMetadataPayloadSent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupMetadataPayloadSent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    message: msg.getMessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupMetadataPayloadSent}
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupMetadataPayloadSent;
  return proto.weshnet.protocol.v1.GroupMetadataPayloadSent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupMetadataPayloadSent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupMetadataPayloadSent}
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupMetadataPayloadSent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupMetadataPayloadSent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataPayloadSent} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes message = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.prototype.getMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes message = 2;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * optional bytes message = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataPayloadSent} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataPayloadSent.prototype.setMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactAliasKeyAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeyAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    aliasPk: msg.getAliasPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeyAdded}
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactAliasKeyAdded;
  return proto.weshnet.protocol.v1.ContactAliasKeyAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeyAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeyAdded}
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAliasPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactAliasKeyAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeyAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAliasPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeyAdded} returns this
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes alias_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.prototype.getAliasPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes alias_pk = 2;
 * This is a type-conversion wrapper around `getAliasPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.prototype.getAliasPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAliasPk()));
};


/**
 * optional bytes alias_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAliasPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.prototype.getAliasPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAliasPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeyAdded} returns this
 */
proto.weshnet.protocol.v1.ContactAliasKeyAdded.prototype.setAliasPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupMemberDeviceAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupMemberDeviceAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberPk: msg.getMemberPk_asB64(),
    devicePk: msg.getDevicePk_asB64(),
    memberSig: msg.getMemberSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupMemberDeviceAdded}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupMemberDeviceAdded;
  return proto.weshnet.protocol.v1.GroupMemberDeviceAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupMemberDeviceAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupMemberDeviceAdded}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMemberPk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMemberSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupMemberDeviceAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupMemberDeviceAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMemberSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes member_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.getMemberPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes member_pk = 1;
 * This is a type-conversion wrapper around `getMemberPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.getMemberPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMemberPk()));
};


/**
 * optional bytes member_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemberPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.getMemberPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMemberPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMemberDeviceAdded} returns this
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.setMemberPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes device_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes device_pk = 2;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMemberDeviceAdded} returns this
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes member_sig = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.getMemberSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes member_sig = 3;
 * This is a type-conversion wrapper around `getMemberSig()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.getMemberSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMemberSig()));
};


/**
 * optional bytes member_sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemberSig()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.getMemberSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMemberSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMemberDeviceAdded} returns this
 */
proto.weshnet.protocol.v1.GroupMemberDeviceAdded.prototype.setMemberSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DeviceChainKey.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DeviceChainKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DeviceChainKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DeviceChainKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    chainKey: msg.getChainKey_asB64(),
    counter: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DeviceChainKey}
 */
proto.weshnet.protocol.v1.DeviceChainKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DeviceChainKey;
  return proto.weshnet.protocol.v1.DeviceChainKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DeviceChainKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DeviceChainKey}
 */
proto.weshnet.protocol.v1.DeviceChainKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChainKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DeviceChainKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DeviceChainKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DeviceChainKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DeviceChainKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChainKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional bytes chain_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.DeviceChainKey.prototype.getChainKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chain_key = 1;
 * This is a type-conversion wrapper around `getChainKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.DeviceChainKey.prototype.getChainKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChainKey()));
};


/**
 * optional bytes chain_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChainKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DeviceChainKey.prototype.getChainKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChainKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.DeviceChainKey} returns this
 */
proto.weshnet.protocol.v1.DeviceChainKey.prototype.setChainKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional uint64 counter = 2;
 * @return {number}
 */
proto.weshnet.protocol.v1.DeviceChainKey.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.DeviceChainKey} returns this
 */
proto.weshnet.protocol.v1.DeviceChainKey.prototype.setCounter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    destMemberPk: msg.getDestMemberPk_asB64(),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded;
  return proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDestMemberPk(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDestMemberPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes dest_member_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.getDestMemberPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes dest_member_pk = 2;
 * This is a type-conversion wrapper around `getDestMemberPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.getDestMemberPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDestMemberPk()));
};


/**
 * optional bytes dest_member_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDestMemberPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.getDestMemberPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDestMemberPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.setDestMemberPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceChainKeyAdded.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    aliasResolver: msg.getAliasResolver_asB64(),
    aliasProof: msg.getAliasProof_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded;
  return proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAliasResolver(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAliasProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAliasResolver_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAliasProof_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes alias_resolver = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.getAliasResolver = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes alias_resolver = 2;
 * This is a type-conversion wrapper around `getAliasResolver()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.getAliasResolver_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAliasResolver()));
};


/**
 * optional bytes alias_resolver = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAliasResolver()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.getAliasResolver_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAliasResolver()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.setAliasResolver = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes alias_proof = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.getAliasProof = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes alias_proof = 3;
 * This is a type-conversion wrapper around `getAliasProof()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.getAliasProof_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAliasProof()));
};


/**
 * optional bytes alias_proof = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAliasProof()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.getAliasProof_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAliasProof()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverAdded.prototype.setAliasProof = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    granteeMemberPk: msg.getGranteeMemberPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted;
  return proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGranteeMemberPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGranteeMemberPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes grantee_member_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.prototype.getGranteeMemberPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes grantee_member_pk = 2;
 * This is a type-conversion wrapper around `getGranteeMemberPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.prototype.getGranteeMemberPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGranteeMemberPk()));
};


/**
 * optional bytes grantee_member_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGranteeMemberPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.prototype.getGranteeMemberPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGranteeMemberPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGranted.prototype.setGranteeMemberPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.toObject = function(includeInstance, msg) {
  var f, obj = {
    memberPk: msg.getMemberPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced;
  return proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMemberPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMemberPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes member_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.prototype.getMemberPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes member_pk = 1;
 * This is a type-conversion wrapper around `getMemberPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.prototype.getMemberPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMemberPk()));
};


/**
 * optional bytes member_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemberPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.prototype.getMemberPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMemberPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupInitialMemberAnnounced.prototype.setMemberPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    seed: msg.getSeed_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed}
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed;
  return proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed}
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed} returns this
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes seed = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.prototype.getSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes seed = 2;
 * This is a type-conversion wrapper around `getSeed()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.prototype.getSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSeed()));
};


/**
 * optional bytes seed = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSeed()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.prototype.getSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed} returns this
 */
proto.weshnet.protocol.v1.GroupAddAdditionalRendezvousSeed.prototype.setSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    seed: msg.getSeed_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed}
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed;
  return proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed}
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed} returns this
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes seed = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.prototype.getSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes seed = 2;
 * This is a type-conversion wrapper around `getSeed()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.prototype.getSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSeed()));
};


/**
 * optional bytes seed = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSeed()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.prototype.getSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed} returns this
 */
proto.weshnet.protocol.v1.GroupRemoveAdditionalRendezvousSeed.prototype.setSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountGroupJoined.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountGroupJoined.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountGroupJoined} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountGroupJoined.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    group: (f = msg.getGroup()) && proto.weshnet.protocol.v1.Group.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountGroupJoined}
 */
proto.weshnet.protocol.v1.AccountGroupJoined.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountGroupJoined;
  return proto.weshnet.protocol.v1.AccountGroupJoined.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountGroupJoined} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountGroupJoined}
 */
proto.weshnet.protocol.v1.AccountGroupJoined.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = new proto.weshnet.protocol.v1.Group;
      reader.readMessage(value,proto.weshnet.protocol.v1.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountGroupJoined.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountGroupJoined.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountGroupJoined} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountGroupJoined.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.weshnet.protocol.v1.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountGroupJoined.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountGroupJoined.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountGroupJoined.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountGroupJoined} returns this
 */
proto.weshnet.protocol.v1.AccountGroupJoined.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Group group = 2;
 * @return {?proto.weshnet.protocol.v1.Group}
 */
proto.weshnet.protocol.v1.AccountGroupJoined.prototype.getGroup = function() {
  return /** @type{?proto.weshnet.protocol.v1.Group} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.Group, 2));
};


/**
 * @param {?proto.weshnet.protocol.v1.Group|undefined} value
 * @return {!proto.weshnet.protocol.v1.AccountGroupJoined} returns this
*/
proto.weshnet.protocol.v1.AccountGroupJoined.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.AccountGroupJoined} returns this
 */
proto.weshnet.protocol.v1.AccountGroupJoined.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.AccountGroupJoined.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountGroupLeft.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountGroupLeft.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountGroupLeft} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountGroupLeft.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountGroupLeft}
 */
proto.weshnet.protocol.v1.AccountGroupLeft.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountGroupLeft;
  return proto.weshnet.protocol.v1.AccountGroupLeft.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountGroupLeft} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountGroupLeft}
 */
proto.weshnet.protocol.v1.AccountGroupLeft.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountGroupLeft.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountGroupLeft.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountGroupLeft} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountGroupLeft.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountGroupLeft.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountGroupLeft.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountGroupLeft.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountGroupLeft} returns this
 */
proto.weshnet.protocol.v1.AccountGroupLeft.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes group_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountGroupLeft.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes group_pk = 2;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountGroupLeft.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountGroupLeft.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountGroupLeft} returns this
 */
proto.weshnet.protocol.v1.AccountGroupLeft.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountContactRequestDisabled.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestDisabled} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestDisabled}
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountContactRequestDisabled;
  return proto.weshnet.protocol.v1.AccountContactRequestDisabled.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestDisabled} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestDisabled}
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountContactRequestDisabled.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestDisabled} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestDisabled} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestDisabled.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountContactRequestEnabled.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestEnabled} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestEnabled}
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountContactRequestEnabled;
  return proto.weshnet.protocol.v1.AccountContactRequestEnabled.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestEnabled} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestEnabled}
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountContactRequestEnabled.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestEnabled} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestEnabled} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestEnabled.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestReferenceReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    publicRendezvousSeed: msg.getPublicRendezvousSeed_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestReferenceReset}
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountContactRequestReferenceReset;
  return proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestReferenceReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestReferenceReset}
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicRendezvousSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestReferenceReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicRendezvousSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestReferenceReset} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes public_rendezvous_seed = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.prototype.getPublicRendezvousSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes public_rendezvous_seed = 2;
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.prototype.getPublicRendezvousSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicRendezvousSeed()));
};


/**
 * optional bytes public_rendezvous_seed = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.prototype.getPublicRendezvousSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicRendezvousSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestReferenceReset} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestReferenceReset.prototype.setPublicRendezvousSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    groupPk: msg.getGroupPk_asB64(),
    contact: (f = msg.getContact()) && proto.weshnet.protocol.v1.ShareableContact.toObject(includeInstance, f),
    ownMetadata: msg.getOwnMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued;
  return proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 3:
      var value = new proto.weshnet.protocol.v1.ShareableContact;
      reader.readMessage(value,proto.weshnet.protocol.v1.ShareableContact.deserializeBinaryFromReader);
      msg.setContact(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwnMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getContact();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.weshnet.protocol.v1.ShareableContact.serializeBinaryToWriter
    );
  }
  f = message.getOwnMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes group_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes group_pk = 2;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional ShareableContact contact = 3;
 * @return {?proto.weshnet.protocol.v1.ShareableContact}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.getContact = function() {
  return /** @type{?proto.weshnet.protocol.v1.ShareableContact} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.ShareableContact, 3));
};


/**
 * @param {?proto.weshnet.protocol.v1.ShareableContact|undefined} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued} returns this
*/
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.setContact = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.clearContact = function() {
  return this.setContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.hasContact = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes own_metadata = 4;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.getOwnMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes own_metadata = 4;
 * This is a type-conversion wrapper around `getOwnMetadata()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.getOwnMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwnMetadata()));
};


/**
 * optional bytes own_metadata = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnMetadata()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.getOwnMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwnMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingEnqueued.prototype.setOwnMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    contactPk: msg.getContactPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent;
  return proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes contact_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contact_pk = 2;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestOutgoingSent.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    contactPk: msg.getContactPk_asB64(),
    contactRendezvousSeed: msg.getContactRendezvousSeed_asB64(),
    contactMetadata: msg.getContactMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived;
  return proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactRendezvousSeed(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getContactRendezvousSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getContactMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes contact_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contact_pk = 2;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes contact_rendezvous_seed = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getContactRendezvousSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes contact_rendezvous_seed = 3;
 * This is a type-conversion wrapper around `getContactRendezvousSeed()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getContactRendezvousSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactRendezvousSeed()));
};


/**
 * optional bytes contact_rendezvous_seed = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactRendezvousSeed()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getContactRendezvousSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactRendezvousSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.setContactRendezvousSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes contact_metadata = 4;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getContactMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes contact_metadata = 4;
 * This is a type-conversion wrapper around `getContactMetadata()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getContactMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactMetadata()));
};


/**
 * optional bytes contact_metadata = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactMetadata()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.getContactMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingReceived.prototype.setContactMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    contactPk: msg.getContactPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded;
  return proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes contact_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contact_pk = 2;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingDiscarded.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    contactPk: msg.getContactPk_asB64(),
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted;
  return proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes contact_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contact_pk = 2;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes group_pk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes group_pk = 3;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted} returns this
 */
proto.weshnet.protocol.v1.AccountContactRequestIncomingAccepted.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountContactBlocked.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountContactBlocked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountContactBlocked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactBlocked.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    contactPk: msg.getContactPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountContactBlocked}
 */
proto.weshnet.protocol.v1.AccountContactBlocked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountContactBlocked;
  return proto.weshnet.protocol.v1.AccountContactBlocked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountContactBlocked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountContactBlocked}
 */
proto.weshnet.protocol.v1.AccountContactBlocked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactBlocked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountContactBlocked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountContactBlocked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactBlocked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactBlocked.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactBlocked.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactBlocked.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactBlocked} returns this
 */
proto.weshnet.protocol.v1.AccountContactBlocked.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes contact_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactBlocked.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contact_pk = 2;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactBlocked.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactBlocked.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactBlocked} returns this
 */
proto.weshnet.protocol.v1.AccountContactBlocked.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountContactUnblocked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountContactUnblocked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    contactPk: msg.getContactPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountContactUnblocked}
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountContactUnblocked;
  return proto.weshnet.protocol.v1.AccountContactUnblocked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountContactUnblocked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountContactUnblocked}
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountContactUnblocked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountContactUnblocked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactUnblocked} returns this
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes contact_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contact_pk = 2;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountContactUnblocked} returns this
 */
proto.weshnet.protocol.v1.AccountContactUnblocked.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupReplicating.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupReplicating.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupReplicating} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupReplicating.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    authenticationUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    replicationServer: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupReplicating}
 */
proto.weshnet.protocol.v1.GroupReplicating.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupReplicating;
  return proto.weshnet.protocol.v1.GroupReplicating.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupReplicating} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupReplicating}
 */
proto.weshnet.protocol.v1.GroupReplicating.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthenticationUrl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplicationServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupReplicating.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupReplicating.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupReplicating} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupReplicating.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAuthenticationUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReplicationServer();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupReplicating.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupReplicating.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupReplicating.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupReplicating} returns this
 */
proto.weshnet.protocol.v1.GroupReplicating.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string authentication_url = 2;
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupReplicating.prototype.getAuthenticationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.GroupReplicating} returns this
 */
proto.weshnet.protocol.v1.GroupReplicating.prototype.setAuthenticationUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string replication_server = 3;
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupReplicating.prototype.getReplicationServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.GroupReplicating} returns this
 */
proto.weshnet.protocol.v1.GroupReplicating.prototype.setReplicationServer = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ServiceExportData.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ServiceExportData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ServiceExportData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceExportData.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ServiceExportData}
 */
proto.weshnet.protocol.v1.ServiceExportData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ServiceExportData;
  return proto.weshnet.protocol.v1.ServiceExportData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ServiceExportData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ServiceExportData}
 */
proto.weshnet.protocol.v1.ServiceExportData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceExportData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ServiceExportData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ServiceExportData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceExportData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ServiceExportData.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ServiceExportData.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ServiceExportData.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceExportData.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ServiceExportData.Request}
 */
proto.weshnet.protocol.v1.ServiceExportData.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ServiceExportData.Request;
  return proto.weshnet.protocol.v1.ServiceExportData.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ServiceExportData.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ServiceExportData.Request}
 */
proto.weshnet.protocol.v1.ServiceExportData.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceExportData.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ServiceExportData.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ServiceExportData.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceExportData.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ServiceExportData.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ServiceExportData.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    exportedData: msg.getExportedData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ServiceExportData.Reply}
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ServiceExportData.Reply;
  return proto.weshnet.protocol.v1.ServiceExportData.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ServiceExportData.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ServiceExportData.Reply}
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExportedData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ServiceExportData.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ServiceExportData.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExportedData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes exported_data = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply.prototype.getExportedData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes exported_data = 1;
 * This is a type-conversion wrapper around `getExportedData()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply.prototype.getExportedData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExportedData()));
};


/**
 * optional bytes exported_data = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExportedData()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply.prototype.getExportedData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExportedData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ServiceExportData.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceExportData.Reply.prototype.setExportedData = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ServiceGetConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ServiceGetConfiguration;
  return proto.weshnet.protocol.v1.ServiceGetConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ServiceGetConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState = {
  UNKNOWN: 0,
  ENABLED: 1,
  DISABLED: 2,
  UNAVAILABLE: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ServiceGetConfiguration.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Request}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ServiceGetConfiguration.Request;
  return proto.weshnet.protocol.v1.ServiceGetConfiguration.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Request}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ServiceGetConfiguration.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountPk: msg.getAccountPk_asB64(),
    devicePk: msg.getDevicePk_asB64(),
    accountGroupPk: msg.getAccountGroupPk_asB64(),
    peerId: jspb.Message.getFieldWithDefault(msg, 4, ""),
    listenersList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    bleEnabled: jspb.Message.getFieldWithDefault(msg, 6, 0),
    wifiP2pEnabled: jspb.Message.getFieldWithDefault(msg, 7, 0),
    mdnsEnabled: jspb.Message.getFieldWithDefault(msg, 8, 0),
    relayEnabled: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply;
  return proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountPk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccountGroupPk(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addListeners(value);
      break;
    case 6:
      var value = /** @type {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} */ (reader.readEnum());
      msg.setBleEnabled(value);
      break;
    case 7:
      var value = /** @type {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} */ (reader.readEnum());
      msg.setWifiP2pEnabled(value);
      break;
    case 8:
      var value = /** @type {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} */ (reader.readEnum());
      msg.setMdnsEnabled(value);
      break;
    case 9:
      var value = /** @type {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} */ (reader.readEnum());
      msg.setRelayEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAccountGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getListenersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getBleEnabled();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getWifiP2pEnabled();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getMdnsEnabled();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getRelayEnabled();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
};


/**
 * optional bytes account_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getAccountPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes account_pk = 1;
 * This is a type-conversion wrapper around `getAccountPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getAccountPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountPk()));
};


/**
 * optional bytes account_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getAccountPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.setAccountPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes device_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes device_pk = 2;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes account_group_pk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getAccountGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes account_group_pk = 3;
 * This is a type-conversion wrapper around `getAccountGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getAccountGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccountGroupPk()));
};


/**
 * optional bytes account_group_pk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccountGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getAccountGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccountGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.setAccountGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string peer_id = 4;
 * @return {string}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated string listeners = 5;
 * @return {!Array<string>}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getListenersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.setListenersList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.addListeners = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.clearListenersList = function() {
  return this.setListenersList([]);
};


/**
 * optional SettingState ble_enabled = 6;
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getBleEnabled = function() {
  return /** @type {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} value
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.setBleEnabled = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional SettingState wifi_p2p_enabled = 7;
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getWifiP2pEnabled = function() {
  return /** @type {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} value
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.setWifiP2pEnabled = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional SettingState mdns_enabled = 8;
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getMdnsEnabled = function() {
  return /** @type {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} value
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.setMdnsEnabled = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional SettingState relay_enabled = 9;
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState}
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.getRelayEnabled = function() {
  return /** @type {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.ServiceGetConfiguration.SettingState} value
 * @return {!proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply} returns this
 */
proto.weshnet.protocol.v1.ServiceGetConfiguration.Reply.prototype.setRelayEnabled = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestReference.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestReference.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestReference}
 */
proto.weshnet.protocol.v1.ContactRequestReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestReference;
  return proto.weshnet.protocol.v1.ContactRequestReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestReference}
 */
proto.weshnet.protocol.v1.ContactRequestReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestReference.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestReference.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestReference.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestReference.Request}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestReference.Request;
  return proto.weshnet.protocol.v1.ContactRequestReference.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestReference.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestReference.Request}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestReference.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestReference.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestReference.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestReference.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestReference.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicRendezvousSeed: msg.getPublicRendezvousSeed_asB64(),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestReference.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestReference.Reply;
  return proto.weshnet.protocol.v1.ContactRequestReference.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestReference.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestReference.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicRendezvousSeed(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestReference.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestReference.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicRendezvousSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.prototype.getPublicRendezvousSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.prototype.getPublicRendezvousSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicRendezvousSeed()));
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.prototype.getPublicRendezvousSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicRendezvousSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactRequestReference.Reply} returns this
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.prototype.setPublicRendezvousSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.ContactRequestReference.Reply} returns this
 */
proto.weshnet.protocol.v1.ContactRequestReference.Reply.prototype.setEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestDisable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestDisable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDisable.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDisable}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestDisable;
  return proto.weshnet.protocol.v1.ContactRequestDisable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDisable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDisable}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestDisable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDisable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDisable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestDisable.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestDisable.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDisable.Request}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestDisable.Request;
  return proto.weshnet.protocol.v1.ContactRequestDisable.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDisable.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDisable.Request}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestDisable.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDisable.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestDisable.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestDisable.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDisable.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestDisable.Reply;
  return proto.weshnet.protocol.v1.ContactRequestDisable.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDisable.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDisable.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestDisable.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDisable.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDisable.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestEnable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestEnable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestEnable.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestEnable}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestEnable;
  return proto.weshnet.protocol.v1.ContactRequestEnable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestEnable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestEnable}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestEnable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestEnable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestEnable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestEnable.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestEnable.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestEnable.Request}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestEnable.Request;
  return proto.weshnet.protocol.v1.ContactRequestEnable.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestEnable.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestEnable.Request}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestEnable.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestEnable.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestEnable.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestEnable.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicRendezvousSeed: msg.getPublicRendezvousSeed_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestEnable.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestEnable.Reply;
  return proto.weshnet.protocol.v1.ContactRequestEnable.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestEnable.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestEnable.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicRendezvousSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestEnable.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestEnable.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicRendezvousSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply.prototype.getPublicRendezvousSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply.prototype.getPublicRendezvousSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicRendezvousSeed()));
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply.prototype.getPublicRendezvousSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicRendezvousSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactRequestEnable.Reply} returns this
 */
proto.weshnet.protocol.v1.ContactRequestEnable.Reply.prototype.setPublicRendezvousSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestResetReference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestResetReference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestResetReference}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestResetReference;
  return proto.weshnet.protocol.v1.ContactRequestResetReference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestResetReference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestResetReference}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestResetReference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestResetReference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestResetReference.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestResetReference.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestResetReference.Request}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestResetReference.Request;
  return proto.weshnet.protocol.v1.ContactRequestResetReference.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestResetReference.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestResetReference.Request}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestResetReference.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestResetReference.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestResetReference.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicRendezvousSeed: msg.getPublicRendezvousSeed_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestResetReference.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestResetReference.Reply;
  return proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestResetReference.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestResetReference.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicRendezvousSeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestResetReference.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicRendezvousSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.prototype.getPublicRendezvousSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.prototype.getPublicRendezvousSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicRendezvousSeed()));
};


/**
 * optional bytes public_rendezvous_seed = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.prototype.getPublicRendezvousSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicRendezvousSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactRequestResetReference.Reply} returns this
 */
proto.weshnet.protocol.v1.ContactRequestResetReference.Reply.prototype.setPublicRendezvousSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestSend.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestSend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestSend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestSend.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestSend}
 */
proto.weshnet.protocol.v1.ContactRequestSend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestSend;
  return proto.weshnet.protocol.v1.ContactRequestSend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestSend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestSend}
 */
proto.weshnet.protocol.v1.ContactRequestSend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestSend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestSend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestSend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestSend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestSend.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestSend.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contact: (f = msg.getContact()) && proto.weshnet.protocol.v1.ShareableContact.toObject(includeInstance, f),
    ownMetadata: msg.getOwnMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestSend.Request}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestSend.Request;
  return proto.weshnet.protocol.v1.ContactRequestSend.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestSend.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestSend.Request}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.ShareableContact;
      reader.readMessage(value,proto.weshnet.protocol.v1.ShareableContact.deserializeBinaryFromReader);
      msg.setContact(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOwnMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestSend.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestSend.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.ShareableContact.serializeBinaryToWriter
    );
  }
  f = message.getOwnMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional ShareableContact contact = 1;
 * @return {?proto.weshnet.protocol.v1.ShareableContact}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.prototype.getContact = function() {
  return /** @type{?proto.weshnet.protocol.v1.ShareableContact} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.ShareableContact, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.ShareableContact|undefined} value
 * @return {!proto.weshnet.protocol.v1.ContactRequestSend.Request} returns this
*/
proto.weshnet.protocol.v1.ContactRequestSend.Request.prototype.setContact = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.ContactRequestSend.Request} returns this
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.prototype.clearContact = function() {
  return this.setContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.prototype.hasContact = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes own_metadata = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.prototype.getOwnMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes own_metadata = 2;
 * This is a type-conversion wrapper around `getOwnMetadata()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.prototype.getOwnMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOwnMetadata()));
};


/**
 * optional bytes own_metadata = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOwnMetadata()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.prototype.getOwnMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOwnMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactRequestSend.Request} returns this
 */
proto.weshnet.protocol.v1.ContactRequestSend.Request.prototype.setOwnMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestSend.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestSend.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestSend.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestSend.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestSend.Reply;
  return proto.weshnet.protocol.v1.ContactRequestSend.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestSend.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestSend.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestSend.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestSend.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestSend.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestSend.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestAccept.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestAccept} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestAccept.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestAccept}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestAccept;
  return proto.weshnet.protocol.v1.ContactRequestAccept.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestAccept} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestAccept}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestAccept.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestAccept} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestAccept.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestAccept.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestAccept.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contactPk: msg.getContactPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestAccept.Request}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestAccept.Request;
  return proto.weshnet.protocol.v1.ContactRequestAccept.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestAccept.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestAccept.Request}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestAccept.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestAccept.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes contact_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contact_pk = 1;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactRequestAccept.Request} returns this
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Request.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestAccept.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestAccept.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestAccept.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestAccept.Reply;
  return proto.weshnet.protocol.v1.ContactRequestAccept.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestAccept.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestAccept.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestAccept.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestAccept.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestAccept.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestDiscard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestDiscard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDiscard}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestDiscard;
  return proto.weshnet.protocol.v1.ContactRequestDiscard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDiscard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDiscard}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestDiscard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDiscard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestDiscard.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestDiscard.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contactPk: msg.getContactPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDiscard.Request}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestDiscard.Request;
  return proto.weshnet.protocol.v1.ContactRequestDiscard.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDiscard.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDiscard.Request}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestDiscard.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDiscard.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes contact_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contact_pk = 1;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactRequestDiscard.Request} returns this
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Request.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactRequestDiscard.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactRequestDiscard.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDiscard.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactRequestDiscard.Reply;
  return proto.weshnet.protocol.v1.ContactRequestDiscard.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDiscard.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactRequestDiscard.Reply}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactRequestDiscard.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactRequestDiscard.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactRequestDiscard.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ShareContact.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ShareContact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ShareContact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ShareContact.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ShareContact}
 */
proto.weshnet.protocol.v1.ShareContact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ShareContact;
  return proto.weshnet.protocol.v1.ShareContact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ShareContact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ShareContact}
 */
proto.weshnet.protocol.v1.ShareContact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ShareContact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ShareContact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ShareContact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ShareContact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ShareContact.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ShareContact.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ShareContact.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ShareContact.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ShareContact.Request}
 */
proto.weshnet.protocol.v1.ShareContact.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ShareContact.Request;
  return proto.weshnet.protocol.v1.ShareContact.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ShareContact.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ShareContact.Request}
 */
proto.weshnet.protocol.v1.ShareContact.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ShareContact.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ShareContact.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ShareContact.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ShareContact.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ShareContact.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ShareContact.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ShareContact.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ShareContact.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    encodedContact: msg.getEncodedContact_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ShareContact.Reply}
 */
proto.weshnet.protocol.v1.ShareContact.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ShareContact.Reply;
  return proto.weshnet.protocol.v1.ShareContact.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ShareContact.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ShareContact.Reply}
 */
proto.weshnet.protocol.v1.ShareContact.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncodedContact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ShareContact.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ShareContact.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ShareContact.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ShareContact.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncodedContact_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes encoded_contact = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ShareContact.Reply.prototype.getEncodedContact = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encoded_contact = 1;
 * This is a type-conversion wrapper around `getEncodedContact()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ShareContact.Reply.prototype.getEncodedContact_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncodedContact()));
};


/**
 * optional bytes encoded_contact = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncodedContact()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ShareContact.Reply.prototype.getEncodedContact_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncodedContact()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ShareContact.Reply} returns this
 */
proto.weshnet.protocol.v1.ShareContact.Reply.prototype.setEncodedContact = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DecodeContact.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DecodeContact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DecodeContact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DecodeContact.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DecodeContact}
 */
proto.weshnet.protocol.v1.DecodeContact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DecodeContact;
  return proto.weshnet.protocol.v1.DecodeContact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DecodeContact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DecodeContact}
 */
proto.weshnet.protocol.v1.DecodeContact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DecodeContact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DecodeContact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DecodeContact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DecodeContact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DecodeContact.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DecodeContact.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DecodeContact.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DecodeContact.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    encodedContact: msg.getEncodedContact_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DecodeContact.Request}
 */
proto.weshnet.protocol.v1.DecodeContact.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DecodeContact.Request;
  return proto.weshnet.protocol.v1.DecodeContact.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DecodeContact.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DecodeContact.Request}
 */
proto.weshnet.protocol.v1.DecodeContact.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncodedContact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DecodeContact.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DecodeContact.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DecodeContact.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DecodeContact.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncodedContact_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes encoded_contact = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.DecodeContact.Request.prototype.getEncodedContact = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encoded_contact = 1;
 * This is a type-conversion wrapper around `getEncodedContact()`
 * @return {string}
 */
proto.weshnet.protocol.v1.DecodeContact.Request.prototype.getEncodedContact_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncodedContact()));
};


/**
 * optional bytes encoded_contact = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncodedContact()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DecodeContact.Request.prototype.getEncodedContact_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncodedContact()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.DecodeContact.Request} returns this
 */
proto.weshnet.protocol.v1.DecodeContact.Request.prototype.setEncodedContact = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DecodeContact.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DecodeContact.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DecodeContact.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DecodeContact.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    contact: (f = msg.getContact()) && proto.weshnet.protocol.v1.ShareableContact.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DecodeContact.Reply}
 */
proto.weshnet.protocol.v1.DecodeContact.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DecodeContact.Reply;
  return proto.weshnet.protocol.v1.DecodeContact.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DecodeContact.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DecodeContact.Reply}
 */
proto.weshnet.protocol.v1.DecodeContact.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.ShareableContact;
      reader.readMessage(value,proto.weshnet.protocol.v1.ShareableContact.deserializeBinaryFromReader);
      msg.setContact(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DecodeContact.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DecodeContact.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DecodeContact.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DecodeContact.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContact();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.ShareableContact.serializeBinaryToWriter
    );
  }
};


/**
 * optional ShareableContact contact = 1;
 * @return {?proto.weshnet.protocol.v1.ShareableContact}
 */
proto.weshnet.protocol.v1.DecodeContact.Reply.prototype.getContact = function() {
  return /** @type{?proto.weshnet.protocol.v1.ShareableContact} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.ShareableContact, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.ShareableContact|undefined} value
 * @return {!proto.weshnet.protocol.v1.DecodeContact.Reply} returns this
*/
proto.weshnet.protocol.v1.DecodeContact.Reply.prototype.setContact = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.DecodeContact.Reply} returns this
 */
proto.weshnet.protocol.v1.DecodeContact.Reply.prototype.clearContact = function() {
  return this.setContact(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.DecodeContact.Reply.prototype.hasContact = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactBlock.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactBlock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactBlock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactBlock.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactBlock}
 */
proto.weshnet.protocol.v1.ContactBlock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactBlock;
  return proto.weshnet.protocol.v1.ContactBlock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactBlock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactBlock}
 */
proto.weshnet.protocol.v1.ContactBlock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactBlock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactBlock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactBlock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactBlock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactBlock.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactBlock.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactBlock.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactBlock.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contactPk: msg.getContactPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactBlock.Request}
 */
proto.weshnet.protocol.v1.ContactBlock.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactBlock.Request;
  return proto.weshnet.protocol.v1.ContactBlock.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactBlock.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactBlock.Request}
 */
proto.weshnet.protocol.v1.ContactBlock.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactBlock.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactBlock.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactBlock.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactBlock.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes contact_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactBlock.Request.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contact_pk = 1;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactBlock.Request.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactBlock.Request.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactBlock.Request} returns this
 */
proto.weshnet.protocol.v1.ContactBlock.Request.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactBlock.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactBlock.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactBlock.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactBlock.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactBlock.Reply}
 */
proto.weshnet.protocol.v1.ContactBlock.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactBlock.Reply;
  return proto.weshnet.protocol.v1.ContactBlock.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactBlock.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactBlock.Reply}
 */
proto.weshnet.protocol.v1.ContactBlock.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactBlock.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactBlock.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactBlock.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactBlock.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactUnblock.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactUnblock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactUnblock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactUnblock.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactUnblock}
 */
proto.weshnet.protocol.v1.ContactUnblock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactUnblock;
  return proto.weshnet.protocol.v1.ContactUnblock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactUnblock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactUnblock}
 */
proto.weshnet.protocol.v1.ContactUnblock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactUnblock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactUnblock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactUnblock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactUnblock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactUnblock.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactUnblock.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactUnblock.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactUnblock.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contactPk: msg.getContactPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactUnblock.Request}
 */
proto.weshnet.protocol.v1.ContactUnblock.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactUnblock.Request;
  return proto.weshnet.protocol.v1.ContactUnblock.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactUnblock.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactUnblock.Request}
 */
proto.weshnet.protocol.v1.ContactUnblock.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactUnblock.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactUnblock.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactUnblock.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactUnblock.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes contact_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactUnblock.Request.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contact_pk = 1;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactUnblock.Request.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactUnblock.Request.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactUnblock.Request} returns this
 */
proto.weshnet.protocol.v1.ContactUnblock.Request.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactUnblock.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactUnblock.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactUnblock.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactUnblock.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactUnblock.Reply}
 */
proto.weshnet.protocol.v1.ContactUnblock.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactUnblock.Reply;
  return proto.weshnet.protocol.v1.ContactUnblock.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactUnblock.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactUnblock.Reply}
 */
proto.weshnet.protocol.v1.ContactUnblock.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactUnblock.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactUnblock.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactUnblock.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactUnblock.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactAliasKeySend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeySend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeySend}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactAliasKeySend;
  return proto.weshnet.protocol.v1.ContactAliasKeySend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeySend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeySend}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactAliasKeySend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeySend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactAliasKeySend.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeySend.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeySend.Request}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactAliasKeySend.Request;
  return proto.weshnet.protocol.v1.ContactAliasKeySend.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeySend.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeySend.Request}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactAliasKeySend.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeySend.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeySend.Request} returns this
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ContactAliasKeySend.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeySend.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeySend.Reply}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ContactAliasKeySend.Reply;
  return proto.weshnet.protocol.v1.ContactAliasKeySend.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeySend.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ContactAliasKeySend.Reply}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ContactAliasKeySend.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ContactAliasKeySend.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ContactAliasKeySend.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupCreate}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupCreate;
  return proto.weshnet.protocol.v1.MultiMemberGroupCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupCreate}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request;
  return proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply;
  return proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupCreate.Reply.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupJoin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupJoin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupJoin}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupJoin;
  return proto.weshnet.protocol.v1.MultiMemberGroupJoin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupJoin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupJoin}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupJoin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupJoin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.weshnet.protocol.v1.Group.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request;
  return proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.Group;
      reader.readMessage(value,proto.weshnet.protocol.v1.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional Group group = 1;
 * @return {?proto.weshnet.protocol.v1.Group}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.prototype.getGroup = function() {
  return /** @type{?proto.weshnet.protocol.v1.Group} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.Group, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.Group|undefined} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request} returns this
*/
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Request.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply;
  return proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupJoin.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupLeave.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupLeave} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupLeave}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupLeave;
  return proto.weshnet.protocol.v1.MultiMemberGroupLeave.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupLeave} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupLeave}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupLeave.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupLeave} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request;
  return proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply;
  return proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupLeave.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose;
  return proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request;
  return proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply;
  return proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAliasResolverDisclose.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant;
  return proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64(),
    memberPk: msg.getMemberPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request;
  return proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMemberPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMemberPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes member_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.prototype.getMemberPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes member_pk = 2;
 * This is a type-conversion wrapper around `getMemberPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.prototype.getMemberPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMemberPk()));
};


/**
 * optional bytes member_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemberPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.prototype.getMemberPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMemberPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Request.prototype.setMemberPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply;
  return proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupAdminRoleGrant.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate;
  return proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request;
  return proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.weshnet.protocol.v1.Group.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply;
  return proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.Group;
      reader.readMessage(value,proto.weshnet.protocol.v1.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional Group group = 1;
 * @return {?proto.weshnet.protocol.v1.Group}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.prototype.getGroup = function() {
  return /** @type{?proto.weshnet.protocol.v1.Group} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.Group, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.Group|undefined} value
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply} returns this
*/
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply} returns this
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.MultiMemberGroupInvitationCreate.Reply.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AppMetadataSend.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AppMetadataSend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AppMetadataSend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMetadataSend.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AppMetadataSend}
 */
proto.weshnet.protocol.v1.AppMetadataSend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AppMetadataSend;
  return proto.weshnet.protocol.v1.AppMetadataSend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AppMetadataSend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AppMetadataSend}
 */
proto.weshnet.protocol.v1.AppMetadataSend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMetadataSend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AppMetadataSend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AppMetadataSend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMetadataSend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AppMetadataSend.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AppMetadataSend.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64(),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AppMetadataSend.Request}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AppMetadataSend.Request;
  return proto.weshnet.protocol.v1.AppMetadataSend.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AppMetadataSend.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AppMetadataSend.Request}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AppMetadataSend.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AppMetadataSend.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AppMetadataSend.Request} returns this
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AppMetadataSend.Request} returns this
 */
proto.weshnet.protocol.v1.AppMetadataSend.Request.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AppMetadataSend.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AppMetadataSend.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AppMetadataSend.Reply}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AppMetadataSend.Reply;
  return proto.weshnet.protocol.v1.AppMetadataSend.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AppMetadataSend.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AppMetadataSend.Reply}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AppMetadataSend.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AppMetadataSend.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AppMetadataSend.Reply} returns this
 */
proto.weshnet.protocol.v1.AppMetadataSend.Reply.prototype.setCid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AppMessageSend.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AppMessageSend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AppMessageSend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMessageSend.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AppMessageSend}
 */
proto.weshnet.protocol.v1.AppMessageSend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AppMessageSend;
  return proto.weshnet.protocol.v1.AppMessageSend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AppMessageSend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AppMessageSend}
 */
proto.weshnet.protocol.v1.AppMessageSend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMessageSend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AppMessageSend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AppMessageSend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMessageSend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AppMessageSend.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AppMessageSend.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64(),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AppMessageSend.Request}
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AppMessageSend.Request;
  return proto.weshnet.protocol.v1.AppMessageSend.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AppMessageSend.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AppMessageSend.Request}
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AppMessageSend.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AppMessageSend.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AppMessageSend.Request} returns this
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes payload = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes payload = 2;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AppMessageSend.Request} returns this
 */
proto.weshnet.protocol.v1.AppMessageSend.Request.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AppMessageSend.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AppMessageSend.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AppMessageSend.Reply}
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AppMessageSend.Reply;
  return proto.weshnet.protocol.v1.AppMessageSend.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AppMessageSend.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AppMessageSend.Reply}
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AppMessageSend.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AppMessageSend.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AppMessageSend.Reply} returns this
 */
proto.weshnet.protocol.v1.AppMessageSend.Reply.prototype.setCid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupMetadataEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupMetadataEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventContext: (f = msg.getEventContext()) && proto.weshnet.protocol.v1.EventContext.toObject(includeInstance, f),
    metadata: (f = msg.getMetadata()) && proto.weshnet.protocol.v1.GroupMetadata.toObject(includeInstance, f),
    event: msg.getEvent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupMetadataEvent}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupMetadataEvent;
  return proto.weshnet.protocol.v1.GroupMetadataEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupMetadataEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupMetadataEvent}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.EventContext;
      reader.readMessage(value,proto.weshnet.protocol.v1.EventContext.deserializeBinaryFromReader);
      msg.setEventContext(value);
      break;
    case 2:
      var value = new proto.weshnet.protocol.v1.GroupMetadata;
      reader.readMessage(value,proto.weshnet.protocol.v1.GroupMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupMetadataEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupMetadataEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.EventContext.serializeBinaryToWriter
    );
  }
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.weshnet.protocol.v1.GroupMetadata.serializeBinaryToWriter
    );
  }
  f = message.getEvent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional EventContext event_context = 1;
 * @return {?proto.weshnet.protocol.v1.EventContext}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.getEventContext = function() {
  return /** @type{?proto.weshnet.protocol.v1.EventContext} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.EventContext, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.EventContext|undefined} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataEvent} returns this
*/
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.setEventContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.GroupMetadataEvent} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.clearEventContext = function() {
  return this.setEventContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.hasEventContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GroupMetadata metadata = 2;
 * @return {?proto.weshnet.protocol.v1.GroupMetadata}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.getMetadata = function() {
  return /** @type{?proto.weshnet.protocol.v1.GroupMetadata} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.GroupMetadata, 2));
};


/**
 * @param {?proto.weshnet.protocol.v1.GroupMetadata|undefined} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataEvent} returns this
*/
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.GroupMetadataEvent} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes event = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.getEvent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes event = 3;
 * This is a type-conversion wrapper around `getEvent()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.getEvent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvent()));
};


/**
 * optional bytes event = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvent()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.getEvent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataEvent} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataEvent.prototype.setEvent = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupMessageEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupMessageEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMessageEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventContext: (f = msg.getEventContext()) && proto.weshnet.protocol.v1.EventContext.toObject(includeInstance, f),
    headers: (f = msg.getHeaders()) && proto.weshnet.protocol.v1.MessageHeaders.toObject(includeInstance, f),
    message: msg.getMessage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupMessageEvent}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupMessageEvent;
  return proto.weshnet.protocol.v1.GroupMessageEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupMessageEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupMessageEvent}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.EventContext;
      reader.readMessage(value,proto.weshnet.protocol.v1.EventContext.deserializeBinaryFromReader);
      msg.setEventContext(value);
      break;
    case 2:
      var value = new proto.weshnet.protocol.v1.MessageHeaders;
      reader.readMessage(value,proto.weshnet.protocol.v1.MessageHeaders.deserializeBinaryFromReader);
      msg.setHeaders(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupMessageEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupMessageEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMessageEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.EventContext.serializeBinaryToWriter
    );
  }
  f = message.getHeaders();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.weshnet.protocol.v1.MessageHeaders.serializeBinaryToWriter
    );
  }
  f = message.getMessage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional EventContext event_context = 1;
 * @return {?proto.weshnet.protocol.v1.EventContext}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.getEventContext = function() {
  return /** @type{?proto.weshnet.protocol.v1.EventContext} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.EventContext, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.EventContext|undefined} value
 * @return {!proto.weshnet.protocol.v1.GroupMessageEvent} returns this
*/
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.setEventContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.GroupMessageEvent} returns this
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.clearEventContext = function() {
  return this.setEventContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.hasEventContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MessageHeaders headers = 2;
 * @return {?proto.weshnet.protocol.v1.MessageHeaders}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.getHeaders = function() {
  return /** @type{?proto.weshnet.protocol.v1.MessageHeaders} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.MessageHeaders, 2));
};


/**
 * @param {?proto.weshnet.protocol.v1.MessageHeaders|undefined} value
 * @return {!proto.weshnet.protocol.v1.GroupMessageEvent} returns this
*/
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.setHeaders = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.GroupMessageEvent} returns this
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.clearHeaders = function() {
  return this.setHeaders(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.hasHeaders = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes message = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.getMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes message = 3;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * optional bytes message = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMessageEvent} returns this
 */
proto.weshnet.protocol.v1.GroupMessageEvent.prototype.setMessage = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupMetadataList.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupMetadataList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupMetadataList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMetadataList.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupMetadataList}
 */
proto.weshnet.protocol.v1.GroupMetadataList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupMetadataList;
  return proto.weshnet.protocol.v1.GroupMetadataList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupMetadataList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupMetadataList}
 */
proto.weshnet.protocol.v1.GroupMetadataList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadataList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupMetadataList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupMetadataList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMetadataList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupMetadataList.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupMetadataList.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64(),
    sinceId: msg.getSinceId_asB64(),
    sinceNow: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    untilId: msg.getUntilId_asB64(),
    untilNow: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    reverseOrder: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupMetadataList.Request}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupMetadataList.Request;
  return proto.weshnet.protocol.v1.GroupMetadataList.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupMetadataList.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupMetadataList.Request}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSinceId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSinceNow(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUntilId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUntilNow(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverseOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupMetadataList.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupMetadataList.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSinceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSinceNow();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUntilId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getUntilNow();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getReverseOrder();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes since_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getSinceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes since_id = 2;
 * This is a type-conversion wrapper around `getSinceId()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getSinceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSinceId()));
};


/**
 * optional bytes since_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSinceId()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getSinceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSinceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.setSinceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool since_now = 3;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getSinceNow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.setSinceNow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bytes until_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getUntilId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes until_id = 4;
 * This is a type-conversion wrapper around `getUntilId()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getUntilId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUntilId()));
};


/**
 * optional bytes until_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUntilId()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getUntilId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUntilId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.setUntilId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool until_now = 5;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getUntilNow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.setUntilNow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool reverse_order = 6;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.getReverseOrder = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.GroupMetadataList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMetadataList.Request.prototype.setReverseOrder = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupMessageList.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupMessageList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupMessageList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMessageList.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupMessageList}
 */
proto.weshnet.protocol.v1.GroupMessageList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupMessageList;
  return proto.weshnet.protocol.v1.GroupMessageList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupMessageList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupMessageList}
 */
proto.weshnet.protocol.v1.GroupMessageList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMessageList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupMessageList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupMessageList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMessageList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupMessageList.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupMessageList.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64(),
    sinceId: msg.getSinceId_asB64(),
    sinceNow: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    untilId: msg.getUntilId_asB64(),
    untilNow: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    reverseOrder: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupMessageList.Request}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupMessageList.Request;
  return proto.weshnet.protocol.v1.GroupMessageList.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupMessageList.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupMessageList.Request}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSinceId(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSinceNow(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUntilId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUntilNow(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReverseOrder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupMessageList.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupMessageList.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSinceId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSinceNow();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getUntilId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getUntilNow();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getReverseOrder();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMessageList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes since_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getSinceId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes since_id = 2;
 * This is a type-conversion wrapper around `getSinceId()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getSinceId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSinceId()));
};


/**
 * optional bytes since_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSinceId()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getSinceId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSinceId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMessageList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.setSinceId = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool since_now = 3;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getSinceNow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.GroupMessageList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.setSinceNow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bytes until_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getUntilId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes until_id = 4;
 * This is a type-conversion wrapper around `getUntilId()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getUntilId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUntilId()));
};


/**
 * optional bytes until_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUntilId()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getUntilId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUntilId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupMessageList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.setUntilId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bool until_now = 5;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getUntilNow = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.GroupMessageList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.setUntilNow = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool reverse_order = 6;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.getReverseOrder = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.GroupMessageList.Request} returns this
 */
proto.weshnet.protocol.v1.GroupMessageList.Request.prototype.setReverseOrder = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupInfo}
 */
proto.weshnet.protocol.v1.GroupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupInfo;
  return proto.weshnet.protocol.v1.GroupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupInfo}
 */
proto.weshnet.protocol.v1.GroupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupInfo.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupInfo.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupInfo.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupInfo.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64(),
    contactPk: msg.getContactPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupInfo.Request}
 */
proto.weshnet.protocol.v1.GroupInfo.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupInfo.Request;
  return proto.weshnet.protocol.v1.GroupInfo.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupInfo.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupInfo.Request}
 */
proto.weshnet.protocol.v1.GroupInfo.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupInfo.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupInfo.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupInfo.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupInfo.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupInfo.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupInfo.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupInfo.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupInfo.Request} returns this
 */
proto.weshnet.protocol.v1.GroupInfo.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes contact_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupInfo.Request.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contact_pk = 2;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupInfo.Request.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupInfo.Request.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupInfo.Request} returns this
 */
proto.weshnet.protocol.v1.GroupInfo.Request.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupInfo.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupInfo.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.weshnet.protocol.v1.Group.toObject(includeInstance, f),
    memberPk: msg.getMemberPk_asB64(),
    devicePk: msg.getDevicePk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupInfo.Reply}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupInfo.Reply;
  return proto.weshnet.protocol.v1.GroupInfo.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupInfo.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupInfo.Reply}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.Group;
      reader.readMessage(value,proto.weshnet.protocol.v1.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMemberPk(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupInfo.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupInfo.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.Group.serializeBinaryToWriter
    );
  }
  f = message.getMemberPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional Group group = 1;
 * @return {?proto.weshnet.protocol.v1.Group}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.getGroup = function() {
  return /** @type{?proto.weshnet.protocol.v1.Group} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.Group, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.Group|undefined} value
 * @return {!proto.weshnet.protocol.v1.GroupInfo.Reply} returns this
*/
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.GroupInfo.Reply} returns this
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes member_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.getMemberPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes member_pk = 2;
 * This is a type-conversion wrapper around `getMemberPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.getMemberPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMemberPk()));
};


/**
 * optional bytes member_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemberPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.getMemberPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMemberPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupInfo.Reply} returns this
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.setMemberPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes device_pk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes device_pk = 3;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupInfo.Reply} returns this
 */
proto.weshnet.protocol.v1.GroupInfo.Reply.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ActivateGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ActivateGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ActivateGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ActivateGroup.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ActivateGroup}
 */
proto.weshnet.protocol.v1.ActivateGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ActivateGroup;
  return proto.weshnet.protocol.v1.ActivateGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ActivateGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ActivateGroup}
 */
proto.weshnet.protocol.v1.ActivateGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ActivateGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ActivateGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ActivateGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ActivateGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ActivateGroup.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ActivateGroup.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64(),
    localOnly: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ActivateGroup.Request}
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ActivateGroup.Request;
  return proto.weshnet.protocol.v1.ActivateGroup.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ActivateGroup.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ActivateGroup.Request}
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocalOnly(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ActivateGroup.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ActivateGroup.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLocalOnly();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ActivateGroup.Request} returns this
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool local_only = 2;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.prototype.getLocalOnly = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.ActivateGroup.Request} returns this
 */
proto.weshnet.protocol.v1.ActivateGroup.Request.prototype.setLocalOnly = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ActivateGroup.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ActivateGroup.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ActivateGroup.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ActivateGroup.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ActivateGroup.Reply}
 */
proto.weshnet.protocol.v1.ActivateGroup.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ActivateGroup.Reply;
  return proto.weshnet.protocol.v1.ActivateGroup.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ActivateGroup.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ActivateGroup.Reply}
 */
proto.weshnet.protocol.v1.ActivateGroup.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ActivateGroup.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ActivateGroup.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ActivateGroup.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ActivateGroup.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DeactivateGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DeactivateGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DeactivateGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DeactivateGroup.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DeactivateGroup}
 */
proto.weshnet.protocol.v1.DeactivateGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DeactivateGroup;
  return proto.weshnet.protocol.v1.DeactivateGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DeactivateGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DeactivateGroup}
 */
proto.weshnet.protocol.v1.DeactivateGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DeactivateGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DeactivateGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DeactivateGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DeactivateGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DeactivateGroup.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DeactivateGroup.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DeactivateGroup.Request}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DeactivateGroup.Request;
  return proto.weshnet.protocol.v1.DeactivateGroup.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DeactivateGroup.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DeactivateGroup.Request}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DeactivateGroup.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DeactivateGroup.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.DeactivateGroup.Request} returns this
 */
proto.weshnet.protocol.v1.DeactivateGroup.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DeactivateGroup.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DeactivateGroup.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DeactivateGroup.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DeactivateGroup.Reply}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DeactivateGroup.Reply;
  return proto.weshnet.protocol.v1.DeactivateGroup.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DeactivateGroup.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DeactivateGroup.Reply}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DeactivateGroup.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DeactivateGroup.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DeactivateGroup.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DeactivateGroup.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupDeviceStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupDeviceStatus;
  return proto.weshnet.protocol.v1.GroupDeviceStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupDeviceStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Type = {
  TYPEUNKNOWN: 0,
  TYPEPEERDISCONNECTED: 1,
  TYPEPEERCONNECTED: 2,
  TYPEPEERRECONNECTING: 3
};

/**
 * @enum {number}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Transport = {
  TPTUNKNOWN: 0,
  TPTLAN: 1,
  TPTWAN: 2,
  TPTPROXIMITY: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupDeviceStatus.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Request}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupDeviceStatus.Request;
  return proto.weshnet.protocol.v1.GroupDeviceStatus.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Request}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupDeviceStatus.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Request} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    event: msg.getEvent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupDeviceStatus.Reply;
  return proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.weshnet.protocol.v1.GroupDeviceStatus.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEvent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    devicePk: msg.getDevicePk_asB64(),
    transportsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    maddrsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected;
  return proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 3:
      var values = /** @type {!Array<!proto.weshnet.protocol.v1.GroupDeviceStatus.Transport>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTransports(values[i]);
      }
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addMaddrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getTransportsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getMaddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string peer_id = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes device_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes device_pk = 2;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Transport transports = 3;
 * @return {!Array<!proto.weshnet.protocol.v1.GroupDeviceStatus.Transport>}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.getTransportsList = function() {
  return /** @type {!Array<!proto.weshnet.protocol.v1.GroupDeviceStatus.Transport>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<!proto.weshnet.protocol.v1.GroupDeviceStatus.Transport>} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.setTransportsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Transport} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.addTransports = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.clearTransportsList = function() {
  return this.setTransportsList([]);
};


/**
 * repeated string maddrs = 4;
 * @return {!Array<string>}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.getMaddrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.setMaddrsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.addMaddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerConnected.prototype.clearMaddrsList = function() {
  return this.setMaddrsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting;
  return proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string peer_id = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerReconnecting.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected;
  return proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPeerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string peer_id = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.prototype.getPeerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.PeerDisconnected.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Type type = 1;
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Type}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.prototype.getType = function() {
  return /** @type {!proto.weshnet.protocol.v1.GroupDeviceStatus.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.GroupDeviceStatus.Type} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes event = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.prototype.getEvent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes event = 2;
 * This is a type-conversion wrapper around `getEvent()`
 * @return {string}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.prototype.getEvent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvent()));
};


/**
 * optional bytes event = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvent()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.prototype.getEvent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.GroupDeviceStatus.Reply} returns this
 */
proto.weshnet.protocol.v1.GroupDeviceStatus.Reply.prototype.setEvent = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DebugListGroups.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DebugListGroups.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DebugListGroups} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugListGroups.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DebugListGroups}
 */
proto.weshnet.protocol.v1.DebugListGroups.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DebugListGroups;
  return proto.weshnet.protocol.v1.DebugListGroups.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DebugListGroups} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DebugListGroups}
 */
proto.weshnet.protocol.v1.DebugListGroups.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugListGroups.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DebugListGroups.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DebugListGroups} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugListGroups.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DebugListGroups.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DebugListGroups.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DebugListGroups.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugListGroups.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DebugListGroups.Request}
 */
proto.weshnet.protocol.v1.DebugListGroups.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DebugListGroups.Request;
  return proto.weshnet.protocol.v1.DebugListGroups.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DebugListGroups.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DebugListGroups.Request}
 */
proto.weshnet.protocol.v1.DebugListGroups.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugListGroups.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DebugListGroups.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DebugListGroups.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugListGroups.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DebugListGroups.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DebugListGroups.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64(),
    groupType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contactPk: msg.getContactPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DebugListGroups.Reply}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DebugListGroups.Reply;
  return proto.weshnet.protocol.v1.DebugListGroups.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DebugListGroups.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DebugListGroups.Reply}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 2:
      var value = /** @type {!proto.weshnet.protocol.v1.GroupType} */ (reader.readEnum());
      msg.setGroupType(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DebugListGroups.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DebugListGroups.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroupType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.DebugListGroups.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional GroupType group_type = 2;
 * @return {!proto.weshnet.protocol.v1.GroupType}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.getGroupType = function() {
  return /** @type {!proto.weshnet.protocol.v1.GroupType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.GroupType} value
 * @return {!proto.weshnet.protocol.v1.DebugListGroups.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.setGroupType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bytes contact_pk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes contact_pk = 3;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.DebugListGroups.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugListGroups.Reply.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DebugInspectGroupStore.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DebugInspectGroupStore} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DebugInspectGroupStore;
  return proto.weshnet.protocol.v1.DebugInspectGroupStore.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DebugInspectGroupStore} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DebugInspectGroupStore.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DebugInspectGroupStore} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64(),
    logType: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Request}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DebugInspectGroupStore.Request;
  return proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Request}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 2:
      var value = /** @type {!proto.weshnet.protocol.v1.DebugInspectGroupLogType} */ (reader.readEnum());
      msg.setLogType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLogType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Request} returns this
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional DebugInspectGroupLogType log_type = 2;
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupLogType}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.prototype.getLogType = function() {
  return /** @type {!proto.weshnet.protocol.v1.DebugInspectGroupLogType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.DebugInspectGroupLogType} value
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Request} returns this
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Request.prototype.setLogType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64(),
    parentCidsList: msg.getParentCidsList_asB64(),
    metadataEventType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    devicePk: msg.getDevicePk_asB64(),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply;
  return proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addParentCids(value);
      break;
    case 3:
      var value = /** @type {!proto.weshnet.protocol.v1.EventType} */ (reader.readEnum());
      msg.setMetadataEventType(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getParentCidsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getMetadataEventType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.setCid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes parent_cids = 2;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getParentCidsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes parent_cids = 2;
 * This is a type-conversion wrapper around `getParentCidsList()`
 * @return {!Array<string>}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getParentCidsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getParentCidsList()));
};


/**
 * repeated bytes parent_cids = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentCidsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getParentCidsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getParentCidsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.setParentCidsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.addParentCids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.clearParentCidsList = function() {
  return this.setParentCidsList([]);
};


/**
 * optional EventType metadata_event_type = 3;
 * @return {!proto.weshnet.protocol.v1.EventType}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getMetadataEventType = function() {
  return /** @type {!proto.weshnet.protocol.v1.EventType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.EventType} value
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.setMetadataEventType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional bytes device_pk = 4;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes device_pk = 4;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes payload = 6;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes payload = 6;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugInspectGroupStore.Reply.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DebugGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DebugGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DebugGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugGroup.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DebugGroup}
 */
proto.weshnet.protocol.v1.DebugGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DebugGroup;
  return proto.weshnet.protocol.v1.DebugGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DebugGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DebugGroup}
 */
proto.weshnet.protocol.v1.DebugGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DebugGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DebugGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DebugGroup.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DebugGroup.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DebugGroup.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugGroup.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DebugGroup.Request}
 */
proto.weshnet.protocol.v1.DebugGroup.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DebugGroup.Request;
  return proto.weshnet.protocol.v1.DebugGroup.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DebugGroup.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DebugGroup.Request}
 */
proto.weshnet.protocol.v1.DebugGroup.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugGroup.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DebugGroup.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DebugGroup.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugGroup.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.DebugGroup.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.DebugGroup.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugGroup.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.DebugGroup.Request} returns this
 */
proto.weshnet.protocol.v1.DebugGroup.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.DebugGroup.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.DebugGroup.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerIdsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.DebugGroup.Reply}
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.DebugGroup.Reply;
  return proto.weshnet.protocol.v1.DebugGroup.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.DebugGroup.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.DebugGroup.Reply}
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPeerIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.DebugGroup.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.DebugGroup.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string peer_ids = 1;
 * @return {!Array<string>}
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.prototype.getPeerIdsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.weshnet.protocol.v1.DebugGroup.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.prototype.setPeerIdsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.DebugGroup.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.prototype.addPeerIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.DebugGroup.Reply} returns this
 */
proto.weshnet.protocol.v1.DebugGroup.Reply.prototype.clearPeerIdsList = function() {
  return this.setPeerIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ShareableContact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ShareableContact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ShareableContact.toObject = function(includeInstance, msg) {
  var f, obj = {
    pk: msg.getPk_asB64(),
    publicRendezvousSeed: msg.getPublicRendezvousSeed_asB64(),
    metadata: msg.getMetadata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ShareableContact}
 */
proto.weshnet.protocol.v1.ShareableContact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ShareableContact;
  return proto.weshnet.protocol.v1.ShareableContact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ShareableContact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ShareableContact}
 */
proto.weshnet.protocol.v1.ShareableContact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicRendezvousSeed(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ShareableContact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ShareableContact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ShareableContact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPublicRendezvousSeed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getMetadata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pk = 1;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPk()));
};


/**
 * optional bytes pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ShareableContact} returns this
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes public_rendezvous_seed = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.getPublicRendezvousSeed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes public_rendezvous_seed = 2;
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.getPublicRendezvousSeed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicRendezvousSeed()));
};


/**
 * optional bytes public_rendezvous_seed = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicRendezvousSeed()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.getPublicRendezvousSeed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicRendezvousSeed()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ShareableContact} returns this
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.setPublicRendezvousSeed = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes metadata = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.getMetadata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes metadata = 3;
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.getMetadata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMetadata()));
};


/**
 * optional bytes metadata = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMetadata()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.getMetadata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMetadata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ShareableContact} returns this
 */
proto.weshnet.protocol.v1.ShareableContact.prototype.setMetadata = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ServiceTokenSupportedService.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ServiceTokenSupportedService} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    serviceEndpoint: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ServiceTokenSupportedService}
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ServiceTokenSupportedService;
  return proto.weshnet.protocol.v1.ServiceTokenSupportedService.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ServiceTokenSupportedService} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ServiceTokenSupportedService}
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceEndpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ServiceTokenSupportedService.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ServiceTokenSupportedService} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getServiceEndpoint();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string service_type = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService.prototype.getServiceType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.ServiceTokenSupportedService} returns this
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService.prototype.setServiceType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string service_endpoint = 2;
 * @return {string}
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService.prototype.getServiceEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.ServiceTokenSupportedService} returns this
 */
proto.weshnet.protocol.v1.ServiceTokenSupportedService.prototype.setServiceEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.ServiceToken.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ServiceToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ServiceToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    authenticationUrl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    supportedServicesList: jspb.Message.toObjectList(msg.getSupportedServicesList(),
    proto.weshnet.protocol.v1.ServiceTokenSupportedService.toObject, includeInstance),
    expiration: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ServiceToken}
 */
proto.weshnet.protocol.v1.ServiceToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ServiceToken;
  return proto.weshnet.protocol.v1.ServiceToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ServiceToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ServiceToken}
 */
proto.weshnet.protocol.v1.ServiceToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthenticationUrl(value);
      break;
    case 3:
      var value = new proto.weshnet.protocol.v1.ServiceTokenSupportedService;
      reader.readMessage(value,proto.weshnet.protocol.v1.ServiceTokenSupportedService.deserializeBinaryFromReader);
      msg.addSupportedServices(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpiration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ServiceToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ServiceToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ServiceToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAuthenticationUrl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSupportedServicesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.weshnet.protocol.v1.ServiceTokenSupportedService.serializeBinaryToWriter
    );
  }
  f = message.getExpiration();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.ServiceToken} returns this
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string authentication_url = 2;
 * @return {string}
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.getAuthenticationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.ServiceToken} returns this
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.setAuthenticationUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated ServiceTokenSupportedService supported_services = 3;
 * @return {!Array<!proto.weshnet.protocol.v1.ServiceTokenSupportedService>}
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.getSupportedServicesList = function() {
  return /** @type{!Array<!proto.weshnet.protocol.v1.ServiceTokenSupportedService>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.weshnet.protocol.v1.ServiceTokenSupportedService, 3));
};


/**
 * @param {!Array<!proto.weshnet.protocol.v1.ServiceTokenSupportedService>} value
 * @return {!proto.weshnet.protocol.v1.ServiceToken} returns this
*/
proto.weshnet.protocol.v1.ServiceToken.prototype.setSupportedServicesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.weshnet.protocol.v1.ServiceTokenSupportedService=} opt_value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.ServiceTokenSupportedService}
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.addSupportedServices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.weshnet.protocol.v1.ServiceTokenSupportedService, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.ServiceToken} returns this
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.clearSupportedServicesList = function() {
  return this.setSupportedServicesList([]);
};


/**
 * optional int64 expiration = 4;
 * @return {number}
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.getExpiration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.ServiceToken} returns this
 */
proto.weshnet.protocol.v1.ServiceToken.prototype.setExpiration = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow;
  return proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    serviceUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    publicKey: msg.getPublicKey_asB64(),
    link: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request;
  return proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceUrl(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLink(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServiceUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLink();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string service_url = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.prototype.getServiceUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request} returns this
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.prototype.setServiceUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes public_key = 2;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request} returns this
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string link = 3;
 * @return {string}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.prototype.getLink = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request} returns this
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Request.prototype.setLink = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    secureUrl: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply;
  return proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSecureUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSecureUrl();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply} returns this
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool secure_url = 2;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.prototype.getSecureUrl = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply} returns this
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceInitFlow.Reply.prototype.setSecureUrl = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow;
  return proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    callbackUri: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request;
  return proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCallbackUri(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCallbackUri();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string callback_uri = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.prototype.getCallbackUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request} returns this
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Request.prototype.setCallbackUri = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply;
  return proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply} returns this
 */
proto.weshnet.protocol.v1.CredentialVerificationServiceCompleteFlow.Reply.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.VerifiedCredentialsList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.VerifiedCredentialsList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.VerifiedCredentialsList;
  return proto.weshnet.protocol.v1.VerifiedCredentialsList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.VerifiedCredentialsList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.VerifiedCredentialsList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.VerifiedCredentialsList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    filterIdentifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filterIssuer: jspb.Message.getFieldWithDefault(msg, 2, ""),
    excludeExpired: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Request}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.VerifiedCredentialsList.Request;
  return proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Request}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterIssuer(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExcludeExpired(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilterIssuer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExcludeExpired();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string filter_identifier = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.prototype.getFilterIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Request} returns this
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.prototype.setFilterIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filter_issuer = 2;
 * @return {string}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.prototype.getFilterIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Request} returns this
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.prototype.setFilterIssuer = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool exclude_expired = 3;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.prototype.getExcludeExpired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Request} returns this
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Request.prototype.setExcludeExpired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    credential: (f = msg.getCredential()) && proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply;
  return proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered;
      reader.readMessage(value,proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.deserializeBinaryFromReader);
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCredential();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.serializeBinaryToWriter
    );
  }
};


/**
 * optional AccountVerifiedCredentialRegistered credential = 1;
 * @return {?proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.prototype.getCredential = function() {
  return /** @type{?proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered|undefined} value
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply} returns this
*/
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.prototype.setCredential = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply} returns this
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.prototype.clearCredential = function() {
  return this.setCredential(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.VerifiedCredentialsList.Reply.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup;
  return proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupPk: msg.getGroupPk_asB64(),
    token: jspb.Message.getFieldWithDefault(msg, 2, ""),
    authenticationUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    replicationServer: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request;
  return proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPk(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthenticationUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReplicationServer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAuthenticationUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getReplicationServer();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bytes group_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.getGroupPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes group_pk = 1;
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.getGroupPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPk()));
};


/**
 * optional bytes group_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.getGroupPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request} returns this
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.setGroupPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request} returns this
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string authentication_url = 3;
 * @return {string}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.getAuthenticationUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request} returns this
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.setAuthenticationUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string replication_server = 4;
 * @return {string}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.getReplicationServer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request} returns this
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Request.prototype.setReplicationServer = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply;
  return proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceRegisterGroup.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup;
  return proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.weshnet.protocol.v1.Group.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request;
  return proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.Group;
      reader.readMessage(value,proto.weshnet.protocol.v1.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional Group group = 1;
 * @return {?proto.weshnet.protocol.v1.Group}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.prototype.getGroup = function() {
  return /** @type{?proto.weshnet.protocol.v1.Group} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.Group, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.Group|undefined} value
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request} returns this
*/
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request} returns this
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Request.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    ok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply;
  return proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOk();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool ok = 1;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.prototype.getOk = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply} returns this
 */
proto.weshnet.protocol.v1.ReplicationServiceReplicateGroup.Reply.prototype.setOk = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.SystemInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.SystemInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.SystemInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.SystemInfo}
 */
proto.weshnet.protocol.v1.SystemInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.SystemInfo;
  return proto.weshnet.protocol.v1.SystemInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.SystemInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.SystemInfo}
 */
proto.weshnet.protocol.v1.SystemInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.SystemInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.SystemInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.SystemInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.SystemInfo.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.SystemInfo.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.SystemInfo.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Request}
 */
proto.weshnet.protocol.v1.SystemInfo.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.SystemInfo.Request;
  return proto.weshnet.protocol.v1.SystemInfo.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Request}
 */
proto.weshnet.protocol.v1.SystemInfo.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.SystemInfo.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.SystemInfo.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.SystemInfo.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.SystemInfo.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    process: (f = msg.getProcess()) && proto.weshnet.protocol.v1.SystemInfo.Process.toObject(includeInstance, f),
    p2p: (f = msg.getP2p()) && proto.weshnet.protocol.v1.SystemInfo.P2P.toObject(includeInstance, f),
    orbitdb: (f = msg.getOrbitdb()) && proto.weshnet.protocol.v1.SystemInfo.OrbitDB.toObject(includeInstance, f),
    warnsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.SystemInfo.Reply;
  return proto.weshnet.protocol.v1.SystemInfo.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.SystemInfo.Process;
      reader.readMessage(value,proto.weshnet.protocol.v1.SystemInfo.Process.deserializeBinaryFromReader);
      msg.setProcess(value);
      break;
    case 2:
      var value = new proto.weshnet.protocol.v1.SystemInfo.P2P;
      reader.readMessage(value,proto.weshnet.protocol.v1.SystemInfo.P2P.deserializeBinaryFromReader);
      msg.setP2p(value);
      break;
    case 3:
      var value = new proto.weshnet.protocol.v1.SystemInfo.OrbitDB;
      reader.readMessage(value,proto.weshnet.protocol.v1.SystemInfo.OrbitDB.deserializeBinaryFromReader);
      msg.setOrbitdb(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addWarns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.SystemInfo.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.SystemInfo.Process.serializeBinaryToWriter
    );
  }
  f = message.getP2p();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.weshnet.protocol.v1.SystemInfo.P2P.serializeBinaryToWriter
    );
  }
  f = message.getOrbitdb();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.weshnet.protocol.v1.SystemInfo.OrbitDB.serializeBinaryToWriter
    );
  }
  f = message.getWarnsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional Process process = 1;
 * @return {?proto.weshnet.protocol.v1.SystemInfo.Process}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.getProcess = function() {
  return /** @type{?proto.weshnet.protocol.v1.SystemInfo.Process} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.SystemInfo.Process, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.SystemInfo.Process|undefined} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply} returns this
*/
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.setProcess = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.clearProcess = function() {
  return this.setProcess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.hasProcess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional P2P p2p = 2;
 * @return {?proto.weshnet.protocol.v1.SystemInfo.P2P}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.getP2p = function() {
  return /** @type{?proto.weshnet.protocol.v1.SystemInfo.P2P} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.SystemInfo.P2P, 2));
};


/**
 * @param {?proto.weshnet.protocol.v1.SystemInfo.P2P|undefined} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply} returns this
*/
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.setP2p = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.clearP2p = function() {
  return this.setP2p(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.hasP2p = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional OrbitDB orbitdb = 3;
 * @return {?proto.weshnet.protocol.v1.SystemInfo.OrbitDB}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.getOrbitdb = function() {
  return /** @type{?proto.weshnet.protocol.v1.SystemInfo.OrbitDB} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.SystemInfo.OrbitDB, 3));
};


/**
 * @param {?proto.weshnet.protocol.v1.SystemInfo.OrbitDB|undefined} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply} returns this
*/
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.setOrbitdb = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.clearOrbitdb = function() {
  return this.setOrbitdb(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.hasOrbitdb = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated string warns = 4;
 * @return {!Array<string>}
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.getWarnsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.setWarnsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.addWarns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Reply} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Reply.prototype.clearWarnsList = function() {
  return this.setWarnsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.SystemInfo.OrbitDB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountMetadata: (f = msg.getAccountMetadata()) && proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.SystemInfo.OrbitDB;
  return proto.weshnet.protocol.v1.SystemInfo.OrbitDB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus;
      reader.readMessage(value,proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.deserializeBinaryFromReader);
      msg.setAccountMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.SystemInfo.OrbitDB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    progress: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maximum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    buffered: jspb.Message.getFieldWithDefault(msg, 3, 0),
    queued: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus;
  return proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setProgress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaximum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBuffered(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQueued(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProgress();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMaximum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getBuffered();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getQueued();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 progress = 1;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.prototype.setProgress = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 maximum = 2;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.prototype.getMaximum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.prototype.setMaximum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 buffered = 3;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.prototype.getBuffered = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.prototype.setBuffered = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 queued = 4;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.prototype.getQueued = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus.prototype.setQueued = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional ReplicationStatus account_metadata = 1;
 * @return {?proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.prototype.getAccountMetadata = function() {
  return /** @type{?proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.SystemInfo.OrbitDB.ReplicationStatus|undefined} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB} returns this
*/
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.prototype.setAccountMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.OrbitDB} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.prototype.clearAccountMetadata = function() {
  return this.setAccountMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.SystemInfo.OrbitDB.prototype.hasAccountMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.SystemInfo.P2P.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.SystemInfo.P2P.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.SystemInfo.P2P} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.P2P.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectedPeers: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.P2P}
 */
proto.weshnet.protocol.v1.SystemInfo.P2P.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.SystemInfo.P2P;
  return proto.weshnet.protocol.v1.SystemInfo.P2P.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.P2P} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.P2P}
 */
proto.weshnet.protocol.v1.SystemInfo.P2P.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConnectedPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.SystemInfo.P2P.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.SystemInfo.P2P.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.P2P} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.P2P.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConnectedPeers();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 connected_peers = 1;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.P2P.prototype.getConnectedPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.P2P} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.P2P.prototype.setConnectedPeers = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.SystemInfo.Process.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.SystemInfo.Process} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.Process.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, ""),
    vcsRef: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uptimeMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userCpuTimeMs: jspb.Message.getFieldWithDefault(msg, 10, 0),
    systemCpuTimeMs: jspb.Message.getFieldWithDefault(msg, 11, 0),
    startedAt: jspb.Message.getFieldWithDefault(msg, 12, 0),
    rlimitCur: jspb.Message.getFieldWithDefault(msg, 13, 0),
    numGoroutine: jspb.Message.getFieldWithDefault(msg, 14, 0),
    nofile: jspb.Message.getFieldWithDefault(msg, 15, 0),
    tooManyOpenFiles: jspb.Message.getBooleanFieldWithDefault(msg, 16, false),
    numCpu: jspb.Message.getFieldWithDefault(msg, 17, 0),
    goVersion: jspb.Message.getFieldWithDefault(msg, 18, ""),
    operatingSystem: jspb.Message.getFieldWithDefault(msg, 19, ""),
    hostName: jspb.Message.getFieldWithDefault(msg, 20, ""),
    arch: jspb.Message.getFieldWithDefault(msg, 21, ""),
    rlimitMax: jspb.Message.getFieldWithDefault(msg, 22, 0),
    pid: jspb.Message.getFieldWithDefault(msg, 23, 0),
    ppid: jspb.Message.getFieldWithDefault(msg, 24, 0),
    priority: jspb.Message.getFieldWithDefault(msg, 25, 0),
    uid: jspb.Message.getFieldWithDefault(msg, 26, 0),
    workingDir: jspb.Message.getFieldWithDefault(msg, 27, ""),
    systemUsername: jspb.Message.getFieldWithDefault(msg, 28, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.SystemInfo.Process;
  return proto.weshnet.protocol.v1.SystemInfo.Process.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.Process} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVcsRef(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUptimeMs(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserCpuTimeMs(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSystemCpuTimeMs(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartedAt(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRlimitCur(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumGoroutine(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNofile(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTooManyOpenFiles(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNumCpu(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setGoVersion(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setOperatingSystem(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostName(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setArch(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRlimitMax(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPid(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPpid(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPriority(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 27:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkingDir(value);
      break;
    case 28:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.SystemInfo.Process.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.SystemInfo.Process} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.SystemInfo.Process.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVcsRef();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUptimeMs();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUserCpuTimeMs();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getSystemCpuTimeMs();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getStartedAt();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
  f = message.getRlimitCur();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = message.getNumGoroutine();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getNofile();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getTooManyOpenFiles();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = message.getNumCpu();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getGoVersion();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getOperatingSystem();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = message.getHostName();
  if (f.length > 0) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getArch();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
  f = message.getRlimitMax();
  if (f !== 0) {
    writer.writeUint64(
      22,
      f
    );
  }
  f = message.getPid();
  if (f !== 0) {
    writer.writeInt64(
      23,
      f
    );
  }
  f = message.getPpid();
  if (f !== 0) {
    writer.writeInt64(
      24,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeInt64(
      25,
      f
    );
  }
  f = message.getUid();
  if (f !== 0) {
    writer.writeInt64(
      26,
      f
    );
  }
  f = message.getWorkingDir();
  if (f.length > 0) {
    writer.writeString(
      27,
      f
    );
  }
  f = message.getSystemUsername();
  if (f.length > 0) {
    writer.writeString(
      28,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string vcs_ref = 2;
 * @return {string}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getVcsRef = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setVcsRef = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 uptime_ms = 3;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getUptimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setUptimeMs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 user_cpu_time_ms = 10;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getUserCpuTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setUserCpuTimeMs = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 system_cpu_time_ms = 11;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getSystemCpuTimeMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setSystemCpuTimeMs = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int64 started_at = 12;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getStartedAt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setStartedAt = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional uint64 rlimit_cur = 13;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getRlimitCur = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setRlimitCur = function(value) {
  return jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 num_goroutine = 14;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getNumGoroutine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setNumGoroutine = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int64 nofile = 15;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getNofile = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setNofile = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bool too_many_open_files = 16;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getTooManyOpenFiles = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 16, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setTooManyOpenFiles = function(value) {
  return jspb.Message.setProto3BooleanField(this, 16, value);
};


/**
 * optional int64 num_cpu = 17;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getNumCpu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setNumCpu = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string go_version = 18;
 * @return {string}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getGoVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setGoVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional string operating_system = 19;
 * @return {string}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getOperatingSystem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setOperatingSystem = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};


/**
 * optional string host_name = 20;
 * @return {string}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getHostName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setHostName = function(value) {
  return jspb.Message.setProto3StringField(this, 20, value);
};


/**
 * optional string arch = 21;
 * @return {string}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getArch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setArch = function(value) {
  return jspb.Message.setProto3StringField(this, 21, value);
};


/**
 * optional uint64 rlimit_max = 22;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getRlimitMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setRlimitMax = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int64 pid = 23;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getPid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setPid = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int64 ppid = 24;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getPpid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setPpid = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int64 priority = 25;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setPriority = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional int64 uid = 26;
 * @return {number}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 26, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setUid = function(value) {
  return jspb.Message.setProto3IntField(this, 26, value);
};


/**
 * optional string working_dir = 27;
 * @return {string}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getWorkingDir = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 27, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setWorkingDir = function(value) {
  return jspb.Message.setProto3StringField(this, 27, value);
};


/**
 * optional string system_username = 28;
 * @return {string}
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.getSystemUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 28, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.SystemInfo.Process} returns this
 */
proto.weshnet.protocol.v1.SystemInfo.Process.prototype.setSystemUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 28, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.PeerList.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.PeerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.PeerList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.PeerList}
 */
proto.weshnet.protocol.v1.PeerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.PeerList;
  return proto.weshnet.protocol.v1.PeerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.PeerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.PeerList}
 */
proto.weshnet.protocol.v1.PeerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.PeerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.PeerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.PeerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.weshnet.protocol.v1.PeerList.Feature = {
  UNKNOWNFEATURE: 0,
  WESHFEATURE: 1,
  BLEFEATURE: 2,
  LOCALFEATURE: 3,
  TORFEATURE: 4,
  QUICFEATURE: 5
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.PeerList.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.PeerList.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.PeerList.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.Request.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.PeerList.Request}
 */
proto.weshnet.protocol.v1.PeerList.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.PeerList.Request;
  return proto.weshnet.protocol.v1.PeerList.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.PeerList.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.PeerList.Request}
 */
proto.weshnet.protocol.v1.PeerList.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.PeerList.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.PeerList.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.PeerList.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.PeerList.Reply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.PeerList.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.PeerList.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.PeerList.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    peersList: jspb.Message.toObjectList(msg.getPeersList(),
    proto.weshnet.protocol.v1.PeerList.Peer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.PeerList.Reply}
 */
proto.weshnet.protocol.v1.PeerList.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.PeerList.Reply;
  return proto.weshnet.protocol.v1.PeerList.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.PeerList.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.PeerList.Reply}
 */
proto.weshnet.protocol.v1.PeerList.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.PeerList.Peer;
      reader.readMessage(value,proto.weshnet.protocol.v1.PeerList.Peer.deserializeBinaryFromReader);
      msg.addPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.PeerList.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.PeerList.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.PeerList.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.weshnet.protocol.v1.PeerList.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Peer peers = 1;
 * @return {!Array<!proto.weshnet.protocol.v1.PeerList.Peer>}
 */
proto.weshnet.protocol.v1.PeerList.Reply.prototype.getPeersList = function() {
  return /** @type{!Array<!proto.weshnet.protocol.v1.PeerList.Peer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.weshnet.protocol.v1.PeerList.Peer, 1));
};


/**
 * @param {!Array<!proto.weshnet.protocol.v1.PeerList.Peer>} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Reply} returns this
*/
proto.weshnet.protocol.v1.PeerList.Reply.prototype.setPeersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.weshnet.protocol.v1.PeerList.Peer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer}
 */
proto.weshnet.protocol.v1.PeerList.Reply.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.weshnet.protocol.v1.PeerList.Peer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.PeerList.Reply} returns this
 */
proto.weshnet.protocol.v1.PeerList.Reply.prototype.clearPeersList = function() {
  return this.setPeersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.PeerList.Peer.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.PeerList.Peer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.PeerList.Peer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.Peer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.weshnet.protocol.v1.PeerList.Route.toObject, includeInstance),
    errorsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    featuresList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    minLatency: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    direction: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer}
 */
proto.weshnet.protocol.v1.PeerList.Peer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.PeerList.Peer;
  return proto.weshnet.protocol.v1.PeerList.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.PeerList.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer}
 */
proto.weshnet.protocol.v1.PeerList.Peer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new proto.weshnet.protocol.v1.PeerList.Route;
      reader.readMessage(value,proto.weshnet.protocol.v1.PeerList.Route.deserializeBinaryFromReader);
      msg.addRoutes(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addErrors(value);
      break;
    case 4:
      var values = /** @type {!Array<!proto.weshnet.protocol.v1.PeerList.Feature>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addFeatures(values[i]);
      }
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinLatency(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 7:
      var value = /** @type {!proto.weshnet.protocol.v1.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.PeerList.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.PeerList.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.Peer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.weshnet.protocol.v1.PeerList.Route.serializeBinaryToWriter
    );
  }
  f = message.getErrorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getFeaturesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
  f = message.getMinLatency();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Route routes = 2;
 * @return {!Array<!proto.weshnet.protocol.v1.PeerList.Route>}
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.getRoutesList = function() {
  return /** @type{!Array<!proto.weshnet.protocol.v1.PeerList.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.weshnet.protocol.v1.PeerList.Route, 2));
};


/**
 * @param {!Array<!proto.weshnet.protocol.v1.PeerList.Route>} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
*/
proto.weshnet.protocol.v1.PeerList.Peer.prototype.setRoutesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.weshnet.protocol.v1.PeerList.Route=} opt_value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.PeerList.Route}
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.addRoutes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.weshnet.protocol.v1.PeerList.Route, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.clearRoutesList = function() {
  return this.setRoutesList([]);
};


/**
 * repeated string errors = 3;
 * @return {!Array<string>}
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.getErrorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.setErrorsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.addErrors = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.clearErrorsList = function() {
  return this.setErrorsList([]);
};


/**
 * repeated Feature features = 4;
 * @return {!Array<!proto.weshnet.protocol.v1.PeerList.Feature>}
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.getFeaturesList = function() {
  return /** @type {!Array<!proto.weshnet.protocol.v1.PeerList.Feature>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.weshnet.protocol.v1.PeerList.Feature>} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.setFeaturesList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.weshnet.protocol.v1.PeerList.Feature} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.addFeatures = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.clearFeaturesList = function() {
  return this.setFeaturesList([]);
};


/**
 * optional int64 min_latency = 5;
 * @return {number}
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.getMinLatency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.setMinLatency = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool is_active = 6;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional Direction direction = 7;
 * @return {!proto.weshnet.protocol.v1.Direction}
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.getDirection = function() {
  return /** @type {!proto.weshnet.protocol.v1.Direction} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.Direction} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Peer} returns this
 */
proto.weshnet.protocol.v1.PeerList.Peer.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.PeerList.Route.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.PeerList.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.PeerList.Route} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    isActive: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    direction: jspb.Message.getFieldWithDefault(msg, 3, 0),
    latency: jspb.Message.getFieldWithDefault(msg, 4, 0),
    streamsList: jspb.Message.toObjectList(msg.getStreamsList(),
    proto.weshnet.protocol.v1.PeerList.Stream.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.PeerList.Route}
 */
proto.weshnet.protocol.v1.PeerList.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.PeerList.Route;
  return proto.weshnet.protocol.v1.PeerList.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.PeerList.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.PeerList.Route}
 */
proto.weshnet.protocol.v1.PeerList.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsActive(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {!proto.weshnet.protocol.v1.Direction} */ (reader.readEnum());
      msg.setDirection(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLatency(value);
      break;
    case 5:
      var value = new proto.weshnet.protocol.v1.PeerList.Stream;
      reader.readMessage(value,proto.weshnet.protocol.v1.PeerList.Stream.deserializeBinaryFromReader);
      msg.addStreams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.PeerList.Route.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.PeerList.Route} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.Route.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getLatency();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getStreamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.weshnet.protocol.v1.PeerList.Stream.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool is_active = 1;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.getIsActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Route} returns this
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.setIsActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Route} returns this
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Direction direction = 3;
 * @return {!proto.weshnet.protocol.v1.Direction}
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.getDirection = function() {
  return /** @type {!proto.weshnet.protocol.v1.Direction} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.weshnet.protocol.v1.Direction} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Route} returns this
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.setDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int64 latency = 4;
 * @return {number}
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.getLatency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Route} returns this
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.setLatency = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Stream streams = 5;
 * @return {!Array<!proto.weshnet.protocol.v1.PeerList.Stream>}
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.getStreamsList = function() {
  return /** @type{!Array<!proto.weshnet.protocol.v1.PeerList.Stream>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.weshnet.protocol.v1.PeerList.Stream, 5));
};


/**
 * @param {!Array<!proto.weshnet.protocol.v1.PeerList.Stream>} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Route} returns this
*/
proto.weshnet.protocol.v1.PeerList.Route.prototype.setStreamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.weshnet.protocol.v1.PeerList.Stream=} opt_value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.PeerList.Stream}
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.addStreams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.weshnet.protocol.v1.PeerList.Stream, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.PeerList.Route} returns this
 */
proto.weshnet.protocol.v1.PeerList.Route.prototype.clearStreamsList = function() {
  return this.setStreamsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.PeerList.Stream.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.PeerList.Stream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.PeerList.Stream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.Stream.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.PeerList.Stream}
 */
proto.weshnet.protocol.v1.PeerList.Stream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.PeerList.Stream;
  return proto.weshnet.protocol.v1.PeerList.Stream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.PeerList.Stream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.PeerList.Stream}
 */
proto.weshnet.protocol.v1.PeerList.Stream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.PeerList.Stream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.PeerList.Stream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.PeerList.Stream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.PeerList.Stream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.PeerList.Stream.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.PeerList.Stream} returns this
 */
proto.weshnet.protocol.v1.PeerList.Stream.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.Progress.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.Progress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.Progress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.Progress.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getFieldWithDefault(msg, 1, ""),
    doing: jspb.Message.getFieldWithDefault(msg, 2, ""),
    progress: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    completed: jspb.Message.getFieldWithDefault(msg, 4, 0),
    total: jspb.Message.getFieldWithDefault(msg, 5, 0),
    delay: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.Progress}
 */
proto.weshnet.protocol.v1.Progress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.Progress;
  return proto.weshnet.protocol.v1.Progress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.Progress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.Progress}
 */
proto.weshnet.protocol.v1.Progress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDoing(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProgress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCompleted(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDelay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.Progress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.Progress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.Progress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.Progress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDoing();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProgress();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCompleted();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getDelay();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
};


/**
 * optional string state = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.Progress.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.Progress} returns this
 */
proto.weshnet.protocol.v1.Progress.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string doing = 2;
 * @return {string}
 */
proto.weshnet.protocol.v1.Progress.prototype.getDoing = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.Progress} returns this
 */
proto.weshnet.protocol.v1.Progress.prototype.setDoing = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float progress = 3;
 * @return {number}
 */
proto.weshnet.protocol.v1.Progress.prototype.getProgress = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.Progress} returns this
 */
proto.weshnet.protocol.v1.Progress.prototype.setProgress = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional uint64 completed = 4;
 * @return {number}
 */
proto.weshnet.protocol.v1.Progress.prototype.getCompleted = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.Progress} returns this
 */
proto.weshnet.protocol.v1.Progress.prototype.setCompleted = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 total = 5;
 * @return {number}
 */
proto.weshnet.protocol.v1.Progress.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.Progress} returns this
 */
proto.weshnet.protocol.v1.Progress.prototype.setTotal = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 delay = 6;
 * @return {number}
 */
proto.weshnet.protocol.v1.Progress.prototype.getDelay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.Progress} returns this
 */
proto.weshnet.protocol.v1.Progress.prototype.setDelay = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.OutOfStoreMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.OutOfStoreMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64(),
    devicePk: msg.getDevicePk_asB64(),
    counter: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sig: msg.getSig_asB64(),
    flags: jspb.Message.getFieldWithDefault(msg, 5, 0),
    encryptedPayload: msg.getEncryptedPayload_asB64(),
    nonce: msg.getNonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessage}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.OutOfStoreMessage;
  return proto.weshnet.protocol.v1.OutOfStoreMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessage}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setCounter(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed32());
      msg.setFlags(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedPayload(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.OutOfStoreMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCounter();
  if (f !== 0) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getFlags();
  if (f !== 0) {
    writer.writeFixed32(
      5,
      f
    );
  }
  f = message.getEncryptedPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessage} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.setCid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes device_pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes device_pk = 2;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessage} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional fixed64 counter = 3;
 * @return {number}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getCounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessage} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.setCounter = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes sig = 4;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getSig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes sig = 4;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessage} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.setSig = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional fixed32 flags = 5;
 * @return {number}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessage} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.setFlags = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bytes encrypted_payload = 6;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getEncryptedPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes encrypted_payload = 6;
 * This is a type-conversion wrapper around `getEncryptedPayload()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getEncryptedPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedPayload()));
};


/**
 * optional bytes encrypted_payload = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedPayload()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getEncryptedPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessage} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.setEncryptedPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes nonce = 7;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes nonce = 7;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessage} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreMessage.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    nonce: msg.getNonce_asB64(),
    box: msg.getBox_asB64(),
    groupReference: msg.getGroupReference_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope;
  return proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNonce(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBox(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupReference(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNonce_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBox_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getGroupReference_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes nonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.getNonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes nonce = 1;
 * This is a type-conversion wrapper around `getNonce()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.getNonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNonce()));
};


/**
 * optional bytes nonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNonce()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.getNonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNonce()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.setNonce = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes box = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.getBox = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes box = 2;
 * This is a type-conversion wrapper around `getBox()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.getBox_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBox()));
};


/**
 * optional bytes box = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBox()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.getBox_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBox()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.setBox = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes group_reference = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.getGroupReference = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes group_reference = 3;
 * This is a type-conversion wrapper around `getGroupReference()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.getGroupReference_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupReference()));
};


/**
 * optional bytes group_reference = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupReference()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.getGroupReference_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupReference()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreMessageEnvelope.prototype.setGroupReference = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.OutOfStoreReceive.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.OutOfStoreReceive} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.OutOfStoreReceive;
  return proto.weshnet.protocol.v1.OutOfStoreReceive.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreReceive} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.OutOfStoreReceive.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreReceive} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.OutOfStoreReceive.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.OutOfStoreReceive.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive.Request}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.OutOfStoreReceive.Request;
  return proto.weshnet.protocol.v1.OutOfStoreReceive.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreReceive.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive.Request}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.OutOfStoreReceive.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreReceive.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes payload = 1;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * optional bytes payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive.Request} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Request.prototype.setPayload = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.OutOfStoreReceive.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && proto.weshnet.protocol.v1.OutOfStoreMessage.toObject(includeInstance, f),
    cleartext: msg.getCleartext_asB64(),
    groupPublicKey: msg.getGroupPublicKey_asB64(),
    alreadyReceived: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive.Reply}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.OutOfStoreReceive.Reply;
  return proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreReceive.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive.Reply}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.OutOfStoreMessage;
      reader.readMessage(value,proto.weshnet.protocol.v1.OutOfStoreMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCleartext(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPublicKey(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAlreadyReceived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreReceive.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.weshnet.protocol.v1.OutOfStoreMessage.serializeBinaryToWriter
    );
  }
  f = message.getCleartext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getGroupPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAlreadyReceived();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional OutOfStoreMessage message = 1;
 * @return {?proto.weshnet.protocol.v1.OutOfStoreMessage}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.getMessage = function() {
  return /** @type{?proto.weshnet.protocol.v1.OutOfStoreMessage} */ (
    jspb.Message.getWrapperField(this, proto.weshnet.protocol.v1.OutOfStoreMessage, 1));
};


/**
 * @param {?proto.weshnet.protocol.v1.OutOfStoreMessage|undefined} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive.Reply} returns this
*/
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive.Reply} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.clearMessage = function() {
  return this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes cleartext = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.getCleartext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes cleartext = 2;
 * This is a type-conversion wrapper around `getCleartext()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.getCleartext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCleartext()));
};


/**
 * optional bytes cleartext = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCleartext()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.getCleartext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCleartext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive.Reply} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.setCleartext = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes group_public_key = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.getGroupPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes group_public_key = 3;
 * This is a type-conversion wrapper around `getGroupPublicKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.getGroupPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPublicKey()));
};


/**
 * optional bytes group_public_key = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPublicKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.getGroupPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive.Reply} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.setGroupPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bool already_received = 4;
 * @return {boolean}
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.getAlreadyReceived = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreReceive.Reply} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreReceive.Reply.prototype.setAlreadyReceived = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.OutOfStoreSeal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.OutOfStoreSeal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreSeal}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.OutOfStoreSeal;
  return proto.weshnet.protocol.v1.OutOfStoreSeal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreSeal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreSeal}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.OutOfStoreSeal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreSeal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.OutOfStoreSeal.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.OutOfStoreSeal.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    cid: msg.getCid_asB64(),
    groupPublicKey: msg.getGroupPublicKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreSeal.Request}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.OutOfStoreSeal.Request;
  return proto.weshnet.protocol.v1.OutOfStoreSeal.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreSeal.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreSeal.Request}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.OutOfStoreSeal.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreSeal.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getGroupPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes cid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.prototype.getCid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes cid = 1;
 * This is a type-conversion wrapper around `getCid()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.prototype.getCid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCid()));
};


/**
 * optional bytes cid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCid()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.prototype.getCid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreSeal.Request} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.prototype.setCid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes group_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.prototype.getGroupPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes group_public_key = 2;
 * This is a type-conversion wrapper around `getGroupPublicKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.prototype.getGroupPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupPublicKey()));
};


/**
 * optional bytes group_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupPublicKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.prototype.getGroupPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreSeal.Request} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Request.prototype.setGroupPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.OutOfStoreSeal.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    encrypted: msg.getEncrypted_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreSeal.Reply}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.OutOfStoreSeal.Reply;
  return proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreSeal.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.OutOfStoreSeal.Reply}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncrypted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.OutOfStoreSeal.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncrypted_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes encrypted = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.prototype.getEncrypted = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes encrypted = 1;
 * This is a type-conversion wrapper around `getEncrypted()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.prototype.getEncrypted_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncrypted()));
};


/**
 * optional bytes encrypted = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncrypted()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.prototype.getEncrypted_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncrypted()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OutOfStoreSeal.Reply} returns this
 */
proto.weshnet.protocol.v1.OutOfStoreSeal.Reply.prototype.setEncrypted = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.toObject = function(includeInstance, msg) {
  var f, obj = {
    devicePk: msg.getDevicePk_asB64(),
    signedIdentityPublicKey: msg.getSignedIdentityPublicKey_asB64(),
    verifiedCredential: jspb.Message.getFieldWithDefault(msg, 3, ""),
    registrationDate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    expirationDate: jspb.Message.getFieldWithDefault(msg, 5, 0),
    identifier: jspb.Message.getFieldWithDefault(msg, 6, ""),
    issuer: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered;
  return proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignedIdentityPublicKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifiedCredential(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRegistrationDate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpirationDate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setIssuer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getSignedIdentityPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getVerifiedCredential();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegistrationDate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getExpirationDate();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getIssuer();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional bytes device_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes device_pk = 1;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} returns this
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes signed_identity_public_key = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getSignedIdentityPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signed_identity_public_key = 2;
 * This is a type-conversion wrapper around `getSignedIdentityPublicKey()`
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getSignedIdentityPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignedIdentityPublicKey()));
};


/**
 * optional bytes signed_identity_public_key = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignedIdentityPublicKey()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getSignedIdentityPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignedIdentityPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} returns this
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.setSignedIdentityPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string verified_credential = 3;
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getVerifiedCredential = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} returns this
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.setVerifiedCredential = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 registration_date = 4;
 * @return {number}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getRegistrationDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} returns this
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.setRegistrationDate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 expiration_date = 5;
 * @return {number}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getExpirationDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} returns this
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.setExpirationDate = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string identifier = 6;
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} returns this
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.setIdentifier = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string issuer = 7;
 * @return {string}
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.getIssuer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered} returns this
 */
proto.weshnet.protocol.v1.AccountVerifiedCredentialRegistered.prototype.setIssuer = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.FirstLastCounters.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.FirstLastCounters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.FirstLastCounters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.FirstLastCounters.toObject = function(includeInstance, msg) {
  var f, obj = {
    first: jspb.Message.getFieldWithDefault(msg, 1, 0),
    last: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.FirstLastCounters}
 */
proto.weshnet.protocol.v1.FirstLastCounters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.FirstLastCounters;
  return proto.weshnet.protocol.v1.FirstLastCounters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.FirstLastCounters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.FirstLastCounters}
 */
proto.weshnet.protocol.v1.FirstLastCounters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFirst(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLast(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.FirstLastCounters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.FirstLastCounters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.FirstLastCounters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.FirstLastCounters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirst();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLast();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 first = 1;
 * @return {number}
 */
proto.weshnet.protocol.v1.FirstLastCounters.prototype.getFirst = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.FirstLastCounters} returns this
 */
proto.weshnet.protocol.v1.FirstLastCounters.prototype.setFirst = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 last = 2;
 * @return {number}
 */
proto.weshnet.protocol.v1.FirstLastCounters.prototype.getLast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.FirstLastCounters} returns this
 */
proto.weshnet.protocol.v1.FirstLastCounters.prototype.setLast = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.OrbitDBMessageHeads.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.OrbitDBMessageHeads} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.toObject = function(includeInstance, msg) {
  var f, obj = {
    sealedBox: msg.getSealedBox_asB64(),
    rawRotation: msg.getRawRotation_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.OrbitDBMessageHeads}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.OrbitDBMessageHeads;
  return proto.weshnet.protocol.v1.OrbitDBMessageHeads.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.OrbitDBMessageHeads} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.OrbitDBMessageHeads}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSealedBox(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRawRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.OrbitDBMessageHeads.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.OrbitDBMessageHeads} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSealedBox_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRawRotation_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    heads: msg.getHeads_asB64(),
    devicePk: msg.getDevicePk_asB64(),
    peerId: msg.getPeerId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box;
  return proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeads(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevicePk(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHeads_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getDevicePk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getPeerId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box} returns this
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes heads = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.getHeads = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes heads = 2;
 * This is a type-conversion wrapper around `getHeads()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.getHeads_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeads()));
};


/**
 * optional bytes heads = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeads()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.getHeads_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeads()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box} returns this
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.setHeads = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes device_pk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.getDevicePk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes device_pk = 3;
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.getDevicePk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevicePk()));
};


/**
 * optional bytes device_pk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevicePk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.getDevicePk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevicePk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box} returns this
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.setDevicePk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes peer_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.getPeerId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes peer_id = 4;
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.getPeerId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerId()));
};


/**
 * optional bytes peer_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerId()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.getPeerId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box} returns this
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.Box.prototype.setPeerId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes sealed_box = 2;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.prototype.getSealedBox = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sealed_box = 2;
 * This is a type-conversion wrapper around `getSealedBox()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.prototype.getSealedBox_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSealedBox()));
};


/**
 * optional bytes sealed_box = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSealedBox()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.prototype.getSealedBox_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSealedBox()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OrbitDBMessageHeads} returns this
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.prototype.setSealedBox = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes raw_rotation = 3;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.prototype.getRawRotation = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes raw_rotation = 3;
 * This is a type-conversion wrapper around `getRawRotation()`
 * @return {string}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.prototype.getRawRotation_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRawRotation()));
};


/**
 * optional bytes raw_rotation = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRawRotation()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.prototype.getRawRotation_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRawRotation()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.OrbitDBMessageHeads} returns this
 */
proto.weshnet.protocol.v1.OrbitDBMessageHeads.prototype.setRawRotation = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.RefreshContactRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.RefreshContactRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.RefreshContactRequest;
  return proto.weshnet.protocol.v1.RefreshContactRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.RefreshContactRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.RefreshContactRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.RefreshContactRequest.Peer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    addrsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.RefreshContactRequest.Peer;
  return proto.weshnet.protocol.v1.RefreshContactRequest.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.RefreshContactRequest.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddrsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer} returns this
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string addrs = 2;
 * @return {!Array<string>}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.prototype.getAddrsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer} returns this
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.prototype.setAddrsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer} returns this
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.prototype.addAddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer} returns this
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Peer.prototype.clearAddrsList = function() {
  return this.setAddrsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.RefreshContactRequest.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    contactPk: msg.getContactPk_asB64(),
    timeout: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Request}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.RefreshContactRequest.Request;
  return proto.weshnet.protocol.v1.RefreshContactRequest.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Request}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContactPk(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.RefreshContactRequest.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContactPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTimeout();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes contact_pk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.prototype.getContactPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contact_pk = 1;
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {string}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.prototype.getContactPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContactPk()));
};


/**
 * optional bytes contact_pk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContactPk()`
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.prototype.getContactPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContactPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Request} returns this
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.prototype.setContactPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 timeout = 2;
 * @return {number}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Request} returns this
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Request.prototype.setTimeout = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.protocol.v1.RefreshContactRequest.Reply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest.Reply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.toObject = function(includeInstance, msg) {
  var f, obj = {
    peersFoundList: jspb.Message.toObjectList(msg.getPeersFoundList(),
    proto.weshnet.protocol.v1.RefreshContactRequest.Peer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Reply}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.protocol.v1.RefreshContactRequest.Reply;
  return proto.weshnet.protocol.v1.RefreshContactRequest.Reply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest.Reply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Reply}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.weshnet.protocol.v1.RefreshContactRequest.Peer;
      reader.readMessage(value,proto.weshnet.protocol.v1.RefreshContactRequest.Peer.deserializeBinaryFromReader);
      msg.addPeersFound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.protocol.v1.RefreshContactRequest.Reply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest.Reply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeersFoundList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.weshnet.protocol.v1.RefreshContactRequest.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Peer peers_found = 1;
 * @return {!Array<!proto.weshnet.protocol.v1.RefreshContactRequest.Peer>}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.prototype.getPeersFoundList = function() {
  return /** @type{!Array<!proto.weshnet.protocol.v1.RefreshContactRequest.Peer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.weshnet.protocol.v1.RefreshContactRequest.Peer, 1));
};


/**
 * @param {!Array<!proto.weshnet.protocol.v1.RefreshContactRequest.Peer>} value
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Reply} returns this
*/
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.prototype.setPeersFoundList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Peer}
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.prototype.addPeersFound = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.weshnet.protocol.v1.RefreshContactRequest.Peer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.protocol.v1.RefreshContactRequest.Reply} returns this
 */
proto.weshnet.protocol.v1.RefreshContactRequest.Reply.prototype.clearPeersFoundList = function() {
  return this.setPeersFoundList([]);
};


/**
 * @enum {number}
 */
proto.weshnet.protocol.v1.GroupType = {
  GROUPTYPEUNDEFINED: 0,
  GROUPTYPEACCOUNT: 1,
  GROUPTYPECONTACT: 2,
  GROUPTYPEMULTIMEMBER: 3
};

/**
 * @enum {number}
 */
proto.weshnet.protocol.v1.EventType = {
  EVENTTYPEUNDEFINED: 0,
  EVENTTYPEGROUPMEMBERDEVICEADDED: 1,
  EVENTTYPEGROUPDEVICECHAINKEYADDED: 2,
  EVENTTYPEACCOUNTGROUPJOINED: 101,
  EVENTTYPEACCOUNTGROUPLEFT: 102,
  EVENTTYPEACCOUNTCONTACTREQUESTDISABLED: 103,
  EVENTTYPEACCOUNTCONTACTREQUESTENABLED: 104,
  EVENTTYPEACCOUNTCONTACTREQUESTREFERENCERESET: 105,
  EVENTTYPEACCOUNTCONTACTREQUESTOUTGOINGENQUEUED: 106,
  EVENTTYPEACCOUNTCONTACTREQUESTOUTGOINGSENT: 107,
  EVENTTYPEACCOUNTCONTACTREQUESTINCOMINGRECEIVED: 108,
  EVENTTYPEACCOUNTCONTACTREQUESTINCOMINGDISCARDED: 109,
  EVENTTYPEACCOUNTCONTACTREQUESTINCOMINGACCEPTED: 110,
  EVENTTYPEACCOUNTCONTACTBLOCKED: 111,
  EVENTTYPEACCOUNTCONTACTUNBLOCKED: 112,
  EVENTTYPECONTACTALIASKEYADDED: 201,
  EVENTTYPEMULTIMEMBERGROUPALIASRESOLVERADDED: 301,
  EVENTTYPEMULTIMEMBERGROUPINITIALMEMBERANNOUNCED: 302,
  EVENTTYPEMULTIMEMBERGROUPADMINROLEGRANTED: 303,
  EVENTTYPEGROUPREPLICATING: 403,
  EVENTTYPEACCOUNTVERIFIEDCREDENTIALREGISTERED: 500,
  EVENTTYPEGROUPMETADATAPAYLOADSENT: 1001
};

/**
 * @enum {number}
 */
proto.weshnet.protocol.v1.DebugInspectGroupLogType = {
  DEBUGINSPECTGROUPLOGTYPEUNDEFINED: 0,
  DEBUGINSPECTGROUPLOGTYPEMESSAGE: 1,
  DEBUGINSPECTGROUPLOGTYPEMETADATA: 2
};

/**
 * @enum {number}
 */
proto.weshnet.protocol.v1.ContactState = {
  CONTACTSTATEUNDEFINED: 0,
  CONTACTSTATETOREQUEST: 1,
  CONTACTSTATERECEIVED: 2,
  CONTACTSTATEADDED: 3,
  CONTACTSTATEREMOVED: 4,
  CONTACTSTATEDISCARDED: 5,
  CONTACTSTATEBLOCKED: 6
};

/**
 * @enum {number}
 */
proto.weshnet.protocol.v1.Direction = {
  UNKNOWNDIR: 0,
  INBOUNDDIR: 1,
  OUTBOUNDDIR: 2,
  BIDIR: 3
};

goog.object.extend(exports, proto.weshnet.protocol.v1);
