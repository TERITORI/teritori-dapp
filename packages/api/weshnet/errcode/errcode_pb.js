// source: errcode/errcode.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var gogoproto_gogo_pb = require('../gogoproto/gogo_pb.js');
goog.object.extend(proto, gogoproto_gogo_pb);
goog.exportSymbol('proto.weshnet.errcode.ErrCode', null, global);
goog.exportSymbol('proto.weshnet.errcode.ErrDetails', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.weshnet.errcode.ErrDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.weshnet.errcode.ErrDetails.repeatedFields_, null);
};
goog.inherits(proto.weshnet.errcode.ErrDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.weshnet.errcode.ErrDetails.displayName = 'proto.weshnet.errcode.ErrDetails';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.weshnet.errcode.ErrDetails.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.weshnet.errcode.ErrDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.weshnet.errcode.ErrDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.weshnet.errcode.ErrDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.errcode.ErrDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    codesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.weshnet.errcode.ErrDetails}
 */
proto.weshnet.errcode.ErrDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.weshnet.errcode.ErrDetails;
  return proto.weshnet.errcode.ErrDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.weshnet.errcode.ErrDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.weshnet.errcode.ErrDetails}
 */
proto.weshnet.errcode.ErrDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.weshnet.errcode.ErrCode>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addCodes(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.weshnet.errcode.ErrDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.weshnet.errcode.ErrDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.weshnet.errcode.ErrDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.weshnet.errcode.ErrDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodesList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated ErrCode codes = 1;
 * @return {!Array<!proto.weshnet.errcode.ErrCode>}
 */
proto.weshnet.errcode.ErrDetails.prototype.getCodesList = function() {
  return /** @type {!Array<!proto.weshnet.errcode.ErrCode>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.weshnet.errcode.ErrCode>} value
 * @return {!proto.weshnet.errcode.ErrDetails} returns this
 */
proto.weshnet.errcode.ErrDetails.prototype.setCodesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.weshnet.errcode.ErrCode} value
 * @param {number=} opt_index
 * @return {!proto.weshnet.errcode.ErrDetails} returns this
 */
proto.weshnet.errcode.ErrDetails.prototype.addCodes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.weshnet.errcode.ErrDetails} returns this
 */
proto.weshnet.errcode.ErrDetails.prototype.clearCodesList = function() {
  return this.setCodesList([]);
};


/**
 * @enum {number}
 */
proto.weshnet.errcode.ErrCode = {
  UNDEFINED: 0,
  TODO: 666,
  ERRNOTIMPLEMENTED: 777,
  ERRINTERNAL: 888,
  ERRINVALIDINPUT: 100,
  ERRINVALIDRANGE: 101,
  ERRMISSINGINPUT: 102,
  ERRSERIALIZATION: 103,
  ERRDESERIALIZATION: 104,
  ERRSTREAMREAD: 105,
  ERRSTREAMWRITE: 106,
  ERRSTREAMTRANSFORM: 110,
  ERRSTREAMSENDANDCLOSE: 111,
  ERRSTREAMHEADERWRITE: 112,
  ERRSTREAMHEADERREAD: 115,
  ERRSTREAMSINK: 113,
  ERRSTREAMCLOSEANDRECV: 114,
  ERRMISSINGMAPKEY: 107,
  ERRDBWRITE: 108,
  ERRDBREAD: 109,
  ERRDBDESTROY: 120,
  ERRDBMIGRATE: 121,
  ERRDBREPLAY: 122,
  ERRDBRESTORE: 123,
  ERRDBOPEN: 124,
  ERRDBCLOSE: 125,
  ERRCRYPTORANDOMGENERATION: 200,
  ERRCRYPTOKEYGENERATION: 201,
  ERRCRYPTONONCEGENERATION: 202,
  ERRCRYPTOSIGNATURE: 203,
  ERRCRYPTOSIGNATUREVERIFICATION: 204,
  ERRCRYPTODECRYPT: 205,
  ERRCRYPTODECRYPTPAYLOAD: 206,
  ERRCRYPTOENCRYPT: 207,
  ERRCRYPTOKEYCONVERSION: 208,
  ERRCRYPTOCIPHERINIT: 209,
  ERRCRYPTOKEYDERIVATION: 210,
  ERRMAP: 300,
  ERRFOREACH: 301,
  ERRKEYSTOREGET: 400,
  ERRKEYSTOREPUT: 401,
  ERRNOTFOUND: 404,
  ERRORBITDBINIT: 1000,
  ERRORBITDBOPEN: 1001,
  ERRORBITDBAPPEND: 1002,
  ERRORBITDBDESERIALIZATION: 1003,
  ERRORBITDBSTORECAST: 1004,
  ERRHANDSHAKEOWNEPHEMERALKEYGENSEND: 1100,
  ERRHANDSHAKEPEEREPHEMERALKEYRECV: 1101,
  ERRHANDSHAKEREQUESTERAUTHENTICATEBOXKEYGEN: 1102,
  ERRHANDSHAKERESPONDERACCEPTBOXKEYGEN: 1103,
  ERRHANDSHAKEREQUESTERHELLO: 1104,
  ERRHANDSHAKERESPONDERHELLO: 1105,
  ERRHANDSHAKEREQUESTERAUTHENTICATE: 1106,
  ERRHANDSHAKERESPONDERACCEPT: 1107,
  ERRHANDSHAKEREQUESTERACKNOWLEDGE: 1108,
  ERRCONTACTREQUESTSAMEACCOUNT: 1200,
  ERRCONTACTREQUESTCONTACTALREADYADDED: 1201,
  ERRCONTACTREQUESTCONTACTBLOCKED: 1202,
  ERRCONTACTREQUESTCONTACTUNDEFINED: 1203,
  ERRCONTACTREQUESTINCOMINGALREADYRECEIVED: 1204,
  ERRGROUPMEMBERLOGEVENTOPEN: 1300,
  ERRGROUPMEMBERLOGEVENTSIGNATURE: 1301,
  ERRGROUPMEMBERUNKNOWNGROUPID: 1302,
  ERRGROUPSECRETOTHERDESTMEMBER: 1303,
  ERRGROUPSECRETALREADYSENTTOMEMBER: 1304,
  ERRGROUPINVALIDTYPE: 1305,
  ERRGROUPMISSING: 1306,
  ERRGROUPACTIVATE: 1307,
  ERRGROUPDEACTIVATE: 1308,
  ERRGROUPINFO: 1309,
  ERRGROUPUNKNOWN: 1310,
  ERRGROUPOPEN: 1311,
  ERRMESSAGEKEYPERSISTENCEPUT: 1500,
  ERRMESSAGEKEYPERSISTENCEGET: 1501,
  ERRSERVICEREPLICATION: 4100,
  ERRSERVICEREPLICATIONSERVER: 4101,
  ERRSERVICEREPLICATIONMISSINGENDPOINT: 4102,
  ERRSERVICESDIRECTORY: 4200,
  ERRSERVICESDIRECTORYINVALIDVERIFIEDCREDENTIALSUBJECT: 4201,
  ERRSERVICESDIRECTORYEXISTINGRECORDNOTFOUND: 4202,
  ERRSERVICESDIRECTORYRECORDLOCKEDANDCANTBEREPLACED: 4203,
  ERRSERVICESDIRECTORYEXPLICITREPLACEFLAGREQUIRED: 4204,
  ERRSERVICESDIRECTORYINVALIDVERIFIEDCREDENTIAL: 4205,
  ERRSERVICESDIRECTORYEXPIREDVERIFIEDCREDENTIAL: 4206,
  ERRSERVICESDIRECTORYINVALIDVERIFIEDCREDENTIALID: 4207
};

goog.object.extend(exports, proto.weshnet.errcode);
