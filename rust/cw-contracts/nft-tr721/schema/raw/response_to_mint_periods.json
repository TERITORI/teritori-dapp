{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Array_of_MintPeriod",
  "type": "array",
  "items": {
    "$ref": "#/definitions/MintPeriod"
  },
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "MintPeriod": {
      "type": "object",
      "required": [
        "start_time"
      ],
      "properties": {
        "end_time": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "limit_per_address": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "max_tokens": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "price": {
          "anyOf": [
            {
              "$ref": "#/definitions/Coin"
            },
            {
              "type": "null"
            }
          ]
        },
        "start_time": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "whitelist_info": {
          "anyOf": [
            {
              "$ref": "#/definitions/WhitelistInfo"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "WhitelistInfo": {
      "type": "object",
      "required": [
        "addresses_count",
        "addresses_ipfs",
        "addresses_merkle_root"
      ],
      "properties": {
        "addresses_count": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "addresses_ipfs": {
          "type": "string"
        },
        "addresses_merkle_root": {
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}
