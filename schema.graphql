# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Action {
    action: String
    actor: Bytes!
    buy: Buy
    createdAt: BigInt!
    id: ID!
    list: List
    minter: Bytes
    nft: Nft!
    receiver: Bytes
    txID: String!
}

type Buy {
    createdAt: BigInt!
    denom: Bytes
    id: ID!
    minter: Bytes
    nft: Nft!
    price: BigInt
    seller: Bytes!
}

type List {
    createdAt: BigInt!
    denom: Bytes
    id: ID!
    nft: Nft!
    price: BigInt
}

type Nft {
    contract: NftContract!
    createdAt: BigInt!
    creatorAddress: Bytes
    creatorName: String
    denom: Bytes
    id: ID!
    inSale: Boolean
    owner: Bytes
    price: BigInt
    removedAt: BigInt
    seller: Bytes
    tokenID: BigInt!
    tokenURI: String!
}

type NftContract {
    contractURI: String!
    id: ID!
    minter: Bytes
    name: String!
    nfts(first: Int = 100, orderBy: Nft_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Nft_filter): [Nft!]!
    supported: Boolean
    symbol: String
}

type Query {
    "Access to subgraph metadata"
    _meta(block: Block_height): _Meta_
    action(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Action
    actions(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Action_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Action_filter
    ): [Action!]!
    buy(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Buy
    buys(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Buy_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Buy_filter
    ): [Buy!]!
    list(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): List
    lists(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: List_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: List_filter
    ): [List!]!
    nft(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Nft
    nftContract(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): NftContract
    nftContracts(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: NftContract_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: NftContract_filter
    ): [NftContract!]!
    nfts(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Nft_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Nft_filter
    ): [Nft!]!
}

type Subscription {
    "Access to subgraph metadata"
    _meta(block: Block_height): _Meta_
    action(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Action
    actions(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Action_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Action_filter
    ): [Action!]!
    buy(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Buy
    buys(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Buy_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Buy_filter
    ): [Buy!]!
    list(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): List
    lists(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: List_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: List_filter
    ): [List!]!
    nft(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Nft
    nftContract(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        id: ID!,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): NftContract
    nftContracts(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: NftContract_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: NftContract_filter
    ): [NftContract!]!
    nfts(
        "The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted."
        block: Block_height,
        first: Int = 100,
        orderBy: Nft_orderBy,
        orderDirection: OrderDirection,
        skip: Int = 0,
        "Set to `allow` to receive data even if the subgraph has skipped over errors while syncing."
        subgraphError: _SubgraphErrorPolicy_! = deny,
        where: Nft_filter
    ): [Nft!]!
}

type _Block_ {
    "The hash of the block"
    hash: Bytes
    "The block number"
    number: Int!
    "Integer representation of the timestamp stored in blocks for the chain"
    timestamp: Int
}

"The type for the top-level _meta field"
type _Meta_ {
    """

    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!
    "The deployment ID"
    deployment: String!
    "If `true`, the subgraph encountered indexing errors at some past block"
    hasIndexingErrors: Boolean!
}

enum Action_orderBy {
    action
    actor
    buy
    buy__createdAt
    buy__denom
    buy__id
    buy__minter
    buy__price
    buy__seller
    createdAt
    id
    list
    list__createdAt
    list__denom
    list__id
    list__price
    minter
    nft
    nft__createdAt
    nft__creatorAddress
    nft__creatorName
    nft__denom
    nft__id
    nft__inSale
    nft__owner
    nft__price
    nft__removedAt
    nft__seller
    nft__tokenID
    nft__tokenURI
    receiver
    txID
}

enum Buy_orderBy {
    createdAt
    denom
    id
    minter
    nft
    nft__createdAt
    nft__creatorAddress
    nft__creatorName
    nft__denom
    nft__id
    nft__inSale
    nft__owner
    nft__price
    nft__removedAt
    nft__seller
    nft__tokenID
    nft__tokenURI
    price
    seller
}

enum List_orderBy {
    createdAt
    denom
    id
    nft
    nft__createdAt
    nft__creatorAddress
    nft__creatorName
    nft__denom
    nft__id
    nft__inSale
    nft__owner
    nft__price
    nft__removedAt
    nft__seller
    nft__tokenID
    nft__tokenURI
    price
}

enum NftContract_orderBy {
    contractURI
    id
    minter
    name
    nfts
    supported
    symbol
}

enum Nft_orderBy {
    contract
    contract__contractURI
    contract__id
    contract__minter
    contract__name
    contract__supported
    contract__symbol
    createdAt
    creatorAddress
    creatorName
    denom
    id
    inSale
    owner
    price
    removedAt
    seller
    tokenID
    tokenURI
}

"Defines the order direction, either ascending or descending"
enum OrderDirection {
    asc
    desc
}

enum _SubgraphErrorPolicy_ {
    "Data will be returned even if the subgraph has indexing errors"
    allow
    "If the subgraph has indexing errors, data will be omitted. The default."
    deny
}

scalar BigDecimal

scalar BigInt

scalar Bytes

input Action_filter {
    "Filter for the block changed event."
    _change_block: BlockChangedFilter
    action: String
    action_contains: String
    action_contains_nocase: String
    action_ends_with: String
    action_ends_with_nocase: String
    action_gt: String
    action_gte: String
    action_in: [String!]
    action_lt: String
    action_lte: String
    action_not: String
    action_not_contains: String
    action_not_contains_nocase: String
    action_not_ends_with: String
    action_not_ends_with_nocase: String
    action_not_in: [String!]
    action_not_starts_with: String
    action_not_starts_with_nocase: String
    action_starts_with: String
    action_starts_with_nocase: String
    actor: Bytes
    actor_contains: Bytes
    actor_gt: Bytes
    actor_gte: Bytes
    actor_in: [Bytes!]
    actor_lt: Bytes
    actor_lte: Bytes
    actor_not: Bytes
    actor_not_contains: Bytes
    actor_not_in: [Bytes!]
    and: [Action_filter]
    buy: String
    buy_: Buy_filter
    buy_contains: String
    buy_contains_nocase: String
    buy_ends_with: String
    buy_ends_with_nocase: String
    buy_gt: String
    buy_gte: String
    buy_in: [String!]
    buy_lt: String
    buy_lte: String
    buy_not: String
    buy_not_contains: String
    buy_not_contains_nocase: String
    buy_not_ends_with: String
    buy_not_ends_with_nocase: String
    buy_not_in: [String!]
    buy_not_starts_with: String
    buy_not_starts_with_nocase: String
    buy_starts_with: String
    buy_starts_with_nocase: String
    createdAt: BigInt
    createdAt_gt: BigInt
    createdAt_gte: BigInt
    createdAt_in: [BigInt!]
    createdAt_lt: BigInt
    createdAt_lte: BigInt
    createdAt_not: BigInt
    createdAt_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    list: String
    list_: List_filter
    list_contains: String
    list_contains_nocase: String
    list_ends_with: String
    list_ends_with_nocase: String
    list_gt: String
    list_gte: String
    list_in: [String!]
    list_lt: String
    list_lte: String
    list_not: String
    list_not_contains: String
    list_not_contains_nocase: String
    list_not_ends_with: String
    list_not_ends_with_nocase: String
    list_not_in: [String!]
    list_not_starts_with: String
    list_not_starts_with_nocase: String
    list_starts_with: String
    list_starts_with_nocase: String
    minter: Bytes
    minter_contains: Bytes
    minter_gt: Bytes
    minter_gte: Bytes
    minter_in: [Bytes!]
    minter_lt: Bytes
    minter_lte: Bytes
    minter_not: Bytes
    minter_not_contains: Bytes
    minter_not_in: [Bytes!]
    nft: String
    nft_: Nft_filter
    nft_contains: String
    nft_contains_nocase: String
    nft_ends_with: String
    nft_ends_with_nocase: String
    nft_gt: String
    nft_gte: String
    nft_in: [String!]
    nft_lt: String
    nft_lte: String
    nft_not: String
    nft_not_contains: String
    nft_not_contains_nocase: String
    nft_not_ends_with: String
    nft_not_ends_with_nocase: String
    nft_not_in: [String!]
    nft_not_starts_with: String
    nft_not_starts_with_nocase: String
    nft_starts_with: String
    nft_starts_with_nocase: String
    or: [Action_filter]
    receiver: Bytes
    receiver_contains: Bytes
    receiver_gt: Bytes
    receiver_gte: Bytes
    receiver_in: [Bytes!]
    receiver_lt: Bytes
    receiver_lte: Bytes
    receiver_not: Bytes
    receiver_not_contains: Bytes
    receiver_not_in: [Bytes!]
    txID: String
    txID_contains: String
    txID_contains_nocase: String
    txID_ends_with: String
    txID_ends_with_nocase: String
    txID_gt: String
    txID_gte: String
    txID_in: [String!]
    txID_lt: String
    txID_lte: String
    txID_not: String
    txID_not_contains: String
    txID_not_contains_nocase: String
    txID_not_ends_with: String
    txID_not_ends_with_nocase: String
    txID_not_in: [String!]
    txID_not_starts_with: String
    txID_not_starts_with_nocase: String
    txID_starts_with: String
    txID_starts_with_nocase: String
}

input BlockChangedFilter {
    number_gte: Int!
}

input Block_height {
    hash: Bytes
    number: Int
    number_gte: Int
}

input Buy_filter {
    "Filter for the block changed event."
    _change_block: BlockChangedFilter
    and: [Buy_filter]
    createdAt: BigInt
    createdAt_gt: BigInt
    createdAt_gte: BigInt
    createdAt_in: [BigInt!]
    createdAt_lt: BigInt
    createdAt_lte: BigInt
    createdAt_not: BigInt
    createdAt_not_in: [BigInt!]
    denom: Bytes
    denom_contains: Bytes
    denom_gt: Bytes
    denom_gte: Bytes
    denom_in: [Bytes!]
    denom_lt: Bytes
    denom_lte: Bytes
    denom_not: Bytes
    denom_not_contains: Bytes
    denom_not_in: [Bytes!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    minter: Bytes
    minter_contains: Bytes
    minter_gt: Bytes
    minter_gte: Bytes
    minter_in: [Bytes!]
    minter_lt: Bytes
    minter_lte: Bytes
    minter_not: Bytes
    minter_not_contains: Bytes
    minter_not_in: [Bytes!]
    nft: String
    nft_: Nft_filter
    nft_contains: String
    nft_contains_nocase: String
    nft_ends_with: String
    nft_ends_with_nocase: String
    nft_gt: String
    nft_gte: String
    nft_in: [String!]
    nft_lt: String
    nft_lte: String
    nft_not: String
    nft_not_contains: String
    nft_not_contains_nocase: String
    nft_not_ends_with: String
    nft_not_ends_with_nocase: String
    nft_not_in: [String!]
    nft_not_starts_with: String
    nft_not_starts_with_nocase: String
    nft_starts_with: String
    nft_starts_with_nocase: String
    or: [Buy_filter]
    price: BigInt
    price_gt: BigInt
    price_gte: BigInt
    price_in: [BigInt!]
    price_lt: BigInt
    price_lte: BigInt
    price_not: BigInt
    price_not_in: [BigInt!]
    seller: Bytes
    seller_contains: Bytes
    seller_gt: Bytes
    seller_gte: Bytes
    seller_in: [Bytes!]
    seller_lt: Bytes
    seller_lte: Bytes
    seller_not: Bytes
    seller_not_contains: Bytes
    seller_not_in: [Bytes!]
}

input List_filter {
    "Filter for the block changed event."
    _change_block: BlockChangedFilter
    and: [List_filter]
    createdAt: BigInt
    createdAt_gt: BigInt
    createdAt_gte: BigInt
    createdAt_in: [BigInt!]
    createdAt_lt: BigInt
    createdAt_lte: BigInt
    createdAt_not: BigInt
    createdAt_not_in: [BigInt!]
    denom: Bytes
    denom_contains: Bytes
    denom_gt: Bytes
    denom_gte: Bytes
    denom_in: [Bytes!]
    denom_lt: Bytes
    denom_lte: Bytes
    denom_not: Bytes
    denom_not_contains: Bytes
    denom_not_in: [Bytes!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    nft: String
    nft_: Nft_filter
    nft_contains: String
    nft_contains_nocase: String
    nft_ends_with: String
    nft_ends_with_nocase: String
    nft_gt: String
    nft_gte: String
    nft_in: [String!]
    nft_lt: String
    nft_lte: String
    nft_not: String
    nft_not_contains: String
    nft_not_contains_nocase: String
    nft_not_ends_with: String
    nft_not_ends_with_nocase: String
    nft_not_in: [String!]
    nft_not_starts_with: String
    nft_not_starts_with_nocase: String
    nft_starts_with: String
    nft_starts_with_nocase: String
    or: [List_filter]
    price: BigInt
    price_gt: BigInt
    price_gte: BigInt
    price_in: [BigInt!]
    price_lt: BigInt
    price_lte: BigInt
    price_not: BigInt
    price_not_in: [BigInt!]
}

input NftContract_filter {
    "Filter for the block changed event."
    _change_block: BlockChangedFilter
    and: [NftContract_filter]
    contractURI: String
    contractURI_contains: String
    contractURI_contains_nocase: String
    contractURI_ends_with: String
    contractURI_ends_with_nocase: String
    contractURI_gt: String
    contractURI_gte: String
    contractURI_in: [String!]
    contractURI_lt: String
    contractURI_lte: String
    contractURI_not: String
    contractURI_not_contains: String
    contractURI_not_contains_nocase: String
    contractURI_not_ends_with: String
    contractURI_not_ends_with_nocase: String
    contractURI_not_in: [String!]
    contractURI_not_starts_with: String
    contractURI_not_starts_with_nocase: String
    contractURI_starts_with: String
    contractURI_starts_with_nocase: String
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    minter: Bytes
    minter_contains: Bytes
    minter_gt: Bytes
    minter_gte: Bytes
    minter_in: [Bytes!]
    minter_lt: Bytes
    minter_lte: Bytes
    minter_not: Bytes
    minter_not_contains: Bytes
    minter_not_in: [Bytes!]
    name: String
    name_contains: String
    name_contains_nocase: String
    name_ends_with: String
    name_ends_with_nocase: String
    name_gt: String
    name_gte: String
    name_in: [String!]
    name_lt: String
    name_lte: String
    name_not: String
    name_not_contains: String
    name_not_contains_nocase: String
    name_not_ends_with: String
    name_not_ends_with_nocase: String
    name_not_in: [String!]
    name_not_starts_with: String
    name_not_starts_with_nocase: String
    name_starts_with: String
    name_starts_with_nocase: String
    nfts_: Nft_filter
    or: [NftContract_filter]
    supported: Boolean
    supported_in: [Boolean!]
    supported_not: Boolean
    supported_not_in: [Boolean!]
    symbol: String
    symbol_contains: String
    symbol_contains_nocase: String
    symbol_ends_with: String
    symbol_ends_with_nocase: String
    symbol_gt: String
    symbol_gte: String
    symbol_in: [String!]
    symbol_lt: String
    symbol_lte: String
    symbol_not: String
    symbol_not_contains: String
    symbol_not_contains_nocase: String
    symbol_not_ends_with: String
    symbol_not_ends_with_nocase: String
    symbol_not_in: [String!]
    symbol_not_starts_with: String
    symbol_not_starts_with_nocase: String
    symbol_starts_with: String
    symbol_starts_with_nocase: String
}

input Nft_filter {
    "Filter for the block changed event."
    _change_block: BlockChangedFilter
    and: [Nft_filter]
    contract: String
    contract_: NftContract_filter
    contract_contains: String
    contract_contains_nocase: String
    contract_ends_with: String
    contract_ends_with_nocase: String
    contract_gt: String
    contract_gte: String
    contract_in: [String!]
    contract_lt: String
    contract_lte: String
    contract_not: String
    contract_not_contains: String
    contract_not_contains_nocase: String
    contract_not_ends_with: String
    contract_not_ends_with_nocase: String
    contract_not_in: [String!]
    contract_not_starts_with: String
    contract_not_starts_with_nocase: String
    contract_starts_with: String
    contract_starts_with_nocase: String
    createdAt: BigInt
    createdAt_gt: BigInt
    createdAt_gte: BigInt
    createdAt_in: [BigInt!]
    createdAt_lt: BigInt
    createdAt_lte: BigInt
    createdAt_not: BigInt
    createdAt_not_in: [BigInt!]
    creatorAddress: Bytes
    creatorAddress_contains: Bytes
    creatorAddress_gt: Bytes
    creatorAddress_gte: Bytes
    creatorAddress_in: [Bytes!]
    creatorAddress_lt: Bytes
    creatorAddress_lte: Bytes
    creatorAddress_not: Bytes
    creatorAddress_not_contains: Bytes
    creatorAddress_not_in: [Bytes!]
    creatorName: String
    creatorName_contains: String
    creatorName_contains_nocase: String
    creatorName_ends_with: String
    creatorName_ends_with_nocase: String
    creatorName_gt: String
    creatorName_gte: String
    creatorName_in: [String!]
    creatorName_lt: String
    creatorName_lte: String
    creatorName_not: String
    creatorName_not_contains: String
    creatorName_not_contains_nocase: String
    creatorName_not_ends_with: String
    creatorName_not_ends_with_nocase: String
    creatorName_not_in: [String!]
    creatorName_not_starts_with: String
    creatorName_not_starts_with_nocase: String
    creatorName_starts_with: String
    creatorName_starts_with_nocase: String
    denom: Bytes
    denom_contains: Bytes
    denom_gt: Bytes
    denom_gte: Bytes
    denom_in: [Bytes!]
    denom_lt: Bytes
    denom_lte: Bytes
    denom_not: Bytes
    denom_not_contains: Bytes
    denom_not_in: [Bytes!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    inSale: Boolean
    inSale_in: [Boolean!]
    inSale_not: Boolean
    inSale_not_in: [Boolean!]
    or: [Nft_filter]
    owner: Bytes
    owner_contains: Bytes
    owner_gt: Bytes
    owner_gte: Bytes
    owner_in: [Bytes!]
    owner_lt: Bytes
    owner_lte: Bytes
    owner_not: Bytes
    owner_not_contains: Bytes
    owner_not_in: [Bytes!]
    price: BigInt
    price_gt: BigInt
    price_gte: BigInt
    price_in: [BigInt!]
    price_lt: BigInt
    price_lte: BigInt
    price_not: BigInt
    price_not_in: [BigInt!]
    removedAt: BigInt
    removedAt_gt: BigInt
    removedAt_gte: BigInt
    removedAt_in: [BigInt!]
    removedAt_lt: BigInt
    removedAt_lte: BigInt
    removedAt_not: BigInt
    removedAt_not_in: [BigInt!]
    seller: Bytes
    seller_contains: Bytes
    seller_gt: Bytes
    seller_gte: Bytes
    seller_in: [Bytes!]
    seller_lt: Bytes
    seller_lte: Bytes
    seller_not: Bytes
    seller_not_contains: Bytes
    seller_not_in: [Bytes!]
    tokenID: BigInt
    tokenID_gt: BigInt
    tokenID_gte: BigInt
    tokenID_in: [BigInt!]
    tokenID_lt: BigInt
    tokenID_lte: BigInt
    tokenID_not: BigInt
    tokenID_not_in: [BigInt!]
    tokenURI: String
    tokenURI_contains: String
    tokenURI_contains_nocase: String
    tokenURI_ends_with: String
    tokenURI_ends_with_nocase: String
    tokenURI_gt: String
    tokenURI_gte: String
    tokenURI_in: [String!]
    tokenURI_lt: String
    tokenURI_lte: String
    tokenURI_not: String
    tokenURI_not_contains: String
    tokenURI_not_contains_nocase: String
    tokenURI_not_ends_with: String
    tokenURI_not_ends_with_nocase: String
    tokenURI_not_in: [String!]
    tokenURI_not_starts_with: String
    tokenURI_not_starts_with_nocase: String
    tokenURI_starts_with: String
    tokenURI_starts_with_nocase: String
}
